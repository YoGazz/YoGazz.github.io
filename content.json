{"meta":{"title":"Yoga Blog","subtitle":"","description":"我自是年少，韶华倾覆","author":"Yoga","url":"http://example.com","root":"/"},"pages":[{"title":"关于","date":"2023-05-27T02:52:28.441Z","updated":"2023-05-27T02:52:28.441Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"书单","date":"2023-05-26T17:13:31.977Z","updated":"2023-05-26T16:47:29.354Z","comments":false,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-05-26T17:13:31.984Z","updated":"2023-05-26T16:47:29.354Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2023-05-26T17:13:31.967Z","updated":"2023-05-26T16:47:29.353Z","comments":false,"path":"/404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"Repositories","date":"2023-05-26T17:13:31.988Z","updated":"2023-05-26T16:47:29.354Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-05-26T17:13:31.991Z","updated":"2023-05-26T16:47:29.355Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2023-05-27T03:22:39.413Z","updated":"2023-05-27T03:22:39.413Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":"Python Django Vue 测试平台 接口自动化 UI自动化 性能测试"}],"posts":[{"title":"jmeter压测-linux运行jmeter环境","slug":"jmeter压测-linux运行jmeter环境","date":"2023-06-05T04:13:37.000Z","updated":"2023-06-05T04:21:48.202Z","comments":true,"path":"2023/06/05/jmeter压测-linux运行jmeter环境/","link":"","permalink":"http://example.com/2023/06/05/jmeter%E5%8E%8B%E6%B5%8B-linux%E8%BF%90%E8%A1%8Cjmeter%E7%8E%AF%E5%A2%83/","excerpt":"","text":"前言使用jmeter做压测的时候，在windows上不太稳定，所有一直在linux服务器上使用jmeter做压力测试。本篇记录下linux上搭建jmeter环境，以及运行jmeter脚本，查看报告。相关环境：java 1.8jmeter 5.5 一、java环境先在Linux上安装java环境，安装1.8.0版本，先查找java相关的列表 1yum -y list java* 安装java-1.8.0-openjdk相关的文件 1yum -y install java-1.8.0-openjdk* 安装完成后环境变量自动已经生效了，输入java -version查看版本号 1java -version 二、安装jmeter在jmeter官网https://jmeter.apache.org/下载jmeter的zip安装包,下载完成后传到linux上任意目录，比如我的是/root/jmeter。使用unzip命令解压zip文件，如果没有安装过unzip，先yum安装下 1yum -y install unzip 使用unzip 解压.zip 文件 1unzip apache-jmeter-5.5.zip 解压完成后，接下来vi编辑&#x2F;etc&#x2F;profile文件，设置环境变量,在文件底部编辑 1export PATH=/root/jmeter/apache-jmeter-5.5/bin/:$PATH 接下来source执行&#x2F;etc&#x2F;profile文件让环境变量生效 1source /etc/profile 输入jmeter -v能看到内容说明安装成功了 1jmeter -v 三、启动jmeter脚本测试脚本文件(Test Plan.jmx)导入linux服务器上,执行以下命令启动测试计划 1jmeter -n -t Test\\ Plan.jmx -l testplan.jtl 参数说明： n 表示以no gui方式运行测试计划 t 表示测试计划，后面跟测试计划名称, 有空格的话用\\空格表示 l表示测试结果，后面跟测试结果文件名称，后缀是.jtl文件 四、查看报告文件测试结束后导出testplan.jtl文件，在本地jmeter上查看运行结果","categories":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"}],"tags":[{"name":"Jmeter","slug":"Jmeter","permalink":"http://example.com/tags/Jmeter/"},{"name":"性能测试","slug":"性能测试","permalink":"http://example.com/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"}]},{"title":"Docker安装jenkins教程","slug":"Docker安装jenkins教程","date":"2023-06-01T06:22:12.000Z","updated":"2023-06-02T07:04:03.972Z","comments":true,"path":"2023/06/01/Docker安装jenkins教程/","link":"","permalink":"http://example.com/2023/06/01/Docker%E5%AE%89%E8%A3%85jenkins%E6%95%99%E7%A8%8B/","excerpt":"","text":"一、jenkins安装1.查找，下载jenkins镜像文件 1docker search jenkins 下载Jenkins镜像文件 1docker pull jenkins/jenkins:lts 2.创建Jenkins挂载目录并授权权限，这样我们就可以很方便地对容器内的配置文件进行修改。 123mkdir -p /data/jenkins_home/chmod 777 /data/jenkins_home/ 3.创建并启动Jenkins容器 123456docker run -d --name jenkins \\ -p 8080:8080 -p 50000:50000 \\ -v /root/Yoga/data/jenkins_home:/var/jenkins_home \\ -e TZ=Asia/Shanghai \\ jenkins/jenkins:lts -d 后台运行镜像 -p 8080:8080 -p 50000:50000 表示将容器内部的 8080 和 50000 端口映射到主机的 8080 和 50000 端口 -v &#x2F;root&#x2F;Yoga&#x2F;data&#x2F;jenkins_home:&#x2F;var&#x2F;jenkins_home &#x2F;var&#x2F;jenkins_home目录为容器jenkins工作目录，我们将硬盘上的一个目录挂载到这个位置，方便后续更新镜像后继续使用原来的工作目录。这里我们设置的就是上面我们创建的 &#x2F;data&#x2F;jenkins_home目录 -e TZ&#x3D;Asia&#x2F;Shanghai 表示设置时区为亚洲上海时区。 –name myjenkins 给容器起一个别名 4.查看jenkins是否启动成功，如下图出现端口号，就为启动成功了 1docker ps -l 5.查看docker容器日志 1docker logs jenkins 6.配置镜像加速，进入 cd &#x2F;data&#x2F;jenkins_home 目录 123修改hudson.model.UpdateCenter.xml里的内容将 url 修改为清华大学官方镜像：https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json 7.访问Jenkins页面，输入你的ip加上8090 8.管理员密码获取方法，编辑initialAdminPassword文件查看，把密码输入登录中的密码即可，开始使用。 1cat /root/Yoga/data/jenkins_home/secrets/initialAdminPassword","categories":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"},{"name":"Docker","slug":"Linux/Docker","permalink":"http://example.com/categories/Linux/Docker/"}],"tags":[{"name":"jenkins","slug":"jenkins","permalink":"http://example.com/tags/jenkins/"}]},{"title":"Centos安装docker教程","slug":"Centos安装docker教程","date":"2023-05-31T09:46:14.000Z","updated":"2023-06-02T07:06:58.001Z","comments":true,"path":"2023/05/31/Centos安装docker教程/","link":"","permalink":"http://example.com/2023/05/31/Centos%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/","excerpt":"","text":"一、安装前必读在安装 Docker 之前，先说一下配置，我这里是Centos7Linux 内核：官方建议 3.10 以上，3.8以上貌似也可。 1.查看当前的内核版本 1uname -r 2.使用 root 权限更新 yum 包（生产环境中此步操作需慎重，看自己情况，学习的话随便搞） 1yum -y update 这个命令不是必须执行的，看个人情况，后面出现不兼容的情况的话就必须update了 注意 12yum -y update：升级所有包同时也升级软件和系统内核；yum -y upgrade：只升级所有包，不升级软件和系统内核 3.卸载旧版本（如果之前安装过的话） 1yum remove docker docker-common docker-selinux docker-engine 二、安装Docker的详细步骤1.安装需要的软件包， yum-util 提供yum-config-manager功能，另两个是devicemapper驱动依赖 1yum install -y yum-utils device-mapper-persistent-data lvm2 2.设置 yum 源 设置一个yum源，下面两个都可用 123yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo（中央仓库）yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo（阿里仓库） 3.选择docker版本并安装（1）查看可用版本有哪些 1yum list docker-ce --showduplicates | sort -r （2）选择一个版本并安装：yum install docker-ce-版本号 1yum -y install docker-ce-18.06.0.ce-3.el7 4.启动 Docker 并设置开机自启 12systemctl start dockersystemctl enable docker","categories":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"},{"name":"Docker","slug":"Linux/Docker","permalink":"http://example.com/categories/Linux/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"如何在 Django REST Framework 中使用 JWT 身份验证","slug":"如何在-Django-REST-Framework-中使用-JWT-身份验证","date":"2023-05-28T07:46:05.000Z","updated":"2023-05-28T07:48:37.239Z","comments":true,"path":"2023/05/28/如何在-Django-REST-Framework-中使用-JWT-身份验证/","link":"","permalink":"http://example.com/2023/05/28/%E5%A6%82%E4%BD%95%E5%9C%A8-Django-REST-Framework-%E4%B8%AD%E4%BD%BF%E7%94%A8-JWT-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/","excerpt":"","text":"JWT 代表JSON Web Token，它是客户端&#x2F;服务器应用程序使用的一种身份验证策略，其中客户端是使用 JavaScript 和一些前端框架（如 Angular、React 或 VueJS）的 Web 应用程序。 JWT 是如何工作的？JWT 只是一个授权令牌，应该包含在所有请求中： 1curl http://127.0.0.1:8000/hello/ -H &#x27;Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQzODI4NDMxLCJqdGkiOiI3ZjU5OTdiNzE1MGQ0NjU3OWRjMmI0OTE2NzA5N2U3YiIsInVzZXJfaWQiOjF9.Ju70kdcaHKn1Qaz8H42zrOYk0Jx9kIckTn9Xx7vhikY&#x27; JWT 是通过将用户名+密码交换为访问令牌和刷新令牌来获取的。 访问令牌通常是短暂的（5 分钟左右过期，但可以自定义）。 刷新令牌的寿命稍长一些（24 小时后过期，也可自定义）。它类似于身份验证会话。过期后，您需要再次使用用户名+密码进行完整登录。 这是为什么？ 这是一项安全功能，也是因为 JWT 拥有更多信息。如果你仔细看我上面给出的例子，你会看到令牌由三部分组成： 1xxxxx.yyyyy.zzzzz 这些是构成 JWT 的三个独特部分： 1header.payload.signature 所以我们在这里： 123header = eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9payload = eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQzODI4NDMxLCJqdGkiOiI3ZjU5OTdiNzE1MGQ0NjU3OWRjMmI0OTE2NzA5N2U3YiIsInVzZXJfaWQiOjF9signature = Ju70kdcaHKn1Qaz8H42zrOYk0Jx9kIckTn9Xx7vhikY 此信息使用 Base64 编码。如果我们解码，我们会看到这样的东西： 标头 1234&#123; &quot;typ&quot;: &quot;JWT&quot;, &quot;alg&quot;: &quot;HS256&quot;&#125; 有效负载 123456&#123; &quot;token_type&quot;: &quot;access&quot;, &quot;exp&quot;: 1543828431, &quot;jti&quot;: &quot;7f5997b7150d46579dc2b49167097e7b&quot;, &quot;user_id&quot;: 1&#125; 签名 签名由 JWT 后端发出，使用 header base64 + payload base64 + SECRET_KEY。根据每个请求验证此签名。如果客户端更改了标头或有效负载中的任何信息，它将使签名无效。检查和验证签名的唯一方法是使用应用程序的 SECRET_KEY. 除此之外，这就是为什么您应该始终保守SECRET_KEY 秘密！ 安装与设置对于本教程，我们将使用djangorestframework_simplejwt DRF 开发人员推荐的库。 1pip install djangorestframework_simplejwt 设置.py 12345REST_FRAMEWORK = &#123; &#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;: [ &#x27;rest_framework_simplejwt.authentication.JWTAuthentication&#x27;, ],&#125; 网址.py 12345678from django.urls import pathfrom rest_framework_simplejwt import views as jwt_viewsurlpatterns = [ # Your URLs... path(&#x27;api/token/&#x27;, jwt_views.TokenObtainPairView.as_view(), name=&#x27;token_obtain_pair&#x27;), path(&#x27;api/token/refresh/&#x27;, jwt_views.TokenRefreshView.as_view(), name=&#x27;token_refresh&#x27;),] 示例代码对于本教程，我将使用以下路由和 API 视图： 视图.py 1234567891011from rest_framework.views import APIViewfrom rest_framework.response import Responsefrom rest_framework.permissions import IsAuthenticatedclass HelloView(APIView): permission_classes = (IsAuthenticated,) def get(self, request): content = &#123;&#x27;message&#x27;: &#x27;Hello, World!&#x27;&#125; return Response(content) 网址.py 123456from django.urls import pathfrom myapi.core import viewsurlpatterns = [ path(&#x27;hello/&#x27;, views.HelloView.as_view(), name=&#x27;hello&#x27;),] 用法我将使用HTTPie通过终端使用 API 端点。但您也可以使用 cURL（在许多操作系统中都很容易使用）在本地进行尝试。 或者，通过访问端点 URL 来使用 DRF Web 界面，如下所示： 获取令牌第一步是验证并获取令牌。端点是/api/token/，它只接受POST请求。 1http post http://127.0.0.1:8000/api/token/ username=vitor password=123 所以基本上你的响应主体是两个标记： 1234&#123; &quot;access&quot;: &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQ1MjI0MjU5LCJqdGkiOiIyYmQ1NjI3MmIzYjI0YjNmOGI1MjJlNThjMzdjMTdlMSIsInVzZXJfaWQiOjF9.D92tTuVi_YcNkJtiLGHtcn6tBcxLCBxz9FKD3qzhUg8&quot;, &quot;refresh&quot;: &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTU0NTMxMDM1OSwianRpIjoiMjk2ZDc1ZDA3Nzc2NDE0ZjkxYjhiOTY4MzI4NGRmOTUiLCJ1c2VyX2lkIjoxfQ.rA-mnGRg71NEW_ga0sJoaMODS5ABjE5HnxJDb0F8xAo&quot;&#125; 之后，您将在客户端存储访问令牌和刷新令牌，通常在localStorage中。 为了访问后端受保护的视图（即需要身份验证的 API 端点），您应该在所有请求的标头中包含访问令牌，如下所示： 1http http://127.0.0.1:8000/hello/ &quot;Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQ1MjI0MjAwLCJqdGkiOiJlMGQxZDY2MjE5ODc0ZTY3OWY0NjM0ZWU2NTQ2YTIwMCIsInVzZXJfaWQiOjF9.9eHat3CvRQYnb5EdcgYFzUyMobXzxlAVh_IAgqyvzCE&quot; 您可以在接下来的五分钟内使用此访问令牌。 五分钟后，令牌将过期，如果您再次尝试访问该视图，您将收到以下错误： 1http http://127.0.0.1:8000/hello/ &quot;Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQ1MjI0MjAwLCJqdGkiOiJlMGQxZDY2MjE5ODc0ZTY3OWY0NjM0ZWU2NTQ2YTIwMCIsInVzZXJfaWQiOjF9.9eHat3CvRQYnb5EdcgYFzUyMobXzxlAVh_IAgqyvzCE&quot; 刷新令牌要获取新的访问令牌/api/token/refresh/，您应该使用发布 刷新令牌的刷新令牌端点： 1http post http://127.0.0.1:8000/api/token/refresh/ refresh=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTU0NTMwODIyMiwianRpIjoiNzAyOGFlNjc0ZTdjNDZlMDlmMzUwYjg3MjU1NGUxODQiLCJ1c2VyX2lkIjoxfQ.Md8AO3dDrQBvWYWeZsd_A1J39z6b6HEwWIUZ7ilOiPE 返回的是一个新的访问令牌，您应该在后续请求中使用它。 刷新令牌在接下来的 24 小时内有效。当它最终也过期时，用户将需要使用他们的用户名和密码再次执行完全身份验证以获得一组新的访问令牌+刷新令牌。 刷新令牌有什么意义？乍一看，刷新令牌可能看起来毫无意义，但实际上有必要确保用户仍然拥有正确的权限。如果您的访问令牌的过期时间很长，则更新与令牌关联的信息可能需要更长的时间。这是因为身份验证检查是通过密码学手段完成的，而不是查询数据库和验证数据。所以一些信息有点缓存。 还有一个安全方面，从某种意义上说，刷新令牌仅在 POST 数据中传输。并且 访问令牌是通过 HTTP 标头发送的，该标头可能会在传输过程中被记录下来。因此，如果您的访问令牌被泄露，这也会提供一个较短的窗口。","categories":[{"name":"后端","slug":"后端","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/"},{"name":"Django","slug":"后端/Django","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/Django/"}],"tags":[{"name":"django","slug":"django","permalink":"http://example.com/tags/django/"},{"name":"rest_framework","slug":"rest-framework","permalink":"http://example.com/tags/rest-framework/"}]},{"title":"Markdown常用语法介绍","slug":"Markdown常用语法介绍","date":"2023-05-27T04:25:22.000Z","updated":"2023-05-27T04:40:39.776Z","comments":true,"path":"2023/05/27/Markdown常用语法介绍/","link":"","permalink":"http://example.com/2023/05/27/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"1、Markdown标题 —— 提升标题等级ctrl +1234567891011# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 2、Markdown字体 用1个星号*或底线_表示斜体 斜体：Ctrl+I 用2个星号*或底线_表示粗体 加粗：Ctrl+B 用3个星号*或底线_表示粗斜体1234567891011*斜体文字*_斜体文字_**粗体文字**__粗体文字__***粗斜体文字***___粗斜体文字___ 3、Markdown分割线123*********------ 4、Markdown删除线 —— 删除线：Alt+Shift+51~~tencent.com~~ 5、代码块 —— 代码：Ctrl+Shift+&#96;1`world` 6、Markdown下划线 —— 下划线：Ctrl+U1&lt;u&gt;带下划线文本&lt;/u&gt; 7、Markdown列表无序列表(三个都行） 1234567891011* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项 有序列表直接在文字有加上1. 2. 3. 来表示，符号和文字之间加上一个空格字符。 1231. 第一项2. 第二项3. 第三项 8、Markdown嵌套列表1234561. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 9、Markdown链接 —— 超链接：Ctrl+K12这是一个链接 [新浪新闻](https://news.sina.com.cn/)&lt;https://news.sina.com.cn/&gt; 10、Markdown图片 —— 图像：Ctrl+Shift+I12![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;) 11、Markdown表格 —— ctrl + T 插入表格123456789| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 || 表头 | 表头 || ---- | ---- || 单元格 | 单元格 || 单元格 | 单元格 | 12、Markdown高亮 —— ctrl + T 插入表格1==高亮==","categories":[{"name":"其他","slug":"其他","permalink":"http://example.com/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"}]},{"title":"如何进行技术面试（面试官视角）","slug":"如何进行技术面试（面试官视角）","date":"2023-02-28T03:49:29.000Z","updated":"2023-05-27T03:56:32.439Z","comments":true,"path":"2023/02/28/如何进行技术面试（面试官视角）/","link":"","permalink":"http://example.com/2023/02/28/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%EF%BC%88%E9%9D%A2%E8%AF%95%E5%AE%98%E8%A7%86%E8%A7%92%EF%BC%89/","excerpt":"","text":"说起来在我第一次做面试官之前，并没有人教过我应该怎么做，我则一直将面试视作通过一小时左右的沟通，对候选人形成一个整体的印象，最后给出一个主观的评价的过程。在这么多次的面试中，我也总结出了一些经验可以和大家分享。 验证简历真实性首先花一些时间聊一聊简历上提到的项目，请对方进一步介绍这个项目的业务、自己在其中承担的职责和遇到的问题。然后针对其中自己了解的部分提几个问题，如「据我所知这类项目的难点是某某方面，请问你是否有遇到、是如何解决的」，确认对方的项目经验是否真实、是否比较深度地参与了项目。 围绕简历提问尽量提问对方了解和擅长的话题，让对方有足够的表达机会，发挥出正常水平，考察候选人擅长的部分要比不擅长的部分更有价值。 开放性问题避免问有标准答案的问题，而是可以问「遇到某种情况时可能是什么原因、你会怎么做」或「请解释一下某个事物是如何工作的」这样开放性的问题，给对方足够的发挥空间、主动提到一些自己的知识和经验。 也许有些候选人不喜欢这样的问题，认为缺少安全感、不知道该说什么，但我觉得开放性问题才有足够的区分度，才能在短时间内对候选人形成立体的印象。我们可以在候选人实在不知道从何说起时，对问题再做进一步的解释和提示。 围绕话题由浅入深应该针对同一话题准备多个难度逐步增加的问题，让对方回答时思路能够相对流畅，更容易考察对方在这一话题上的深度；反过来应该避免大量零散、无联系、无难度区分的小问题。 没必要执着于答案有时在反复提示下对方的答案仍差那么一点，在面试时间大多比较紧张的情况下，我们没必要花更多的时间去让对方答出答案。在候选人表示无法准确回答问题时，也可以引导他做出一些合理的猜测（这时的重点在于猜测是否合理而不是是否正确）。只要候选人在这一问题上说足够多的话，我们就可以考察到其水平了，不一定要等他说出最后的答案。 自己不懂也没关系 在一开始，我会担心问出的问题我自己也不了解，对方回答之后会把自己问倒或者无法考察对方水平。但后来发现完全没有必要，因为面试官没有义务即时地对候选人的回答做出评价（告诉对方对还是错），即使对于不了解的话题，自己也可以从对方的自信程度、逻辑层面，对回答有一个大体的判断的。 现场编码可以很简单候选人在现场会非常紧张，面试时间也有限，在现场编码环节没必要出太难的题，重点在于考察候选人是否有最基本编程思维和编码能力。例如我觉得一些难度不高，但适合用递归解决的题目会比较合适，可以考虑在候选人编码的过程中一直保持沟通，注重过程而不是结果。 同时我反对为候选人在面试前或面试后布置编码的作业，这会让候选人付出不对等的时间去准备面试，也很容易从「考察候选人的能力」变成「考察候选人的诚意」。 重复使用一套题库没什么问题可以自己建立自己的面试题库，在一次次面试中对其进行反复地打磨，让问题更准确、考察更全面。有些话题可能是永远都不过时的，例如对于后端工程师可能是并发模型及与之相关的线程、内存等话题。 给对方提问的机会一般面试的最后一个步骤是让候选人提问，不要把这个过程敷衍掉，可以引导对方提问，告诉对方都可以问哪些问题。如可以补充一下没有提及的技术话题、可以问我司的技术架构或选型、可以问所面试的职位和如果入职之后所参与的项目、可以问日常工作环境和时间等。这样可以让对方有一个主动打开话题的机会，互相判断需求是否匹配，即使没有通过面试也让对方对公司有一个比较好的印象。 有任何顾虑都可以 pass 掉我们前面做了这么多都是为了让候选人有更好的面试体验、发挥出自己最好的水平。这种情况下如果仍对候选人某一方面的表现有顾虑的话，应该果断地拒绝掉，招进来一个不合适的人损失远比错过一个合适的人大。 沟通是否顺畅很重要沟通是后续开展一切工作的基础，如果觉得与候选人的沟通不顺畅，对方总是不能理解自己的意思，那么即使候选人的技术水平满足要求，也应该慎重考虑。 留下面试的记录我每次面试结束后都会尽快开始写对候选人的评价，大多在一两百字，先列出面试聊到的内容、觉得好和不好的地方、了解到的对方的技术栈，然后总结一下对候选人技术水平和沟通情况的评价。这样可以帮助自己整理思路，在候选人比较多的时候也不会记混，最后给出通过与否的评价，同时还能给下一轮的面试官提供参考。","categories":[{"name":"开发","slug":"开发","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"面试","slug":"面试","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"那些有趣的注释，有没有你曾用过的","slug":"那些有趣的注释，有没有你曾用过的","date":"2023-02-27T03:12:07.000Z","updated":"2023-05-27T04:03:22.941Z","comments":true,"path":"2023/02/27/那些有趣的注释，有没有你曾用过的/","link":"","permalink":"http://example.com/2023/02/27/%E9%82%A3%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E6%B3%A8%E9%87%8A%EF%BC%8C%E6%9C%89%E6%B2%A1%E6%9C%89%E4%BD%A0%E6%9B%BE%E7%94%A8%E8%BF%87%E7%9A%84/","excerpt":"","text":"闲来无事收集了一些有趣的注释，各式各样的都有，程序员真是一群有趣的人，喜欢哪一款拿走不谢 第一款：佛祖保佑，永无BUG 123456789101112131415161718192021// _ooOoo_ // o8888888o // 88&quot; . &quot;88 // (| -_- |) // O\\ = /O // ____/`---&#x27;\\____ // . &#x27; \\\\| |// `. // / \\\\||| : |||// \\ // / _||||| -:- |||||- \\ // | | \\\\\\ - /// | | // | \\_| &#x27;&#x27;\\---/&#x27;&#x27; | | // \\ .-\\__ `-` ___/-. / // ___`. .&#x27; /--.--\\ `. . __ // .&quot;&quot; &#x27;&lt; `.___\\_&lt;|&gt;_/___.&#x27; &gt;&#x27;&quot;&quot;. // | | : `- \\`.;`\\ _ /`;.`/ - ` : | | // \\ \\ `-. \\_ __\\ /__ _/ .-` / / // ======`-.____`-.___\\_____/___.-`____.-&#x27;====== // `=---=&#x27; // // ............................................. // 佛祖保佑 永无BUG 第二款：神兽护体，永无BUG 1234567891011121314151617// ┏┓ ┏┓// ┏┛┻━━━┛┻┓// ┃ ┃ // ┃ ━ ┃// ┃ ┳┛ ┗┳ ┃// ┃ ┃// ┃ ┻ ┃// ┃ ┃// ┗━┓ ┏━┛// ┃ ┃ Code is far away from bug with the animal protecting // ┃ ┃ 神兽保护，永无BUG！// ┃ ┗━━━┓// ┃ ┣┓// ┃ ┏┛// ┗┓┓┏━┳┓┏┛// ┃┫┫ ┃┫┫// ┗┻┛ ┗┻┛ 1234567891011121314151617181920212223/** * ┏┓ ┏┓+ + * ┏┛┻━━━┛┻┓ + + * ┃ ┃ * ┃ ━ ┃ ++ + + + * ████━████ ┃+ * ┃ ┃ + * ┃ ┻ ┃ * ┃ ┃ + + * ┗━┓ ┏━┛ * ┃ ┃ * ┃ ┃ + + + + * ┃ ┃ Code is far away from bug with the animal protecting * ┃ ┃ + 神兽保佑,永无bug * ┃ ┃ * ┃ ┃ + * ┃ ┗━━━┓ + + * ┃ ┣┓ * ┃ ┏┛ * ┗┓┓┏━┳┓┏┛ + + + + * ┃┫┫ ┃┫┫ * ┗┻┛ ┗┻┛+ + + + */ 第三款：来首程序员打油诗，笑 123456789101112/** * 江城子 . 程序员之歌 * * 十年生死两茫茫，写程序，到天亮。 * 千行代码，Bug何处藏。 * 纵使上线又怎样，朝令改，夕断肠。 * * 领导每天新想法，天天改，日日忙。 * 相顾无言，惟有泪千行。 * 每晚灯火阑珊处，夜难寐，加班狂。*/ 12345678910/** * 写字楼里写字间，写字间里程序员； * 程序人员写程序，又拿程序换酒钱。 * 酒醒只在网上坐，酒醉还来网下眠； * 酒醉酒醒日复日，网上网下年复年。 * 但愿老死电脑间，不愿鞠躬老板前； * 奔驰宝马贵者趣，公交自行程序员。 * 别人笑我忒疯癫，我笑自己命太贱； * 不见满街漂亮妹，哪个归得程序员？ */ 第四款：单身狗专用 123456789101112131415161718192021222324252627282930313233343536&lt;!-- :: :;J7, :, ::;7: ,ivYi, , ;LLLFS: :iv7Yi :7ri;j5PL ,:ivYLvr ,ivrrirrY2X, :;r@Wwz.7r: :ivu@kexianli. :iL7::,:::iiirii:ii;::::,,irvF7rvvLujL7ur ri::,:,::i:iiiiiii:i:irrv177JX7rYXqZEkvv17 ;i:, , ::::iirrririi:i:::iiir2XXvii;L8OGJr71i :,, ,,: ,::ir@mingyi.irii:i:::j1jri7ZBOS7ivv, ,::, ::rv77iiiriii:iii:i::,rvLq@huhao.Li ,, ,, ,:ir7ir::,:::i;ir:::i:i::rSGGYri712: ::: ,v7r:: ::rrv77:, ,, ,:i7rrii:::::, ir7ri7Lri , 2OBBOi,iiir;r:: ,irriiii::,, ,iv7Luur: ,, i78MBBi,:,:::,:, :7FSL: ,iriii:::i::,,:rLqXv:: : iuMMP: :,:::,:ii;2GY7OBB0viiii:i:iii:i:::iJqL;:: , ::::i ,,,,, ::LuBBu BBBBBErii:i:i:i:i:i:i:r77ii , : , ,,:::rruBZ1MBBqi, :,,,:::,::::::iiriri: , ,,,,::::i: @arqiao. ,:,, ,:::ii;i7: :, rjujLYLi ,,:::::,:::::::::,, ,:i,:,,,,,::i:iii :: BBBBBBBBB0, ,,::: , ,:::::: , ,,,, ,,::::::: i, , ,8BMMBBBBBBi ,,:,, ,,, , , , , , :,::ii::i:: : iZMOMOMBBM2::::::::::,,,, ,,,,,,:,,,::::i:irr:i:::, i ,,:;u0MBMOG1L:::i:::::: ,,,::, ,,, ::::::i:i:iirii:i:i: : ,iuUuuXUkFu7i:iii:i:::, :,:,: ::::::::i:i:::::iirr7iiri:: : :rk@Yizero.i:::::, ,:ii:::::::i:::::i::,::::iirrriiiri::, : 5BMBBBBBBSr:,::rv2kuii:::iii::,:i:,, , ,,:,:i@petermu., , :r50EZ8MBBBBGOBBBZP7::::i::,:::::,: :,:,::i;rrririiii:: :jujYY7LS0ujJL7r::,::i::,::::::::::::::iirirrrrrrr:ii: ,: :@kevensun.:,:,,,::::i:i:::::,,::::::iir;ii;7v77;ii;i, ,,, ,,:,::::::i:iiiii:i::::,, ::::iiiir@xingjief.r;7:i, , , ,,,:,,::::::::iiiiiiiiii:,:,:::::::::iiir;ri7vL77rrirri:: :,, , ::::::::i:::i:::i:i::,,,,,:,::i:i:::iir;@Secbone.ii:::--&gt; 第五款：骷髅头 12345678910111213141516171819202122232425/** ************************************************************** * * * .=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-. * * | ______ | * * | .-&quot; &quot;-. | * * | / \\ | * * | _ | | _ | * * | ( \\ |, .-. .-. ,| / ) | * * | &gt; &quot;=._ | )(__/ \\__)( | _.=&quot; &lt; | * * | (_/&quot;=._&quot;=._ |/ /\\ \\| _.=&quot;_.=&quot;\\_) | * * | &quot;=._&quot;(_ ^^ _)&quot;_.=&quot; | * * | &quot;=\\__|IIIIII|__/=&quot; | * * | _.=&quot;| \\IIIIII/ |&quot;=._ | * * | _ _.=&quot;_.=&quot;\\ /&quot;=._&quot;=._ _ | * * | ( \\_.=&quot;_.=&quot; `--------` &quot;=._&quot;=._/ ) | * * | &gt; _.=&quot; &quot;=._ &lt; | * * | (_/ \\_) | * * | | * * &#x27;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=&#x27; * * * * LASCIATE OGNI SPERANZA, VOI CH&#x27;ENTRATE * ************************************************************** */ 第六款：标准键盘 12345678910111213141516/** * ┌───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐ * │Esc│ │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│ ┌┐ ┌┐ ┌┐ * └───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘ └┘ └┘ └┘ * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐ * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │ * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤ * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \\ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │ │ * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │ * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &#x27;│ Enter │ │ 4 │ 5 │ 6 │ │ * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤ ┌───┐ ├───┼───┼───┼───┤ * │ Shift │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│ Shift │ │ ↑ │ │ 1 │ 2 │ 3 │ │ * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││ * │ Ctrl│ │Alt │ Space │ Alt│ │ │Ctrl│ │ ← │ ↓ │ → │ │ 0 │ . │←─┘│ * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘ */ 第七款：顶 123456789101112131415/** * 頂頂頂頂頂頂頂頂頂 頂頂頂頂頂頂頂頂頂 * 頂頂頂頂頂頂頂 頂頂 * 頂頂 頂頂頂頂頂頂頂頂頂頂頂 * 頂頂 頂頂頂頂頂頂頂頂頂頂頂 * 頂頂 頂頂 頂頂 * 頂頂 頂頂 頂頂頂 頂頂 * 頂頂 頂頂 頂頂頂 頂頂 * 頂頂 頂頂 頂頂頂 頂頂 * 頂頂 頂頂 頂頂頂 頂頂 * 頂頂 頂頂頂 * 頂頂 頂頂 頂頂 頂頂 * 頂頂頂頂 頂頂頂頂頂 頂頂頂頂頂 * 頂頂頂頂 頂頂頂頂 頂頂頂頂 */ 还有一些其他有趣搞怪的注释 12345678910111213141516171819202122/** * _ooOoo_ * o8888888o * 88&quot; . &quot;88 * (| -_- |) * O\\ = /O * ___/`---&#x27;\\____ * . &#x27; \\\\| |// `. * / \\\\||| : |||// \\ * / _||||| -:- |||||- \\ * | | \\\\\\ - /// | | * | \\_| &#x27;&#x27;\\---/&#x27;&#x27; | | * \\ .-\\__ `-` ___/-. / * ___`. .&#x27; /--.--\\ `. . __ * .&quot;&quot; &#x27;&lt; `.___\\_&lt;|&gt;_/___.&#x27; &gt;&#x27;&quot;&quot;. * | | : `- \\`.;`\\ _ /`;.`/ - ` : | | * \\ \\ `-. \\_ __\\ /__ _/ .-` / / * ======`-.____`-.___\\_____/___.-`____.-&#x27;====== * `=---=&#x27; * ............................................. * 佛曰：bug泛滥，我已瘫痪！ */ 123456789101112131415161718192021222324252627282930313233/** * ,s555SB@@&amp; * :9H####@@@@@Xi * 1@@@@@@@@@@@@@@8 * ,8@@@@@@@@@B@@@@@@8 * :B@@@@X3hi8Bs;B@@@@@Ah, * ,8i r@@@B: 1S ,M@@@@@@#8; * 1AB35.i: X@@8 . SGhr ,A@@@@@@@@S * 1@h31MX8 18Hhh3i .i3r ,A@@@@@@@@@5 * ;@&amp;i,58r5 rGSS: :B@@@@@@@@@@A * 1#i . 9i hX. .: .5@@@@@@@@@@@1 * sG1, ,G53s. 9#Xi;hS5 3B@@@@@@@B1 * .h8h.,A@@@MXSs, #@H1: 3ssSSX@1 * s ,@@@@@@@@@@@@Xhi, r#@@X1s9M8 .GA981 * ,. rS8H#@@@@@@@@@@#HG51;. .h31i;9@r .8@@@@BS;i; * .19AXXXAB@@@@@@@@@@@@@@#MHXG893hrX#XGGXM@@@@@@@@@@MS * s@@MM@@@hsX#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;, * :GB@#3G@@Brs ,1GM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B, * .hM@@@#@@#MX 51 r;iSGAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8 * :3B@@@@@@@@@@@&amp;9@h :Gs .;sSXH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@: * s&amp;HA#@@@@@@@@@@@@@@M89A;.8S. ,r3@@@@@@@@@@@@@@@@@@@@@@@@@@@r * ,13B@@@@@@@@@@@@@@@@@@@5 5B3 ;. ;@@@@@@@@@@@@@@@@@@@@@@@@@@@i * 5#@@#&amp;@@@@@@@@@@@@@@@@@@9 .39: ;@@@@@@@@@@@@@@@@@@@@@@@@@@@; * 9@@@X:MM@@@@@@@@@@@@@@@#; ;31. H@@@@@@@@@@@@@@@@@@@@@@@@@@: * SH#@B9.rM@@@@@@@@@@@@@B :. 3@@@@@@@@@@@@@@@@@@@@@@@@@@5 * ,:. 9@@@@@@@@@@@#HB5 .M@@@@@@@@@@@@@@@@@@@@@@@@@B * ,ssirhSM@&amp;1;i19911i,. s@@@@@@@@@@@@@@@@@@@@@@@@@@S * ,,,rHAri1h1rh&amp;@#353Sh: 8@@@@@@@@@@@@@@@@@@@@@@@@@#: * .A3hH@#5S553&amp;@@#h i:i9S #@@@@@@@@@@@@@@@@@@@@@@@@@A. * * * */ 上面这些都不能满足你，想要找更多的ascii图在这里http://www.asciiworld.com/","categories":[{"name":"后端","slug":"后端","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"程序员","slug":"程序员","permalink":"http://example.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"}]}],"categories":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/categories/Linux/"},{"name":"Docker","slug":"Linux/Docker","permalink":"http://example.com/categories/Linux/Docker/"},{"name":"后端","slug":"后端","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/"},{"name":"Django","slug":"后端/Django","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/Django/"},{"name":"其他","slug":"其他","permalink":"http://example.com/categories/%E5%85%B6%E4%BB%96/"},{"name":"开发","slug":"开发","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Jmeter","slug":"Jmeter","permalink":"http://example.com/tags/Jmeter/"},{"name":"性能测试","slug":"性能测试","permalink":"http://example.com/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"},{"name":"jenkins","slug":"jenkins","permalink":"http://example.com/tags/jenkins/"},{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"},{"name":"django","slug":"django","permalink":"http://example.com/tags/django/"},{"name":"rest_framework","slug":"rest-framework","permalink":"http://example.com/tags/rest-framework/"},{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"},{"name":"面试","slug":"面试","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95/"},{"name":"程序员","slug":"程序员","permalink":"http://example.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"}]}