<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos安装docker教程</title>
    <url>/2023/05/31/Centos%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="一、安装前必读"><a href="#一、安装前必读" class="headerlink" title="一、安装前必读"></a>一、安装前必读</h4><p>在安装 Docker 之前，先说一下配置，我这里是Centos7<br>Linux 内核：官方建议 3.10 以上，3.8以上貌似也可。</p>
<span id="more"></span>

<p>1.查看当前的内核版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>

<p>2.使用 root 权限更新 yum 包（生产环境中此步操作需慎重，看自己情况，学习的话随便搞）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure>

<p>这个命令不是必须执行的，看个人情况，后面出现不兼容的情况的话就必须update了</p>
<p>注意</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y update：升级所有包同时也升级软件和系统内核；</span><br><span class="line">yum -y upgrade：只升级所有包，不升级软件和系统内核</span><br></pre></td></tr></table></figure>

<p>3.卸载旧版本（如果之前安装过的话）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>
<h4 id="二、安装Docker的详细步骤"><a href="#二、安装Docker的详细步骤" class="headerlink" title="二、安装Docker的详细步骤"></a>二、安装Docker的详细步骤</h4><p>1.安装需要的软件包， yum-util 提供yum-config-manager功能，另两个是devicemapper驱动依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<p>2.设置 yum 源</p>
<p>设置一个yum源，下面两个都可用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo（中央仓库）</span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo（阿里仓库）</span><br></pre></td></tr></table></figure>

<p>3.选择docker版本并安装<br>（1）查看可用版本有哪些</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>

<p>（2）选择一个版本并安装：yum install docker-ce-版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce-18.06.0.ce-3.el7</span><br></pre></td></tr></table></figure>

<p>4.启动 Docker 并设置开机自启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装jenkins教程</title>
    <url>/2023/06/01/Docker%E5%AE%89%E8%A3%85jenkins%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="一、jenkins安装"><a href="#一、jenkins安装" class="headerlink" title="一、jenkins安装"></a>一、jenkins安装</h4><p>1.查找，下载jenkins镜像文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search jenkins</span><br></pre></td></tr></table></figure>
<p>下载Jenkins镜像文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>2.创建Jenkins挂载目录并授权权限，这样我们就可以很方便地对容器内的配置文件进行修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/jenkins_home/</span><br><span class="line"></span><br><span class="line">chmod 777 /data/jenkins_home/</span><br></pre></td></tr></table></figure>

<p>3.创建并启动Jenkins容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name jenkins \</span><br><span class="line">  -p 8080:8080 -p 50000:50000 \</span><br><span class="line">  -v /root/Yoga/data/jenkins_home:/var/jenkins_home \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  jenkins/jenkins:lts</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>-d 后台运行镜像</li>
<li>-p 8080:8080 -p 50000:50000 表示将容器内部的 8080 和 50000 端口映射到主机的 8080 和 50000 端口</li>
<li>-v &#x2F;root&#x2F;Yoga&#x2F;data&#x2F;jenkins_home:&#x2F;var&#x2F;jenkins_home &#x2F;var&#x2F;jenkins_home目录为容器jenkins工作目录，我们将硬盘上的一个目录挂载到这个位置，方便后续更新镜像后继续使用原来的工作目录。这里我们设置的就是上面我们创建的 &#x2F;data&#x2F;jenkins_home目录</li>
<li>-e TZ&#x3D;Asia&#x2F;Shanghai 表示设置时区为亚洲上海时区。</li>
<li>–name myjenkins 给容器起一个别名</li>
</ul>
<p>4.查看jenkins是否启动成功，如下图出现端口号，就为启动成功了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -l</span><br></pre></td></tr></table></figure>

<p>5.查看docker容器日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs jenkins</span><br></pre></td></tr></table></figure>

<p>6.配置镜像加速，进入 cd &#x2F;data&#x2F;jenkins_home 目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改hudson.model.UpdateCenter.xml里的内容</span><br><span class="line"></span><br><span class="line">将 url 修改为清华大学官方镜像：https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br></pre></td></tr></table></figure>

<p>7.访问Jenkins页面，输入你的ip加上8090</p>
<p>8.管理员密码获取方法，编辑initialAdminPassword文件查看，把密码输入登录中的密码即可，开始使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /root/Yoga/data/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Httprunner源码解读(2)models.py</title>
    <url>/2023/06/11/Httprunner%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-2-models-py/</url>
    <content><![CDATA[<h3 id="models-py的代码结构"><a href="#models-py的代码结构" class="headerlink" title="models.py的代码结构"></a>models.py的代码结构</h3><p><img src="/../images/models.png" alt="img.png"><br><strong>这个模块中定义了12个属性和29个模型类</strong><br><strong>文件主要包含了一系列用于描述测试配置、请求和响应的数据模型类。这些数据模型通常继承自 Pydantic’s BaseModel 类，它们用于实现类型检查、数据验证以及序列化和反序列化等功能。</strong></p>
<span id="more"></span>

<p><strong><code>models.py</code> 中的数据模型提供了以下几个方面的功能：</strong></p>
<ul>
<li>定义测试用例的数据结构：通过创建数据模型来表示测试用例的各个组成部分，如配置、请求、响应和变量等。</li>
<li>类型检查和数据验证：利用 <code>Pydantic</code> 提供的类型检查和验证机制，确保从 YAML&#x2F;JSON 测试用例文件中加载的数据符合预期格式和约束。</li>
<li>序列化与反序列化：<code>Pydantic</code> 数据模型可以轻松地将 Python 对象转换为 JSON 格式，或者将 JSON 数据反序列化为 Python 对象。</li>
<li>总的来说，models.py 文件对 HttpRunner 的整个测试流程提供了结构支持，确保了测试用例以一种结构化、可靠且易于解析的方式进行编写和执行。通过使用这些数据模型，HttpRunner 可以更容易地处理、验证和操作来自测试用例文件的数据。</li>
</ul>
<p><strong><code>BaseModel</code> 是一个pydantic的基础类，用于数据验证和序列化。它的作用主要包括：</strong></p>
<ul>
<li>类型检查：确保输入数据符合预期类型。</li>
<li>数据验证：根据模型中定义的限制条件对输入数据进行验证。</li>
<li>默认值设置：自动为缺失字段提供默认值。</li>
<li>序列化与反序列化：将 Python 对象转换为 JSON 格式，以及从 JSON 转换回 Python 对象。</li>
<li>通过继承 <code>BaseModel</code> 并定义字段，用户可以轻松构建自己的数据模型。这有助于减少代码错误、提高数据质量和简化数据处理流程。</li>
</ul>
<h3 id="属性源码分析"><a href="#属性源码分析" class="headerlink" title="属性源码分析"></a>属性源码分析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">from enum import Enum</span><br><span class="line">from typing import Any, Callable, Dict, List, Text, Union</span><br><span class="line"></span><br><span class="line">from pydantic import BaseModel, Field, HttpUrl</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Text =&gt; str / 文本</span><br><span class="line">List =&gt; list / 列表</span><br><span class="line">Dict =&gt; dict / 字典</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">Name = Text</span><br><span class="line">Url = Text</span><br><span class="line">BaseUrl = Union[HttpUrl, Text]</span><br><span class="line">VariablesMapping = Dict[Text, Any]</span><br><span class="line">FunctionsMapping = Dict[Text, Callable]</span><br><span class="line">Headers = Dict[Text, Text]</span><br><span class="line">Cookies = Dict[Text, Text]</span><br><span class="line">Verify = bool</span><br><span class="line">Hooks = List[Union[Text, Dict[Text, Text]]]</span><br><span class="line">Export = List[Text]</span><br><span class="line">Validators = List[Dict]</span><br><span class="line">Env = Dict[Text, Any]</span><br></pre></td></tr></table></figure>
<p><strong>用到了typing和pydantic模块，定义了这些属性的类型</strong></p>
<h3 id="模型类源码分析"><a href="#模型类源码分析" class="headerlink" title="模型类源码分析"></a>模型类源码分析</h3><h4 id="MethodEnum"><a href="#MethodEnum" class="headerlink" title="MethodEnum"></a>MethodEnum</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MethodEnum(Text, Enum):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类，常用请求的方式</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    GET = &quot;GET&quot;</span><br><span class="line">    POST = &quot;POST&quot;</span><br><span class="line">    PUT = &quot;PUT&quot;</span><br><span class="line">    DELETE = &quot;DELETE&quot;</span><br><span class="line">    HEAD = &quot;HEAD&quot;</span><br><span class="line">    OPTIONS = &quot;OPTIONS&quot;</span><br><span class="line">    PATCH = &quot;PATCH&quot;</span><br></pre></td></tr></table></figure>

<h4 id="ProtoType"><a href="#ProtoType" class="headerlink" title="ProtoType"></a>ProtoType</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ProtoType(Enum):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类，请求数据类型</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Binary = 1</span><br><span class="line">    CyBinary = 2</span><br><span class="line">    Compact = 3</span><br><span class="line">    Json = 4</span><br></pre></td></tr></table></figure>

<h4 id="TransType"><a href="#TransType" class="headerlink" title="TransType"></a>TransType</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ProtoType(Enum):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类，请求数据类型</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Binary = 1</span><br><span class="line">    CyBinary = 2</span><br><span class="line">    Compact = 3</span><br><span class="line">    Json = 4</span><br></pre></td></tr></table></figure>

<h4 id="TransType-1"><a href="#TransType-1" class="headerlink" title="TransType"></a>TransType</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TransType(Enum):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类，它定义了 thrift 协议中数据传输类型</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Buffered = 1</span><br><span class="line">    CyBuffered = 2</span><br><span class="line">    Framed = 3</span><br><span class="line">    CyFramed = 4</span><br></pre></td></tr></table></figure>

<h4 id="TConfigThrift"><a href="#TConfigThrift" class="headerlink" title="TConfigThrift"></a>TConfigThrift</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TConfigThrift(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类, 定义TConfigThrift 的数据模型</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    psm: Text = None</span><br><span class="line">    env: Text = None</span><br><span class="line">    cluster: Text = None</span><br><span class="line">    target: Text = None</span><br><span class="line">    include_dirs: List[Text] = None</span><br><span class="line">    thrift_client: Any = None</span><br><span class="line">    timeout: int = 10</span><br><span class="line">    idl_path: Text = None</span><br><span class="line">    method: Text = None</span><br><span class="line">    ip: Text = &quot;127.0.0.1&quot;</span><br><span class="line">    port: int = 9000</span><br><span class="line">    service_name: Text = None</span><br><span class="line">    proto_type: ProtoType = ProtoType.Binary</span><br><span class="line">    trans_type: TransType = TransType.Buffered</span><br></pre></td></tr></table></figure>

<h4 id="TConfigDB"><a href="#TConfigDB" class="headerlink" title="TConfigDB"></a>TConfigDB</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TConfigDB(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类, 定义用于存储与数据库相关的配置信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    psm: Text = None</span><br><span class="line">    user: Text = None</span><br><span class="line">    password: Text = None</span><br><span class="line">    ip: Text = None</span><br><span class="line">    port: int = 3306</span><br><span class="line">    database: Text = None</span><br></pre></td></tr></table></figure>

<h4 id="TransportEnum"><a href="#TransportEnum" class="headerlink" title="TransportEnum"></a>TransportEnum</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TransportEnum(Text, Enum):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类,继承自 Text 和 Enum。它定义了两个枚举值：BUFFERED 和 FRAMED，分别表示缓冲传输和帧传输。枚举值的类型是 Text，</span><br><span class="line">    因此它们可以是任何字符串。枚举类的作用是为 HttpRunner 提供传输类型的选择</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    BUFFERED = &quot;buffered&quot;</span><br><span class="line">    FRAMED = &quot;framed&quot;</span><br></pre></td></tr></table></figure>

<h4 id="TThriftRequest"><a href="#TThriftRequest" class="headerlink" title="TThriftRequest"></a>TThriftRequest</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TThriftRequest(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    rpc request model</span><br><span class="line">    内置枚举类，它继承自 BaseModel。它定义了一些属性，用于表示 Thrift 请求的相关信息，包括方法名、参数、Thrift 客户端、IDL 文件路径、</span><br><span class="line">    超时时间、传输类型、目标地址、环境、集群、PSM、服务名、IP、端口、协议类型和传输类型等。这些属性都有默认值，可以通过实例化对象来设置它们的值</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    method: Text = &quot;&quot;</span><br><span class="line">    params: Dict = &#123;&#125;</span><br><span class="line">    thrift_client: Any = None</span><br><span class="line">    idl_path: Text = &quot;&quot;  # idl local path</span><br><span class="line">    timeout: int = 10  # sec</span><br><span class="line">    transport: TransportEnum = TransportEnum.BUFFERED</span><br><span class="line">    include_dirs: List[Union[Text, None]] = []  # param of thriftpy2.load</span><br><span class="line">    target: Text = &quot;&quot;  # tcp://&#123;ip&#125;:&#123;port&#125; or sd://psm?cluster=xx&amp;env=xx</span><br><span class="line">    env: Text = &quot;prod&quot;</span><br><span class="line">    cluster: Text = &quot;default&quot;</span><br><span class="line">    psm: Text = &quot;&quot;</span><br><span class="line">    service_name: Text = None</span><br><span class="line">    ip: Text = None</span><br><span class="line">    port: int = None</span><br><span class="line">    proto_type: ProtoType = None</span><br><span class="line">    trans_type: TransType = None</span><br></pre></td></tr></table></figure>

<h4 id="SqlMethodEnum"><a href="#SqlMethodEnum" class="headerlink" title="SqlMethodEnum"></a>SqlMethodEnum</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class SqlMethodEnum(Text, Enum):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类，它继承自 Text 和 Enum。它定义了一些枚举值，用于表示 SQL 操作的类型，包括 FETCHONE、FETCHMANY、FETCHALL、INSERT、UPDATE 和 DELETE。</span><br><span class="line">    这些枚举值可以通过实例化对象来访问，以执行相应的 SQL 操作</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    FETCHONE = &quot;FETCHONE&quot;</span><br><span class="line">    FETCHMANY = &quot;FETCHMANY&quot;</span><br><span class="line">    FETCHALL = &quot;FETCHALL&quot;</span><br><span class="line">    INSERT = &quot;INSERT&quot;</span><br><span class="line">    UPDATE = &quot;UPDATE&quot;</span><br><span class="line">    DELETE = &quot;DELETE&quot;</span><br></pre></td></tr></table></figure>

<h4 id="TSqlRequest"><a href="#TSqlRequest" class="headerlink" title="TSqlRequest"></a>TSqlRequest</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TSqlRequest(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    sql request model</span><br><span class="line">    内置枚举类, 它继承自 BaseModel。它定义了一些属性，用于表示 SQL 请求的相关信息，包括数据库配置、SQL 操作类型、SQL 语句和结果集大小等。其中，db_config 属性表示数据库配置信息，</span><br><span class="line">    它是一个 TConfigDB 类型的对象，包括 PSM、用户名、密码、IP、端口和数据库名等。method 属性表示 SQL 操作类型，它是一个 SqlMethodEnum 类型的枚举值，包括 FETCHONE、FETCHMANY、FETCHALL、</span><br><span class="line">    INSERT、UPDATE 和 DELETE。sql 属性表示 SQL 语句，size 属性表示结果集大小，用于限制 SQL 查询结果的数量。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    db_config: TConfigDB = TConfigDB()</span><br><span class="line">    method: SqlMethodEnum = None</span><br><span class="line">    sql: Text = None</span><br><span class="line">    size: int = 0  # limit nums of sql result</span><br></pre></td></tr></table></figure>

<h4 id="TConfig"><a href="#TConfig" class="headerlink" title="TConfig"></a>TConfig</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TConfig(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类</span><br><span class="line">    它定义了一些属性，用于表示 HttpRunner 的配置信息，包括名称、验证、基础 URL、变量、参数、导出变量、路径、Thrift 配置和数据库配置等。</span><br><span class="line">    其中，name 属性表示配置对象的名称，</span><br><span class="line">    verify 属性表示是否验证 SSL 证书，</span><br><span class="line">    base_url 属性表示基础 URL，</span><br><span class="line">    variables 属性表示变量，可以是一个字典或者是一个字符串，字符串表示变量的 Python 代码，</span><br><span class="line">    parameters 属性表示参数，可以是一个字典或者是一个字符串，字符串表示参数的 Python 代码，export 属性表示导出变量的名称列表，</span><br><span class="line">    path 属性表示配置文件的路径，</span><br><span class="line">    thrift 属性表示 Thrift 配置信息，是一个 TConfigThrift 类型的对象，</span><br><span class="line">    db 属性表示数据库配置信息，是一个 TConfigDB 类型的对象。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    name: Name</span><br><span class="line">    verify: Verify = False</span><br><span class="line">    base_url: BaseUrl = &quot;&quot;</span><br><span class="line">    # Text: prepare variables in debugtalk.py, $&#123;gen_variables()&#125;</span><br><span class="line">    variables: Union[VariablesMapping, Text] = &#123;&#125;</span><br><span class="line">    parameters: Union[VariablesMapping, Text] = &#123;&#125;</span><br><span class="line">    # setup_hooks: Hooks = []</span><br><span class="line">    # teardown_hooks: Hooks = []</span><br><span class="line">    export: Export = []</span><br><span class="line">    path: Text = None</span><br><span class="line">    # configs for other protocols</span><br><span class="line">    thrift: TConfigThrift = None</span><br><span class="line">    db: TConfigDB = TConfigDB()</span><br></pre></td></tr></table></figure>

<h4 id="TRequest"><a href="#TRequest" class="headerlink" title="TRequest"></a>TRequest</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TRequest(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    requests.Request model</span><br><span class="line">    内置枚举类</span><br><span class="line">    它继承自 BaseModel。它定义了一些属性，用于表示 HTTP 请求的相关信息，包括请求方法、URL、查询参数、请求头、请求体、数据、超时时间、重定向、SSL 验证和上传文件等。</span><br><span class="line">    method 属性表示请求方法，它是一个 MethodEnum 类型的枚举值，包括 GET、POST、PUT、DELETE、HEAD、OPTIONS、PATCH 和 TRACE。</span><br><span class="line">    url 属性表示请求的 URL，</span><br><span class="line">    params 属性表示查询参数，headers 属性表示请求头，</span><br><span class="line">    req_json 属性表示请求体，可以是一个字典、列表或者字符串，字符串表示请求体的 JSON 格式的字符串，</span><br><span class="line">    data 属性表示请求数据，可以是一个字典或者字符串，字符串表示请求数据的 Python 代码，</span><br><span class="line">    cookies 属性表示请求的 cookies，</span><br><span class="line">    timeout 属性表示超时时间，</span><br><span class="line">    allow_redirects 属性表示是否允许重定向，</span><br><span class="line">    verify 属性表示是否验证 SSL 证书，</span><br><span class="line">    upload 属性表示上传文件的信息，是一个字典，包括文件名、文件路径和文件类型等。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    method: MethodEnum</span><br><span class="line">    url: Url</span><br><span class="line">    params: Dict[Text, Text] = &#123;&#125;</span><br><span class="line">    headers: Headers = &#123;&#125;</span><br><span class="line">    req_json: Union[Dict, List, Text] = Field(None, alias=&quot;json&quot;)</span><br><span class="line">    data: Union[Text, Dict[Text, Any]] = None</span><br><span class="line">    cookies: Cookies = &#123;&#125;</span><br><span class="line">    timeout: float = 120</span><br><span class="line">    allow_redirects: bool = True</span><br><span class="line">    verify: Verify = False</span><br><span class="line">    upload: Dict = &#123;&#125;  # used for upload files</span><br></pre></td></tr></table></figure>

<h4 id="TStep"><a href="#TStep" class="headerlink" title="TStep"></a>TStep</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TStep(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    测试步骤，里面包含了request请求</span><br><span class="line">    它继承自 BaseModel。它定义了一些属性，用于表示测试步骤的相关信息，包括名称、请求、测试用例、变量、setup 和 teardown 钩子、提取变量、导出变量、验证器、验证脚本、重试次数、重试间隔、Thrift 请求和 SQL 请求等。</span><br><span class="line">    其中，name 属性表示测试步骤的名称，</span><br><span class="line">    request 属性表示 HTTP 请求的相关信息，是一个 TRequest 类型的对象，</span><br><span class="line">    testcase 属性表示测试用例，可以是一个字符串或者是一个函数，字符串表示测试用例的 Python 代码，函数表示测试用例的函数对象，</span><br><span class="line">    variables 属性表示变量，是一个字典，setup_hooks 属性表示 setup 钩子，是一个列表，列表中的元素可以是字符串或者是函数，字符串表示 setup 钩子的 Python 代码，函数表示 setup 钩子的函数对象，t</span><br><span class="line">    eardown_hooks 属性表示 teardown 钩子，是一个列表，列表中的元素可以是字符串或者是函数，字符串表示 teardown 钩子的 Python 代码，函数表示 teardown 钩子的函数对象，</span><br><span class="line">    extract 属性表示提取变量，是一个字典，export 属性表示导出变量，是一个列表，列表中的元素是字符串，表示要导出的变量名，</span><br><span class="line">    validators 属性表示验证器，是一个列表，列表中的元素是一个字典，表示验证器的相关信息，validate_script 属性表示验证脚本，是一个列表，列表中的元素是字符串，表示验证脚本的 Python 代码，</span><br><span class="line">    retry_times 属性表示重试次数，</span><br><span class="line">    retry_interval 属性表示重试间隔，</span><br><span class="line">    thrift_request 属性表示 Thrift 请求的相关信息，是一个 TThriftRequest 类型的对象，</span><br><span class="line">    sql_request 属性表示 SQL 请求的相关信息，是一个 TSqlRequest 类型的对象。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    name: Name</span><br><span class="line">    request: Union[TRequest, None] = None</span><br><span class="line">    testcase: Union[Text, Callable, None] = None</span><br><span class="line">    variables: VariablesMapping = &#123;&#125;</span><br><span class="line">    setup_hooks: Hooks = []</span><br><span class="line">    teardown_hooks: Hooks = []</span><br><span class="line">    # used to extract request&#x27;s response field</span><br><span class="line">    extract: VariablesMapping = &#123;&#125;</span><br><span class="line">    # used to export session variables from referenced testcase</span><br><span class="line">    export: Export = []</span><br><span class="line">    validators: Validators = Field([], alias=&quot;validate&quot;)</span><br><span class="line">    validate_script: List[Text] = []</span><br><span class="line">    retry_times: int = 0</span><br><span class="line">    retry_interval: int = 0  # sec</span><br><span class="line">    thrift_request: Union[TThriftRequest, None] = None</span><br><span class="line">    sql_request: Union[TSqlRequest, None] = None</span><br></pre></td></tr></table></figure>
<p><strong>这个类的作用是定义测试步骤的相关信息，方便用户进行接口测试。用户可以通过实例化对象来设置这些属性的值，然后将对象传递给 HttpRunner 类的相应方法，<br>以执行相应的接口测试。在执行接口测试之前，用户需要先创建一个 HttpRunner 对象，并将配置信息传递给它。然后，用户可以通过调用 HttpRunner 对象的相应方法，<br>传递 TStep 对象作为参数，来执行相应的接口测试。在执行测试步骤之前，用户需要先创建一个 TRequest 对象，并将 HTTP 请求的相关信息传递给它。<br>然后，用户可以通过设置 TStep 对象的 request 属性，将 TRequest 对象作为参数传递给它，来定义测试步骤的 HTTP 请求。如果用户需要在测试步骤中执行测试用例，<br>可以将测试用例的 Python 代码或者函数对象作为参数传递给 TStep 对象的 testcase 属性。如果用户需要在测试步骤中执行 setup 或 teardown 钩子，可以将钩子的<br>Python 代码或者函数对象作为参数传递给 TStep 对象的 setup_hooks 或 teardown_hooks 属性。如果用户需要在测试步骤中提取变量，可以将变量名和提取规则作为参数传递给<br>TStep 对象的 extract 属性。如果用户需要在测试步骤中导出变量，可以将变量名作为参数传递给 TStep 对象的 export 属性。如果用户需要在测试步骤中执行验证器，可以将验证器<br>的相关信息作为参数传递给 TStep 对象的 validators 属性。如果用户需要在测试步骤中执行验证脚本，可以将验证脚本的 Python 代码作为参数传递给 TStep 对象的 validate_script 属性。<br>如果用户需要在测试步骤中执行重试操作，可以将重试次数和重试间隔作为参数传递给 TStep 对象的 retry_times 和 retry_interval 属性。如果用户需要在测试步骤中执行 Thrift 请求，<br>可以将 Thrift 请求的相关信息作为参数传递给 TStep 对象的 thrift_request 属性。如果用户需要在测试步骤中执行 SQL 请求，可以将 SQL 请求的相关信息作为参数传递给 TStep 对象的 sql_request 属性。</strong></p>
<h4 id="TestCase"><a href="#TestCase" class="headerlink" title="TestCase"></a>TestCase</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TestCase(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    测试用例，包含了测试步骤和配置信息</span><br><span class="line">    它定义了一些属性，用于表示测试用例的相关信息，包括配置信息和测试步骤等。</span><br><span class="line">    config 属性表示配置信息，是一个 TConfig 类型的对象，</span><br><span class="line">    teststeps 属性表示测试步骤，是一个 TStep 类型的对象的列表。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    config: TConfig</span><br><span class="line">    teststeps: List[TStep]</span><br></pre></td></tr></table></figure>

<h4 id="ProjectMeta"><a href="#ProjectMeta" class="headerlink" title="ProjectMeta"></a>ProjectMeta</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ProjectMeta(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    项目结构</span><br><span class="line">    定义了一些属性，用于表示项目的相关信息，</span><br><span class="line">     debugtalk.py 文件的内容和路径、.env 文件的路径、在 debugtalk.py 中定义的函数、环境变量和项目根目录等。</span><br><span class="line">     其中，debugtalk_py 属性表示 debugtalk.py 文件的内容，</span><br><span class="line">     debugtalk_path 属性表示 debugtalk.py 文件的路径，</span><br><span class="line">     dot_env_path 属性表示 .env 文件的路径，</span><br><span class="line">     functions 属性表示在 debugtalk.py 中定义的函数，是一个字典，</span><br><span class="line">     env 属性表示环境变量，是一个字典，</span><br><span class="line">     RootDir 属性表示项目根目录，是一个字符串，表示 debugtalk.py 文件所在的目录。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    debugtalk_py: Text = &quot;&quot;  # debugtalk.py file content</span><br><span class="line">    debugtalk_path: Text = &quot;&quot;  # debugtalk.py file path</span><br><span class="line">    dot_env_path: Text = &quot;&quot;  # .env file path</span><br><span class="line">    functions: FunctionsMapping = &#123;&#125;  # functions defined in debugtalk.py</span><br><span class="line">    env: Env = &#123;&#125;</span><br><span class="line">    RootDir: Text = (</span><br><span class="line">        os.getcwd()</span><br><span class="line">    )  # project root directory (ensure absolute), the path debugtalk.py located</span><br></pre></td></tr></table></figure>

<h4 id="TestsMapping"><a href="#TestsMapping" class="headerlink" title="TestsMapping"></a>TestsMapping</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TestsMapping(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    测试映射</span><br><span class="line">    1.project_meta</span><br><span class="line">    2.testcases 测试用例集，list下有多个用例</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    project_meta: ProjectMeta</span><br><span class="line">    testcases: List[TestCase]</span><br></pre></td></tr></table></figure>

<h4 id="TestCaseTime"><a href="#TestCaseTime" class="headerlink" title="TestCaseTime"></a>TestCaseTime</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TestCaseTime(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    测试用例时间</span><br><span class="line">    1.start_at：开始时间默认为0</span><br><span class="line">    2.start_at_iso_format：以iso格式启动</span><br><span class="line">    3.duration：持续时间</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    start_at: float = 0</span><br><span class="line">    start_at_iso_format: Text = &quot;&quot;</span><br><span class="line">    duration: float = 0</span><br></pre></td></tr></table></figure>

<h4 id="TestCaseInOut"><a href="#TestCaseInOut" class="headerlink" title="TestCaseInOut"></a>TestCaseInOut</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TestCaseInOut(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    测试用例的输入输出：</span><br><span class="line">    config_vars：配置变量</span><br><span class="line">    export_vars：导出变量</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    config_vars: VariablesMapping = &#123;&#125;</span><br><span class="line">    export_vars: Dict = &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="RequestStat"><a href="#RequestStat" class="headerlink" title="RequestStat"></a>RequestStat</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class RequestStat(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    请求指标：</span><br><span class="line">    content_size：内容大小</span><br><span class="line">    response_time_ms：响应时间(ms)</span><br><span class="line">    elapsed_ms：逝去的时间(ms)</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    content_size: float = 0</span><br><span class="line">    response_time_ms: float = 0</span><br><span class="line">    elapsed_ms: float = 0</span><br></pre></td></tr></table></figure>

<h4 id="AddressData"><a href="#AddressData" class="headerlink" title="AddressData"></a>AddressData</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class AddressData(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    客户端与服务器地址数据</span><br><span class="line">    client_ip：客户端ip地址</span><br><span class="line">    client_port：客户端端口号</span><br><span class="line">    server_ip：服务器ip地址</span><br><span class="line">    server_port：服务器端口号</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    client_ip: Text = &quot;N/A&quot;</span><br><span class="line">    client_port: int = 0</span><br><span class="line">    server_ip: Text = &quot;N/A&quot;</span><br><span class="line">    server_port: int = 0</span><br></pre></td></tr></table></figure>

<h4 id="RequestData"><a href="#RequestData" class="headerlink" title="RequestData"></a>RequestData</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class RequestData(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    请求数据</span><br><span class="line">    method：请求方法，默认为GET</span><br><span class="line">    url：url地址</span><br><span class="line">    headers：请求头</span><br><span class="line">    cookies：cookie信息</span><br><span class="line">    body：请求体</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    method: MethodEnum = MethodEnum.GET</span><br><span class="line">    url: Url</span><br><span class="line">    headers: Headers = &#123;&#125;</span><br><span class="line">    cookies: Cookies = &#123;&#125;</span><br><span class="line">    body: Union[Text, bytes, List, Dict, None] = &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ResponseData"><a href="#ResponseData" class="headerlink" title="ResponseData"></a>ResponseData</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ResponseData(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    响应数据</span><br><span class="line">    status_code：状态码</span><br><span class="line">    headers：响应头</span><br><span class="line">    cookies：cookie信息</span><br><span class="line">    encoding：编码格式</span><br><span class="line">    content_type：内容类型</span><br><span class="line">    body：响应体</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    status_code: int</span><br><span class="line">    headers: Dict</span><br><span class="line">    cookies: Cookies</span><br><span class="line">    encoding: Union[Text, None] = None</span><br><span class="line">    content_type: Text</span><br><span class="line">    body: Union[Text, bytes, List, Dict, None]</span><br></pre></td></tr></table></figure>

<h4 id="ReqRespData"><a href="#ReqRespData" class="headerlink" title="ReqRespData"></a>ReqRespData</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ReqRespData(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    请求响应数据</span><br><span class="line">    request：RequestData</span><br><span class="line">    response：ResponseData</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    request: RequestData</span><br><span class="line">    response: ResponseData</span><br></pre></td></tr></table></figure>

<h4 id="SessionData"><a href="#SessionData" class="headerlink" title="SessionData"></a>SessionData</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class SessionData(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    request session data, including request, response, validators and stat data</span><br><span class="line">    它定义了一些属性，用于表示请求会话数据，包括请求、响应、验证器和统计数据等。</span><br><span class="line">    success 属性表示请求是否成功，是一个布尔值，</span><br><span class="line">    req_resps 属性表示请求和响应数据，是一个 ReqRespData 类型的对象的列表，</span><br><span class="line">    stat 属性表示请求统计数据，是一个 RequestStat 类型的对象，</span><br><span class="line">    address 属性表示请求地址数据，是一个 AddressData 类型的对象，</span><br><span class="line">    validators 属性表示验证器，是一个字典</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    success: bool = False</span><br><span class="line">    # in most cases, req_resps only contains one request &amp; response</span><br><span class="line">    # while when 30X redirect occurs, req_resps will contain multiple request &amp; response</span><br><span class="line">    req_resps: List[ReqRespData] = []</span><br><span class="line">    stat: RequestStat = RequestStat()</span><br><span class="line">    address: AddressData = AddressData()</span><br><span class="line">    validators: Dict = &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="StepResult"><a href="#StepResult" class="headerlink" title="StepResult"></a>StepResult</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class StepResult(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    teststep data, each step maybe corresponding to one request or one testcase</span><br><span class="line">    它定义了一些属性，用于表示测试步骤的相关信息，包括测试步骤名称、测试步骤类型、请求会话数据、测试步骤执行时间、响应内容大小、导出变量和附件等。其中，</span><br><span class="line">    name 属性表示测试步骤名称，是一个字符串，</span><br><span class="line">    step_type 属性表示测试步骤类型，是一个字符串，</span><br><span class="line">    success 属性表示测试步骤是否成功，是一个布尔值，</span><br><span class="line">    data 属性表示请求会话数据，是一个 SessionData 类型的对象或 StepResult 类型的对象的列表，</span><br><span class="line">    elapsed 属性表示测试步骤执行时间，是一个浮点数，</span><br><span class="line">    content_size 属性表示响应内容大小，是一个浮点数，</span><br><span class="line">    export_vars 属性表示导出变量，是一个字典，</span><br><span class="line">    attachment 属性表示测试步骤的附件，是一个字符串。</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    name: Text = &quot;&quot;  # teststep name</span><br><span class="line">    step_type: Text = &quot;&quot;  # teststep type, request or testcase</span><br><span class="line">    success: bool = False</span><br><span class="line">    data: Union[SessionData, List[&quot;StepResult&quot;]] = None</span><br><span class="line">    elapsed: float = 0.0  # teststep elapsed time</span><br><span class="line">    content_size: float = 0  # response content size</span><br><span class="line">    export_vars: VariablesMapping = &#123;&#125;</span><br><span class="line">    attachment: Text = &quot;&quot;  # teststep attachment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">StepResult.update_forward_refs()</span><br></pre></td></tr></table></figure>

<h4 id="IStep"><a href="#IStep" class="headerlink" title="IStep"></a>IStep</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class IStep(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    它定义了一些方法，用于表示测试步骤的相关信息，包括测试步骤名称、测试步骤类型、测试步骤结构和测试步骤执行等。</span><br><span class="line">    name 方法返回测试步骤名称，是一个字符串，</span><br><span class="line">    type 方法返回测试步骤类型，是一个字符串，</span><br><span class="line">    struct 方法返回测试步骤结构，是一个 TStep 类型的对象，</span><br><span class="line">    run 方法用于执行测试步骤，接受一个 runner 参数，返回一个 StepResult 类型的对象。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    </span><br><span class="line">    def name(self) -&gt; str:</span><br><span class="line">        raise NotImplementedError</span><br><span class="line"></span><br><span class="line">    def type(self) -&gt; str:</span><br><span class="line">        raise NotImplementedError</span><br><span class="line"></span><br><span class="line">    def struct(self) -&gt; TStep:</span><br><span class="line">        raise NotImplementedError</span><br><span class="line"></span><br><span class="line">    def run(self, runner) -&gt; StepResult:</span><br><span class="line">        # runner: HttpRunner</span><br><span class="line">        raise NotImplementedError</span><br></pre></td></tr></table></figure>

<h4 id="TestCaseSummary"><a href="#TestCaseSummary" class="headerlink" title="TestCaseSummary"></a>TestCaseSummary</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class PlatformInfo(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    平台信息</span><br><span class="line">    httprunner_version：httprunner版本号</span><br><span class="line">    python_version：python版本</span><br><span class="line">    platform：平台</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    httprunner_version: Text</span><br><span class="line">    python_version: Text</span><br><span class="line">    platform: Text</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="PlatformInfo"><a href="#PlatformInfo" class="headerlink" title="PlatformInfo"></a>PlatformInfo</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class PlatformInfo(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    平台信息</span><br><span class="line">    httprunner_version：httprunner版本号</span><br><span class="line">    python_version：python版本</span><br><span class="line">    platform：平台</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    httprunner_version: Text</span><br><span class="line">    python_version: Text</span><br><span class="line">    platform: Text</span><br></pre></td></tr></table></figure>

<h4 id="Stat"><a href="#Stat" class="headerlink" title="Stat"></a>Stat</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Stat(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    统计信息</span><br><span class="line">    total：总数</span><br><span class="line">    success：成功的用例数</span><br><span class="line">    fail：失败的用例数</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    total: int = 0</span><br><span class="line">    success: int = 0</span><br><span class="line">    fail: int = 0</span><br></pre></td></tr></table></figure>

<h4 id="TestSuiteSummary"><a href="#TestSuiteSummary" class="headerlink" title="TestSuiteSummary"></a>TestSuiteSummary</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class TestSuiteSummary(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    测试套件结果</span><br><span class="line">    success：成功的状态</span><br><span class="line">    stat：统计信息</span><br><span class="line">    time：测试用例花费的时间</span><br><span class="line">    platform：平台信息</span><br><span class="line">    testcases：测试用例集</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    success: bool = False</span><br><span class="line">    stat: Stat = Stat()</span><br><span class="line">    time: TestCaseTime = TestCaseTime()</span><br><span class="line">    platform: PlatformInfo</span><br><span class="line">    testcases: List[TestCaseSummary]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Httprunner</category>
      </categories>
      <tags>
        <tag>httprunner</tag>
        <tag>接口自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter压测-Linux运行Jmeter环境</title>
    <url>/2023/06/05/Jmeter%E5%8E%8B%E6%B5%8B-Linux%E8%BF%90%E8%A1%8CJmeter%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>使用jmeter做压测的时候，在windows上不太稳定，所有一直在linux服务器上使用jmeter做压力测试。<br>本篇记录下linux上搭建jmeter环境，以及运行jmeter脚本，查看报告。</p>
<span id="more"></span>

<p>相关环境：<br>java 1.8<br>jmeter 5.5</p>
<h4 id="一、java环境"><a href="#一、java环境" class="headerlink" title="一、java环境"></a>一、java环境</h4><p>先在Linux上安装java环境，安装1.8.0版本，先查找java相关的列表</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">yum -y <span class="type">list</span> java*</span><br></pre></td></tr></table></figure>
<p>安装java-1.8.0-openjdk相关的文件</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum</span> -y install java-<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>-openjdk*</span><br></pre></td></tr></table></figure>
<p>安装完成后环境变量自动已经生效了，输入java -version查看版本号</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<h4 id="二、安装jmeter"><a href="#二、安装jmeter" class="headerlink" title="二、安装jmeter"></a>二、安装jmeter</h4><p>在jmeter官网<a href="https://jmeter.apache.org/%E4%B8%8B%E8%BD%BDjmeter%E7%9A%84zip%E5%AE%89%E8%A3%85%E5%8C%85,%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E5%90%8E%E4%BC%A0%E5%88%B0linux%E4%B8%8A%E4%BB%BB%E6%84%8F%E7%9B%AE%E5%BD%95%EF%BC%8C%E6%AF%94%E5%A6%82%E6%88%91%E7%9A%84%E6%98%AF/root/jmeter%E3%80%82">https://jmeter.apache.org/下载jmeter的zip安装包,下载完成后传到linux上任意目录，比如我的是/root/jmeter。</a><br>使用unzip命令解压zip文件，如果没有安装过unzip，先yum安装下</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> unzip</span><br></pre></td></tr></table></figure>
<p>使用unzip 解压.zip 文件</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">unzip</span> apache-jmeter-<span class="number">5</span>.<span class="number">5</span>.zip</span><br></pre></td></tr></table></figure>
<p>解压完成后，接下来vi编辑&#x2F;etc&#x2F;profile文件，设置环境变量,在文件底部编辑</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">export PATH=<span class="regexp">/root/</span>jmeter<span class="regexp">/apache-jmeter-5.5/</span>bin/:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>接下来source执行&#x2F;etc&#x2F;profile文件让环境变量生效</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>
<p>输入jmeter -v能看到内容说明安装成功了</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">jmeter -v</span></span><br></pre></td></tr></table></figure>
<h4 id="三、启动jmeter脚本测试"><a href="#三、启动jmeter脚本测试" class="headerlink" title="三、启动jmeter脚本测试"></a>三、启动jmeter脚本测试</h4><p>脚本文件(Test Plan.jmx)导入linux服务器上,执行以下命令启动测试计划</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">jmeter -<span class="built_in">n</span> -<span class="built_in">t</span> Test\ Plan.jmx -l testplan.jtl</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>n 表示以no gui方式运行测试计划</li>
<li>t 表示测试计划，后面跟测试计划名称, 有空格的话用\空格表示</li>
<li>l表示测试结果，后面跟测试结果文件名称，后缀是.jtl文件</li>
</ul>
<h4 id="四、查看报告文件"><a href="#四、查看报告文件" class="headerlink" title="四、查看报告文件"></a>四、查看报告文件</h4><p>测试结束后导出testplan.jtl文件，在本地jmeter上查看运行结果</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Jmeter</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Httprunner源码解读(3)client.py</title>
    <url>/2023/06/12/Httprunner%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-3-client-py/</url>
    <content><![CDATA[<h3 id="client-py的代码结构"><a href="#client-py的代码结构" class="headerlink" title="client.py的代码结构"></a>client.py的代码结构</h3><p><img src="/../images/client.png" alt="img.png"><br><strong>这个模块中定义了2个类和1个方法</strong></p>
<h4 id="ApiResponse类"><a href="#ApiResponse类" class="headerlink" title="ApiResponse类"></a>ApiResponse类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ApiResponse(Response):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    继承Response 类，重写了raise_for_status方法，用于检查响应是否包含错误信息，并在响应中包含错误信息时抛出相应的异常</span><br><span class="line">    raise_for_status 方法首先检查响应对象是否包含 error 属性，并且该属性的值不为 None。如果 error 属性存在且不为 None，则抛出 error 异常。</span><br><span class="line">    否则，调用父类 Response 的 raise_for_status 方法，检查响应的状态码是否为 4xx 或 5xx，如果是，则抛出相应的异常。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def raise_for_status(self):</span><br><span class="line">        if hasattr(self, &quot;error&quot;) and self.error:</span><br><span class="line">            raise self.error</span><br><span class="line">        Response.raise_for_status(self)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="get-req-resp-record方法"><a href="#get-req-resp-record方法" class="headerlink" title="get_req_resp_record方法"></a>get_req_resp_record方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def get_req_resp_record(resp_obj: Response) -&gt; ReqRespData:</span><br><span class="line">    &quot;&quot;&quot;get request and response info from Response() object.&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># 定义了一个打印日志的函数，将打印的日志解析为标准的json格式</span><br><span class="line">    def log_print(req_or_resp, r_type):</span><br><span class="line">        msg = f&quot;\n================== &#123;r_type&#125; details ==================\n&quot;</span><br><span class="line">        for key, value in req_or_resp.dict().items():</span><br><span class="line">            if isinstance(value, dict) or isinstance(value, list):</span><br><span class="line">                value = json.dumps(value, indent=4, ensure_ascii=False)</span><br><span class="line"></span><br><span class="line">            msg += &quot;&#123;:&lt;8&#125; : &#123;&#125;\n&quot;.format(key, value)</span><br><span class="line">        logger.debug(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # record actual request info</span><br><span class="line">    # 是先获取request_headers、request_cookies、request_body，然后将获取到的信息放入RequestData模型中，最后打印请求的信息</span><br><span class="line">    request_headers = dict(resp_obj.request.headers)</span><br><span class="line">    request_cookies = resp_obj.request._cookies.get_dict()</span><br><span class="line"></span><br><span class="line">    request_body = resp_obj.request.body</span><br><span class="line">    if request_body is not None:</span><br><span class="line">        try:</span><br><span class="line">            request_body = json.loads(request_body)</span><br><span class="line">        except json.JSONDecodeError:</span><br><span class="line">            # str: a=1&amp;b=2</span><br><span class="line">            pass</span><br><span class="line">        except UnicodeDecodeError:</span><br><span class="line">            # bytes/bytearray: request body in protobuf</span><br><span class="line">            pass</span><br><span class="line">        except TypeError:</span><br><span class="line">            # neither str nor bytes/bytearray, e.g. &lt;MultipartEncoder&gt;</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line">        request_content_type = lower_dict_keys(request_headers).get(&quot;content-type&quot;)</span><br><span class="line">        if request_content_type and &quot;multipart/form-data&quot; in request_content_type:</span><br><span class="line">            # upload file type</span><br><span class="line">            request_body = &quot;upload file stream (OMITTED)&quot;</span><br><span class="line"></span><br><span class="line">    request_data = RequestData(</span><br><span class="line">        method=resp_obj.request.method,</span><br><span class="line">        url=resp_obj.request.url,</span><br><span class="line">        headers=request_headers,</span><br><span class="line">        cookies=request_cookies,</span><br><span class="line">        body=request_body,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # log request details in debug mode</span><br><span class="line">    log_print(request_data, &quot;request&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # record response info</span><br><span class="line">    # 获取resp_headers、content_type、response_body，最后将这些数据都放入ResponseData模型类中，最后打印响应日志</span><br><span class="line">    resp_headers = dict(resp_obj.headers)</span><br><span class="line">    lower_resp_headers = lower_dict_keys(resp_headers)</span><br><span class="line">    content_type = lower_resp_headers.get(&quot;content-type&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">    if &quot;image&quot; in content_type:</span><br><span class="line">        # response is image type, record bytes content only</span><br><span class="line">        response_body = resp_obj.content</span><br><span class="line">    else:</span><br><span class="line">        try:</span><br><span class="line">            # try to record json data</span><br><span class="line">            response_body = resp_obj.json()</span><br><span class="line">        except ValueError:</span><br><span class="line">            # only record at most 512 text charactors</span><br><span class="line">            resp_text = resp_obj.text</span><br><span class="line">            response_body = omit_long_data(resp_text)</span><br><span class="line"></span><br><span class="line">    response_data = ResponseData(</span><br><span class="line">        status_code=resp_obj.status_code,</span><br><span class="line">        cookies=resp_obj.cookies or &#123;&#125;,</span><br><span class="line">        encoding=resp_obj.encoding,</span><br><span class="line">        headers=resp_headers,</span><br><span class="line">        content_type=content_type,</span><br><span class="line">        body=response_body,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # log response details in debug mode</span><br><span class="line">    log_print(response_data, &quot;response&quot;)</span><br><span class="line"></span><br><span class="line">    # 请求信息和响应信息全部放入ReqRespData模型中，最后get_req_resp_record函数返回的内容就是ReqRespData模型</span><br><span class="line">req_resp_data = ReqRespData(request=request_data, response=response_data)</span><br><span class="line">    return req_resp_data</span><br></pre></td></tr></table></figure>


<h4 id="HttpSession类"><a href="#HttpSession类" class="headerlink" title="HttpSession类"></a>HttpSession类</h4><p><strong><code>HttpSession</code> 是一个用于执行 HTTP 请求的类，它继承自 <code>requests.Session</code> 类，并扩展了一些功能。<code>HttpSession</code> 类的主要作用是在发送 HTTP 请求时记录请求和响应的信息，以便后续进行统计和分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def __init__(self):</span><br><span class="line">    super(HttpSession, self).__init__()</span><br><span class="line">    self.data = SessionData()</span><br></pre></td></tr></table></figure>
<p><strong>初始化方法，定义了data属性的默认值为SessionData模型，该模型包含了req_resps: List[ReqRespData] &#x3D; []请求响应内容</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def update_last_req_resp_record(self, resp_obj):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    update request and response info from Response() object.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # TODO: fix</span><br><span class="line">    self.data.req_resps.pop()</span><br><span class="line">    self.data.req_resps.append(get_req_resp_record(resp_obj))</span><br></pre></td></tr></table></figure>
<p><strong>update_last_req_resp_record 方法用于更新最后一次请求和响应的信息，该方法会从 Response 对象中提取请求和响应的信息，并更新到 SessionData 对象中</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _send_request_safe_mode(self, method, url, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Send a HTTP request, and catch any exception that might occur due to connection problems.</span><br><span class="line">    Safe mode has been removed from requests 1.x.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        return requests.Session.request(self, method, url, **kwargs)</span><br><span class="line">    except (MissingSchema, InvalidSchema, InvalidURL):</span><br><span class="line">        raise</span><br><span class="line">    except RequestException as ex:</span><br><span class="line">        resp = ApiResponse()</span><br><span class="line">        resp.error = ex</span><br><span class="line">        resp.status_code = 0  # with this status_code, content returns None</span><br><span class="line">        resp.request = Request(method, url).prepare()</span><br><span class="line">        return resp</span><br></pre></td></tr></table></figure>
<p><strong>_send_request_safe_mode 方法用于发送 HTTP 请求，并捕获可能发生的连接问题异常。如果发送请求时发生异常，则返回一个 ApiResponse 对象，该对象包含了异常信息和请求对象。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def request(self, method, url, name=None, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Constructs and sends a :py:class:`requests.Request`.</span><br><span class="line">    Returns :py:class:`requests.Response` object.</span><br><span class="line"></span><br><span class="line">    :param method:</span><br><span class="line">        method for the new :class:`Request` object.</span><br><span class="line">    :param url:</span><br><span class="line">        URL for the new :class:`Request` object.</span><br><span class="line">    :param name: (optional)</span><br><span class="line">        Placeholder, make compatible with Locust&#x27;s HttpSession</span><br><span class="line">    :param params: (optional)</span><br><span class="line">        Dictionary or bytes to be sent in the query string for the :class:`Request`.</span><br><span class="line">    :param data: (optional)</span><br><span class="line">        Dictionary or bytes to send in the body of the :class:`Request`.</span><br><span class="line">    :param headers: (optional)</span><br><span class="line">        Dictionary of HTTP Headers to send with the :class:`Request`.</span><br><span class="line">    :param cookies: (optional)</span><br><span class="line">        Dict or CookieJar object to send with the :class:`Request`.</span><br><span class="line">    :param files: (optional)</span><br><span class="line">        Dictionary of ``&#x27;filename&#x27;: file-like-objects`` for multipart encoding upload.</span><br><span class="line">    :param auth: (optional)</span><br><span class="line">        Auth tuple or callable to enable Basic/Digest/Custom HTTP Auth.</span><br><span class="line">    :param timeout: (optional)</span><br><span class="line">        How long to wait for the server to send data before giving up, as a float, or \</span><br><span class="line">        a (`connect timeout, read timeout &lt;user/advanced.html#timeouts&gt;`_) tuple.</span><br><span class="line">        :type timeout: float or tuple</span><br><span class="line">    :param allow_redirects: (optional)</span><br><span class="line">        Set to True by default.</span><br><span class="line">    :type allow_redirects: bool</span><br><span class="line">    :param proxies: (optional)</span><br><span class="line">        Dictionary mapping protocol to the URL of the proxy.</span><br><span class="line">    :param stream: (optional)</span><br><span class="line">        whether to immediately download the response content. Defaults to ``False``.</span><br><span class="line">    :param verify: (optional)</span><br><span class="line">        if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.</span><br><span class="line">    :param cert: (optional)</span><br><span class="line">        if String, path to ssl client cert file (.pem). If Tuple, (&#x27;cert&#x27;, &#x27;key&#x27;) pair.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    self.data = SessionData()</span><br><span class="line"></span><br><span class="line">    # timeout default to 120 seconds</span><br><span class="line">    kwargs.setdefault(&quot;timeout&quot;, 120)</span><br><span class="line"></span><br><span class="line">    # set stream to True, in order to get client/server IP/Port</span><br><span class="line">    kwargs[&quot;stream&quot;] = True</span><br><span class="line"></span><br><span class="line">    start_timestamp = time.time()</span><br><span class="line">    response = self._send_request_safe_mode(method, url, **kwargs)</span><br><span class="line">    response_time_ms = round((time.time() - start_timestamp) * 1000, 2)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        client_ip, client_port = response.raw._connection.sock.getsockname()</span><br><span class="line">        self.data.address.client_ip = client_ip</span><br><span class="line">        self.data.address.client_port = client_port</span><br><span class="line">        logger.debug(f&quot;client IP: &#123;client_ip&#125;, Port: &#123;client_port&#125;&quot;)</span><br><span class="line">    except Exception:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        server_ip, server_port = response.raw._connection.sock.getpeername()</span><br><span class="line">        self.data.address.server_ip = server_ip</span><br><span class="line">        self.data.address.server_port = server_port</span><br><span class="line">        logger.debug(f&quot;server IP: &#123;server_ip&#125;, Port: &#123;server_port&#125;&quot;)</span><br><span class="line">    except Exception:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # get length of the response content</span><br><span class="line">    content_size = int(dict(response.headers).get(&quot;content-length&quot;) or 0)</span><br><span class="line"></span><br><span class="line">    # record the consumed time</span><br><span class="line">    self.data.stat.response_time_ms = response_time_ms</span><br><span class="line">    self.data.stat.elapsed_ms = response.elapsed.microseconds / 1000.0</span><br><span class="line">    self.data.stat.content_size = content_size</span><br><span class="line"></span><br><span class="line">    # record request and response histories, include 30X redirection</span><br><span class="line">    response_list = response.history + [response]</span><br><span class="line">    self.data.req_resps = [</span><br><span class="line">        get_req_resp_record(resp_obj) for resp_obj in response_list</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        response.raise_for_status()</span><br><span class="line">    except RequestException as ex:</span><br><span class="line">        logger.error(f&quot;&#123;str(ex)&#125;&quot;)</span><br><span class="line">    else:</span><br><span class="line">        logger.info(</span><br><span class="line">            f&quot;status_code: &#123;response.status_code&#125;, &quot;</span><br><span class="line">            f&quot;response_time(ms): &#123;response_time_ms&#125; ms, &quot;</span><br><span class="line">            f&quot;response_length: &#123;content_size&#125; bytes&quot;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    return response</span><br></pre></td></tr></table></figure>
<p><strong>最重要的 request 方法。request 方法用于构造并发送一个 HTTP 请求，并返回一个 requests.Response 对象。在发送请求之前，<br>request 方法会先清空之前的请求和响应信息，然后设置一些默认参数，如超时时间、是否允许重定向等。接着，request 方法会调用 _send_request_safe_mode 方法发送请求，<br>并记录请求和响应的信息。最后，request 方法会检查响应的状态码是否为 4xx 或 5xx，如果是，则抛出相应的异常。</strong><br><strong>主要做了以下事情</strong></p>
<ul>
<li>设置了超时时间120s</li>
<li>计算整个请求花费了多少时间</li>
<li>定义了客户端ip地址和端口号、服务端ip地址和端口号</li>
<li>计算了响应体的内容大小</li>
<li>记录了消耗时间</li>
<li>记录了request和response记录，包括重定向记录</li>
</ul>
]]></content>
      <categories>
        <category>Httprunner</category>
      </categories>
      <tags>
        <tag>httprunner</tag>
        <tag>接口自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown常用语法介绍</title>
    <url>/2023/05/27/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="1、Markdown标题-——-提升标题等级ctrl"><a href="#1、Markdown标题-——-提升标题等级ctrl" class="headerlink" title="1、Markdown标题 —— 提升标题等级ctrl +"></a>1、Markdown标题 —— 提升标题等级ctrl +</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line"></span><br><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">### 三级标题</span><br><span class="line"></span><br><span class="line">#### 四级标题</span><br><span class="line"></span><br><span class="line">##### 五级标题</span><br><span class="line"></span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="2、Markdown字体"><a href="#2、Markdown字体" class="headerlink" title="2、Markdown字体"></a>2、Markdown字体</h3><ul>
<li>用1个星号*或底线_表示斜体 斜体：Ctrl+I</li>
<li>用2个星号*或底线_表示粗体 加粗：Ctrl+B</li>
<li>用3个星号*或底线_表示粗斜体<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*斜体文字*</span><br><span class="line"></span><br><span class="line">_斜体文字_</span><br><span class="line"></span><br><span class="line">**粗体文字**</span><br><span class="line"></span><br><span class="line">__粗体文字__</span><br><span class="line"></span><br><span class="line">***粗斜体文字***</span><br><span class="line"></span><br><span class="line">___粗斜体文字___</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3、Markdown分割线"><a href="#3、Markdown分割线" class="headerlink" title="3、Markdown分割线"></a>3、Markdown分割线</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">******</span><br><span class="line">------</span><br></pre></td></tr></table></figure>

<h3 id="4、Markdown删除线-——-删除线：Alt-Shift-5"><a href="#4、Markdown删除线-——-删除线：Alt-Shift-5" class="headerlink" title="4、Markdown删除线 —— 删除线：Alt+Shift+5"></a>4、Markdown删除线 —— 删除线：Alt+Shift+5</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~tencent.com~~</span><br></pre></td></tr></table></figure>

<h3 id="5、代码块-——-代码：Ctrl-Shift-96"><a href="#5、代码块-——-代码：Ctrl-Shift-96" class="headerlink" title="5、代码块 —— 代码：Ctrl+Shift+&#96;"></a>5、代码块 —— 代码：Ctrl+Shift+&#96;</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`world`</span><br></pre></td></tr></table></figure>

<h3 id="6、Markdown下划线-——-下划线：Ctrl-U"><a href="#6、Markdown下划线-——-下划线：Ctrl-U" class="headerlink" title="6、Markdown下划线 —— 下划线：Ctrl+U"></a>6、Markdown下划线 —— 下划线：Ctrl+U</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;带下划线文本&lt;/u&gt;  </span><br></pre></td></tr></table></figure>

<h3 id="7、Markdown列表"><a href="#7、Markdown列表" class="headerlink" title="7、Markdown列表"></a>7、Markdown列表</h3><p>无序列表(三个都行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure>
<p>有序列表直接在文字有加上1. 2. 3. 来表示，符号和文字之间加上一个空格字符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure>

<h3 id="8、Markdown嵌套列表"><a href="#8、Markdown嵌套列表" class="headerlink" title="8、Markdown嵌套列表"></a>8、Markdown嵌套列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>

<h3 id="9、Markdown链接-——-超链接：Ctrl-K"><a href="#9、Markdown链接-——-超链接：Ctrl-K" class="headerlink" title="9、Markdown链接 —— 超链接：Ctrl+K"></a>9、Markdown链接 —— 超链接：Ctrl+K</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一个链接 [新浪新闻](https://news.sina.com.cn/)</span><br><span class="line">&lt;https://news.sina.com.cn/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="10、Markdown图片-——-图像：Ctrl-Shift-I"><a href="#10、Markdown图片-——-图像：Ctrl-Shift-I" class="headerlink" title="10、Markdown图片 —— 图像：Ctrl+Shift+I"></a>10、Markdown图片 —— 图像：Ctrl+Shift+I</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="11、Markdown表格-——-ctrl-T-插入表格"><a href="#11、Markdown表格-——-ctrl-T-插入表格" class="headerlink" title="11、Markdown表格 —— ctrl + T 插入表格"></a>11、Markdown表格 —— ctrl + T 插入表格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line"></span><br><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>

<h3 id="12、Markdown高亮-——-ctrl-T-插入表格"><a href="#12、Markdown高亮-——-ctrl-T-插入表格" class="headerlink" title="12、Markdown高亮 —— ctrl + T 插入表格"></a>12、Markdown高亮 —— ctrl + T 插入表格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==高亮==</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Django REST Framework 中使用 JWT 身份验证</title>
    <url>/2023/05/28/%E5%A6%82%E4%BD%95%E5%9C%A8-Django-REST-Framework-%E4%B8%AD%E4%BD%BF%E7%94%A8-JWT-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<p>JWT 代表<strong>JSON Web Token</strong>，它是客户端&#x2F;服务器应用程序使用的一种身份验证策略，其中客户端是使用 JavaScript 和一些前端框架（如 Angular、React 或 VueJS）的 Web 应用程序。</p>
<span id="more"></span>

<h4 id="JWT-是如何工作的？"><a href="#JWT-是如何工作的？" class="headerlink" title="JWT 是如何工作的？"></a>JWT 是如何工作的？</h4><p>JWT 只是一个授权令牌，应该包含在所有请求中：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/hello/</span> -H <span class="string">&#x27;Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQzODI4NDMxLCJqdGkiOiI3ZjU5OTdiNzE1MGQ0NjU3OWRjMmI0OTE2NzA5N2U3YiIsInVzZXJfaWQiOjF9.Ju70kdcaHKn1Qaz8H42zrOYk0Jx9kIckTn9Xx7vhikY&#x27;</span></span><br></pre></td></tr></table></figure>

<p>JWT 是通过将用户名+密码交换为<strong>访问令牌</strong>和<strong>刷新令牌</strong>来获取的。</p>
<p>访问<strong>令牌</strong>通常是短暂的（5 分钟左右过期，但可以自定义）。</p>
<p>刷新<strong>令牌的</strong>寿命稍长一些（24 小时后过期，也可自定义）。它类似于身份验证会话。过期后，您需要再次使用用户名+密码进行完整登录。</p>
<p>这是为什么？</p>
<p>这是一项安全功能，也是因为 JWT 拥有更多信息。如果你仔细看我上面给出的例子，你会看到令牌由三部分组成：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">xxxxx<span class="selector-class">.yyyyy</span>.zzzzz</span><br></pre></td></tr></table></figure>

<p>这些是构成 JWT 的三个独特部分：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span><span class="selector-class">.payload</span>.signature</span><br></pre></td></tr></table></figure>

<p>所以我们在这里：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">header</span> <span class="operator">=</span> eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br><span class="line"><span class="attribute">payload</span> <span class="operator">=</span> eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQzODI4NDMxLCJqdGkiOiI3ZjU5OTdiNzE1MGQ0NjU3OWRjMmI0OTE2NzA5N2U3YiIsInVzZXJfaWQiOjF9</span><br><span class="line"><span class="attribute">signature</span> <span class="operator">=</span> Ju70kdcaHKn1Qaz8H42zrOYk0Jx9kIckTn9Xx7vhikY</span><br></pre></td></tr></table></figure>

<p>此信息使用 Base64 编码。如果我们解码，我们会看到这样的东西：</p>
<p><strong>标头</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>有效负载</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;access&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1543828431</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jti&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7f5997b7150d46579dc2b49167097e7b&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>签名</strong></p>
<p>签名由 JWT 后端发出，使用 header base64 + payload base64 + <code>SECRET_KEY</code>。根据每个请求验证此签名。如果客户端更改了标头或有效负载中的任何信息，它将使签名无效。检查和验证签名的唯一方法是使用应用程序的 <code>SECRET_KEY</code>. 除此之外，这就是为什么您应该始终保守<code>SECRET_KEY</code> <strong>秘密</strong>！</p>
<hr>
<h4 id="安装与设置"><a href="#安装与设置" class="headerlink" title="安装与设置"></a>安装与设置</h4><p>对于本教程，我们将使用<a href="https://github.com/davesque/django-rest-framework-simplejwt"><code>djangorestframework_simplejwt</code></a> DRF 开发人员推荐的库。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> djangorestframework_simplejwt</span><br></pre></td></tr></table></figure>

<p><strong>设置.py</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">REST_FRAMEWORK</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework_simplejwt.authentication.JWTAuthentication&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>网址.py</strong></p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">from django.urls <span class="keyword">import</span> <span class="built_in">path</span></span><br><span class="line">from rest_framework_simplejwt <span class="keyword">import</span> views <span class="keyword">as</span> jwt_views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # Your URLs...</span><br><span class="line">    <span class="built_in">path</span>(<span class="string">&#x27;api/token/&#x27;</span>, jwt_views.TokenObtainPairView.as_view(), <span class="keyword">name</span>=<span class="string">&#x27;token_obtain_pair&#x27;</span>),</span><br><span class="line">    <span class="built_in">path</span>(<span class="string">&#x27;api/token/refresh/&#x27;</span>, jwt_views.TokenRefreshView.as_view(), <span class="keyword">name</span>=<span class="string">&#x27;token_refresh&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p>对于本教程，我将使用以下路由和 API 视图：</p>
<p><strong>视图.py</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">HelloView</span>(<span class="symbol">APIView</span>):</span><br><span class="line">    <span class="symbol">permission_classes</span> = (<span class="symbol">IsAuthenticated,</span>)</span><br><span class="line"></span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">get</span>(<span class="symbol">self, <span class="symbol">request</span></span>):</span><br><span class="line">        <span class="symbol">content</span> = &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Hello, World!&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure>

<p><strong>网址.py</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> <span class="type">path</span></span><br><span class="line"><span class="keyword">from</span> myapi.core <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;hello/&#x27;</span>, views.HelloView.as_view(), <span class="type">name</span>=<span class="string">&#x27;hello&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>我将使用<a href="https://httpie.org/">HTTPie</a>通过终端使用 API 端点。但您也可以使用 <a href="https://curl.haxx.se/">cURL</a>（在许多操作系统中都很容易使用）在本地进行尝试。</p>
<p>或者，通过访问端点 URL 来使用 DRF Web 界面，如下所示：</p>
<p><img src="https://simpleisbetterthancomplex.com/media/2018/12/drf-web.png" alt="DRF JWT 获取token"></p>
<h5 id="获取令牌"><a href="#获取令牌" class="headerlink" title="获取令牌"></a>获取令牌</h5><p>第一步是<strong>验证并获取令牌</strong>。端点是<code>/api/token/</code>，它只接受<strong>POST</strong>请求。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http post http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/api/</span>token/ username=vitor password=<span class="number">123</span></span><br></pre></td></tr></table></figure>

<p><img src="https://simpleisbetterthancomplex.com/media/2018/12/jwt-obtain-token.png" alt="HTTPie JWT 获取令牌"></p>
<p>所以基本上你的响应主体是两个标记：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;access&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQ1MjI0MjU5LCJqdGkiOiIyYmQ1NjI3MmIzYjI0YjNmOGI1MjJlNThjMzdjMTdlMSIsInVzZXJfaWQiOjF9.D92tTuVi_YcNkJtiLGHtcn6tBcxLCBxz9FKD3qzhUg8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;refresh&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTU0NTMxMDM1OSwianRpIjoiMjk2ZDc1ZDA3Nzc2NDE0ZjkxYjhiOTY4MzI4NGRmOTUiLCJ1c2VyX2lkIjoxfQ.rA-mnGRg71NEW_ga0sJoaMODS5ABjE5HnxJDb0F8xAo&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>之后，您将在客户端存储<strong>访问令牌</strong>和<strong>刷新令牌，通常在</strong><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage">localStorage</a>中。</p>
<p>为了访问后端受保护的视图（即需要身份验证的 API 端点），您应该在所有请求的标头中包含访问令牌<strong>，</strong>如下所示：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/hello/</span> <span class="string">&quot;Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQ1MjI0MjAwLCJqdGkiOiJlMGQxZDY2MjE5ODc0ZTY3OWY0NjM0ZWU2NTQ2YTIwMCIsInVzZXJfaWQiOjF9.9eHat3CvRQYnb5EdcgYFzUyMobXzxlAVh_IAgqyvzCE&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://simpleisbetterthancomplex.com/media/2018/12/jwt-bearer.png" alt="HTTPie JWT 你好，世界！"></p>
<p>您可以在接下来的五分钟内使用此<strong>访问令牌。</strong></p>
<p>五分钟后，令牌将过期，如果您再次尝试访问该视图，您将收到以下错误：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/hello/</span> <span class="string">&quot;Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQ1MjI0MjAwLCJqdGkiOiJlMGQxZDY2MjE5ODc0ZTY3OWY0NjM0ZWU2NTQ2YTIwMCIsInVzZXJfaWQiOjF9.9eHat3CvRQYnb5EdcgYFzUyMobXzxlAVh_IAgqyvzCE&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://simpleisbetterthancomplex.com/media/2018/12/jwt-expired.png" alt="HTTPie JWT 已过期"></p>
<h5 id="刷新令牌"><a href="#刷新令牌" class="headerlink" title="刷新令牌"></a>刷新令牌</h5><p>要获取新的<strong>访问令牌</strong><code>/api/token/refresh/</code>，您应该使用发布 刷新令牌的<strong>刷新令牌</strong>端点：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http post http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/api/</span>token<span class="regexp">/refresh/</span> refresh=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTU0NTMwODIyMiwianRpIjoiNzAyOGFlNjc0ZTdjNDZlMDlmMzUwYjg3MjU1NGUxODQiLCJ1c2VyX2lkIjoxfQ.Md8AO3dDrQBvWYWeZsd_A1J39z6b6HEwWIUZ7ilOiPE</span><br></pre></td></tr></table></figure>

<p><img src="https://simpleisbetterthancomplex.com/media/2018/12/jwt-refresh-token.png" alt="HTTPie JWT 刷新令牌"></p>
<p>返回的是一个新的<strong>访问令牌</strong>，您应该在后续请求中使用它。</p>
<p>刷新<strong>令牌</strong>在接下来的 24 小时内有效。当它最终也过期时，用户将需要使用他们的用户名和密码再次执行完全身份验证以获得一组新的<strong>访问令牌</strong>+<strong>刷新令牌</strong>。</p>
<hr>
<h4 id="刷新令牌有什么意义？"><a href="#刷新令牌有什么意义？" class="headerlink" title="刷新令牌有什么意义？"></a>刷新令牌有什么意义？</h4><p>乍一看，<strong>刷新令牌</strong>可能看起来毫无意义，但实际上有必要确保用户仍然拥有正确的权限。如果您的<strong>访问令牌的</strong>过期时间很长，则更新与令牌关联的信息可能需要更长的时间。这是因为身份验证检查是通过密码学手段完成的，而不是查询数据库和验证数据。所以一些信息有点缓存。</p>
<p>还有一个安全方面，从某种意义上说，<strong>刷新令牌</strong>仅在 POST 数据中传输。并且 <strong>访问令牌</strong>是通过 HTTP 标头发送的，该标头可能会在传输过程中被记录下来。<strong>因此，如果您的访问令牌</strong>被泄露，这也会提供一个较短的窗口。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>rest_framework</tag>
      </tags>
  </entry>
  <entry>
    <title>数据迁移测试</title>
    <url>/2024/11/22/%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p><strong>数据迁移主要是在新老系统切换的时候，主要是以下新、两种</strong></p>
<ol>
<li>将老系统中的数据全部迁移到新系统，业务上只使用新系统，不再使用老系统</li>
<li>老系统的某些功能暂时无法实现，但是要在业务中使用新系统，这时候新老系统都需要使用，老系统产生的数据需要增量同步到新系统的数据库中</li>
</ol>
<span id="more"></span>



<h4 id="一、数据迁移的风险"><a href="#一、数据迁移的风险" class="headerlink" title="一、数据迁移的风险"></a>一、数据迁移的风险</h4><p>1、需要确认数据规模，这次迁移的数据量，线上数据库那么如果按照顺序迁移，则可能花费几个月甚至几年的时间。</p>
<p>2、迁移过程中服务是否需要停止， 因为不能在迁移过程中中断或者停止所有或部分服务，那么在这个迁移过程中必须要保证服务100%处于可用状态。</p>
<p>3、保证数据的，正确性，一致性，可用性，在数据迁移过程中，必须确保每项服务获取到的数据都是正确无误</p>
<h4 id="二、数据迁移前的准备工作"><a href="#二、数据迁移前的准备工作" class="headerlink" title="二、数据迁移前的准备工作"></a>二、数据迁移前的准备工作</h4><p>在进行数据迁移前需要和开发、产品、运维等确认好数据的迁移范围</p>
<p>在进行测试之前，需要对核心的测试点做重点的梳理，其中主要包括本次迁移涉及到的后端接口、对应的数据库表以及数据迁移的接口</p>
<p>涉及到了4个库7张表，关系复杂，需要验证的数据内容较多，针对性的列出了对应场景和表表直接关系，以及一些细节关注点</p>
<h4 id="三、迁移数据的方法"><a href="#三、迁移数据的方法" class="headerlink" title="三、迁移数据的方法"></a>三、迁移数据的方法</h4><p>1、直接复制表</p>
<p>  将原有系统数据库中的表直接复制到新系统的数据库中；</p>
<p>2、拆表&amp;合表</p>
<p>  拆表：将原有系统数据库中的表数据拆分到新系统数据库中的几张表中；</p>
<p>  合表：将原有系统数据库中的表字段合并到新系统数据库中的一张表中；</p>
<p>PS：需要确认清楚，哪些表分拆迁移，哪些表合并迁移，迁移的数据字段、条数等！</p>
<p>1.3：数据迁移接口及数据校验接口</p>
<h4 id="四、数据迁移测试"><a href="#四、数据迁移测试" class="headerlink" title="四、数据迁移测试"></a>四、数据迁移测试</h4><p>1、数据量一致性测试</p>
<p>  要做到新老系统无缝切换，就必须保证数据的正确性和一致性，首要条件就是迁移的数据量是保持一致的，否则无法进行其他测试。</p>
<p>方法：①、可以通过文本统计工具或者数据库连接工具将迁移前的数据库表名、字段、数量等进行统计，然后将迁移后的新数据库表名、字段、数量等进行统计，然后进行比较。</p>
<p>   ②、通过MD5生成工具，对新老数据文本进行MD5值比对测试，如果一致则表示数据量一致，如果不一致，则表明迁移后的数据有部分存在问题。</p>
<p>2、数据库表结构变化测试</p>
<p>  这种测试分2种情况：一种是新老数据库表结构完全不存在关系，新数据库表的字段都是给定的默认值；还有一种是新数据库表字段是由原有系统数据库表字段转换而来。</p>
<p>方法：针对第一种情况，因为新增的字段都是给定的默认值，所以只需要根据开发提供的填写规则，检查该字段的所有值是否满足填写规则。</p>
<p>   针对第二种情况，可以通过编写自动化测试脚本或者人工抽样或者切片方式进行，具体的抽样选择根据数据量等具体情况选择合适的比例即可。</p>
<h4 id="五、业务逻辑测试"><a href="#五、业务逻辑测试" class="headerlink" title="五、业务逻辑测试"></a>五、业务逻辑测试</h4><p>完成上面的数据迁移测试后，需要在新的系统中进行回归测试，以确保迁移过来的数据是100%可用的。</p>
<p>回归测试前需要和业务、开发确认哪些业务模块涉及了哪些表，然后根据具体情况，尽可能的提高测试用例覆盖率，做一次全系统的功能回归测试（可以考虑自动化测试来替代一部分手工测试）。</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>数据迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>如何进行技术面试（面试官视角）</title>
    <url>/2023/02/28/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%EF%BC%88%E9%9D%A2%E8%AF%95%E5%AE%98%E8%A7%86%E8%A7%92%EF%BC%89/</url>
    <content><![CDATA[<p>说起来在我第一次做面试官之前，并没有人教过我应该怎么做，我则一直将面试视作通过一小时左右的沟通，对候选人形成一个整体的印象，<br>最后给出一个主观的评价的过程。在这么多次的面试中，我也总结出了一些经验可以和大家分享。</p>
<span id="more"></span>

<h4 id="验证简历真实性"><a href="#验证简历真实性" class="headerlink" title="验证简历真实性"></a>验证简历真实性</h4><p>首先花一些时间聊一聊简历上提到的项目，请对方进一步介绍这个项目的业务、自己在其中承担的职责和遇到的问题。然后针对其中自己了解<br>的部分提几个问题，如「据我所知这类项目的难点是某某方面，请问你是否有遇到、是如何解决的」，确认对方的项目经验是否真实、是否比<br>较深度地参与了项目。</p>
<h4 id="围绕简历提问"><a href="#围绕简历提问" class="headerlink" title="围绕简历提问"></a>围绕简历提问</h4><p>尽量提问对方了解和擅长的话题，让对方有足够的表达机会，发挥出正常水平，考察候选人擅长的部分要比不擅长的部分更有价值。</p>
<h4 id="开放性问题"><a href="#开放性问题" class="headerlink" title="开放性问题"></a>开放性问题</h4><p>避免问有标准答案的问题，而是可以问「遇到某种情况时可能是什么原因、你会怎么做」或「请解释一下某个事物是如何工作的」这样开放性<br>的问题，给对方足够的发挥空间、主动提到一些自己的知识和经验。</p>
<p>也许有些候选人不喜欢这样的问题，认为缺少安全感、不知道该说什么，但我觉得开放性问题才有足够的区分度，才能在短时间内对候选人形<br>成立体的印象。我们可以在候选人实在不知道从何说起时，对问题再做进一步的解释和提示。</p>
<h4 id="围绕话题由浅入深"><a href="#围绕话题由浅入深" class="headerlink" title="围绕话题由浅入深"></a>围绕话题由浅入深</h4><p>应该针对同一话题准备多个难度逐步增加的问题，让对方回答时思路能够相对流畅，更容易考察对方在这一话题上的深度；反过来应该避免大<br>量零散、无联系、无难度区分的小问题。</p>
<h4 id="没必要执着于答案"><a href="#没必要执着于答案" class="headerlink" title="没必要执着于答案"></a>没必要执着于答案</h4><p>有时在反复提示下对方的答案仍差那么一点，在面试时间大多比较紧张的情况下，我们没必要花更多的时间去让对方答出答案。在候选人表示<br>无法准确回答问题时，也可以引导他做出一些合理的猜测（这时的重点在于猜测是否合理而不是是否正确）。只要候选人在这一问题上说足够<br>多的话，我们就可以考察到其水平了，不一定要等他说出最后的答案。</p>
<p>自己不懂也没关系</p>
<p>在一开始，我会担心问出的问题我自己也不了解，对方回答之后会把自己问倒或者无法考察对方水平。但后来发现完全没有必要，因为面试官<br>没有义务即时地对候选人的回答做出评价（告诉对方对还是错），即使对于不了解的话题，自己也可以从对方的自信程度、逻辑层面，对回答<br>有一个大体的判断的。</p>
<h4 id="现场编码可以很简单"><a href="#现场编码可以很简单" class="headerlink" title="现场编码可以很简单"></a>现场编码可以很简单</h4><p>候选人在现场会非常紧张，面试时间也有限，在现场编码环节没必要出太难的题，重点在于考察候选人是否有最基本编程思维和编码能力。例<br>如我觉得一些难度不高，但适合用递归解决的题目会比较合适，可以考虑在候选人编码的过程中一直保持沟通，注重过程而不是结果。</p>
<p>同时我反对为候选人在面试前或面试后布置编码的作业，这会让候选人付出不对等的时间去准备面试，也很容易从「考察候选人的能力」变成<br>「考察候选人的诚意」。</p>
<h4 id="重复使用一套题库没什么问题"><a href="#重复使用一套题库没什么问题" class="headerlink" title="重复使用一套题库没什么问题"></a>重复使用一套题库没什么问题</h4><p>可以自己建立自己的面试题库，在一次次面试中对其进行反复地打磨，让问题更准确、考察更全面。有些话题可能是永远都不过时的，例如对于<br>后端工程师可能是并发模型及与之相关的线程、内存等话题。</p>
<h4 id="给对方提问的机会"><a href="#给对方提问的机会" class="headerlink" title="给对方提问的机会"></a>给对方提问的机会</h4><p>一般面试的最后一个步骤是让候选人提问，不要把这个过程敷衍掉，可以引导对方提问，告诉对方都可以问哪些问题。如可以补充一下没有提及<br>的技术话题、可以问我司的技术架构或选型、可以问所面试的职位和如果入职之后所参与的项目、可以问日常工作环境和时间等。这样可以让对<br>方有一个主动打开话题的机会，互相判断需求是否匹配，即使没有通过面试也让对方对公司有一个比较好的印象。</p>
<h4 id="有任何顾虑都可以-pass-掉"><a href="#有任何顾虑都可以-pass-掉" class="headerlink" title="有任何顾虑都可以 pass 掉"></a>有任何顾虑都可以 pass 掉</h4><p>我们前面做了这么多都是为了让候选人有更好的面试体验、发挥出自己最好的水平。这种情况下如果仍对候选人某一方面的表现有顾虑的话，应该<br>果断地拒绝掉，招进来一个不合适的人损失远比错过一个合适的人大。</p>
<h4 id="沟通是否顺畅很重要"><a href="#沟通是否顺畅很重要" class="headerlink" title="沟通是否顺畅很重要"></a>沟通是否顺畅很重要</h4><p>沟通是后续开展一切工作的基础，如果觉得与候选人的沟通不顺畅，对方总是不能理解自己的意思，那么即使候选人的技术水平满足要求，也应该<br>慎重考虑。</p>
<h4 id="留下面试的记录"><a href="#留下面试的记录" class="headerlink" title="留下面试的记录"></a>留下面试的记录</h4><p>我每次面试结束后都会尽快开始写对候选人的评价，大多在一两百字，先列出面试聊到的内容、觉得好和不好的地方、了解到的对方的技术栈，然<br>后总结一下对候选人技术水平和沟通情况的评价。这样可以帮助自己整理思路，在候选人比较多的时候也不会记混，最后给出通过与否的评价，同<br>时还能给下一轮的面试官提供参考。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用详细教程</title>
    <url>/2023/06/05/Git%E4%BD%BF%E7%94%A8%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>现在大部分的开发团队都以 Git 作为自己的版本控制工具，需要对 Git 的使用非常的熟悉。<br>这篇文章中本人整理了自己在工作过程中经常使用到的 Git 命令，方便在偶尔忘记时速查。<br><img src="/../images/git.png" alt="git.png"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>番茄工作法图解</title>
    <url>/2024/12/01/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E5%9B%BE%E8%A7%A3/</url>
    <content><![CDATA[<p>番茄工作法是<strong>弗朗西斯科·西里洛</strong>在1992年创立的时间管理方法。</p>
<p>当时弗朗西斯科还是一名在校学生，他曾一度苦于学习效率低下的问题。后来他开始逼迫自己每次只坚持学习10分钟，甚至还用厨房定时器掐着时间进行。</p>
<p>这么一折腾，弗朗西斯科很快就发现自己的学习效率获得了大幅度提升，而当时他用的计时器，因外形酷似“番茄”，于是就把这种工作方法叫做“番茄工作法”。</p>
<p>而这本书的作者史蒂夫·诺特伯格，和发明人弗朗西斯科不同，他是这个番茄工作法的忠实实践者。</p>
<span id="more"></span>

<h4 id="1、什么是番茄工作法"><a href="#1、什么是番茄工作法" class="headerlink" title="1、什么是番茄工作法"></a><strong>1、什么是番茄工作法</strong></h4><p>说了这么多，可能有朋友会问，那到底什么是番茄工作法呢？</p>
<p>用一句话表达，<strong>番茄工作法就是在25分钟番茄时间内只专注做一件事。</strong></p>
<p>换而言之，就是在每天工作开始前，列出当天所有工作任务，并将这些工作任务分解成一个个25分钟的小任务，然后一项一项完成去它们。</p>
<p><strong>我们把这个25分钟作为一个专注工作的基本时间单位，所以把这25分钟被称为一个“番茄钟”</strong>，这是番茄工作法最重要的核心要素之一。</p>
<p>所以番茄工作法的核心内容至少要有以下五点：</p>
<p><strong>（1）采用“专注25分钟工作+放松休息5分钟”的时间节律开展工作；</strong></p>
<p><strong>（2）一次只做一件事；</strong></p>
<p><strong>（3）番茄钟的执行过程中不可以中途停止，否则该番茄钟必须作废；</strong></p>
<p><strong>（4）当你连续工作4个番茄钟时，可以得到一个20分钟的长休息；</strong></p>
<p><strong>（5）通过“短时间的专注工作+频繁的休息奖励”，不断激励自己投入下一个工作任务，并逐渐喜欢上这种工作模式。</strong></p>
<h4 id="2、怎么使用番茄工作法"><a href="#2、怎么使用番茄工作法" class="headerlink" title="2、怎么使用番茄工作法"></a><strong>2、怎么使用番茄工作法</strong></h4><h5 id="（1）前期计划"><a href="#（1）前期计划" class="headerlink" title="（1）前期计划"></a>（1）前期计划</h5><p>这里的前期计划，其实就是我们平时说的工作计划。</p>
<p>也就是说，我们通常所说的工作计划，只要列出一个工作清单就可以。但是番茄工作法，却要求至少要准备三张表格。</p>
<p><strong>这三张表分别是：工作清单表、今日待办表和番茄跟踪记录表。</strong></p>
<p>第一张表是<strong>工作清单表</strong>，说的就是我们平时的工作清单，你可以随时把近期的工作添加到这张表中，也可以把它从表中移出。</p>
<p>它就相当于一个大池塘，你要做的工作、领导安排的任务、同事需要协调的工作，都可以放进去，也可以移出去。也就是说，这个池塘里的“任务”的去留，你说了算。</p>
<p>第二张表是<strong>今日待办表</strong>，就是当天我们需要完成的工作。这些任务是从工作清单里面挑选出来的，而且挑选的原则是当前最重要的一项工作。</p>
<p>在这一天的工作中，每当你每完成一件工作，就划掉一项，直到把所有的任务划完为止。</p>
<p>第三张表，我们把它叫做<strong>番茄跟踪记录表</strong>。</p>
<p>为什么要用这张表呢？</p>
<p>其实稍微动一下脑子就能立刻明白，这张表其实就是一个激励反馈信息表，无论是一项任务的预估番茄钟个数，还是实际的番茄钟个数都会在这张表上体现。</p>
<p>它不仅能够帮助我们及时、客观地反映番茄钟使用过程中存在的问题，及时发现自己时间管理上的问题，还能不断提升自己对时间的掌控力。</p>
<p>这是前期计划这个环节的三张表。</p>
<h5 id="2）中期执行"><a href="#2）中期执行" class="headerlink" title="(2）中期执行"></a>(2）中期执行</h5><h6 id=""><a href="#" class="headerlink" title=""></a></h6><p>第二个环节是中期执行。其实中期执行也很简单，只有三步：</p>
<p><strong>第一，按照今日待办的所有工作任务，选择一项最重要的工作，作为当前马上要开展的工作；</strong></p>
<p><strong>第二，设定一个25分钟的计时器，作为你的专注工作的时间；</strong></p>
<p><strong>第三，专注工作25分钟之后，计时器响起，立刻放下手上的工作，休息5分钟。</strong></p>
<p>这5分钟必须完全放下工作，你可以上厕所，接一杯水，或者做一个简单的运动项目，比如100次开合跳、50个原地高抬腿跑等等，总之，这5分钟你需要让大脑去真正休息一下，离开工位至少3米以外。</p>
<p>当然每完成一个番茄钟，要及时在番茄跟踪记录表中做记录，比如番茄钟进行中有多少次打断，一天当中有多少次非计划外的任务被添加进来，还有每项任务的预估番茄钟个数和实际番茄钟的个数存在的偏差等等。</p>
<p>然后就是不断重复循环。</p>
<p>当然你也可能会问，“25+5”这种模式会不会来回切换太频繁了，这样会不会更加降低工作效率呢？</p>
<p>其实，这种方式是根据人类大脑自有的节律进行设置的。很多人一开始不适应是因为你的身体习惯了一件事做很久再休息的方式，而使用番茄工作法，改变了这个身体节律，所以产生了身体上的不适感，这并不是大脑不适应。</p>
<p>我们使用番茄工作法的目的是要提高我们大脑的工作效率，所以让身体的节律和大脑保持一致，才是持续高效工作的原始密码。</p>
<p><strong>（3）后期评估</strong></p>
<p>最后一个环节是后期评估。</p>
<p>一天的工作结束了，这时候我们需要花上5分钟时间，复盘一下自己一天的番茄跟踪记录情况。</p>
<p><strong>首先，要把自己早上预估番茄钟的个数，和实际一天真实的番茄钟个数进行对比。</strong></p>
<p>通过这样的方法，来看看自己对时间把控情况，哪些工作预估比较准确，哪些工作的预估还是存在比较大的偏差？不断找原因，找差距，寻找更好的方法来解决这些问题，不断地提升自己对时间的管控感。</p>
<p>然后，还要看看自己一天的番茄标记有多少？如有多少次的打断？有多少项计划外工作？通过分析“番茄跟踪记录”，判断自己有哪些提升？还存在哪些问题？</p>
<h4 id="3、工作被中断怎么办"><a href="#3、工作被中断怎么办" class="headerlink" title="3、工作被中断怎么办"></a>3、工作被中断怎么办</h4><p><strong>（1）内部中断</strong></p>
<p>我们先看第一种中断——内部中断。</p>
<p>作者提出了一个明确的策略，<strong>那就是首先接受它，然后把它可视化，也就是把它记录下来，然后立即继续你手头的工作，避免真的被中断。</strong></p>
<p>这个时候，我们再回过头想一想，在前期计划里的三张表：工作清单表、今日待办表和番茄跟踪记录表，是不是立刻明白了这三张表的重要性？</p>
<p>没错，这个时候突然萌发的工作，如果不是很重要或者很紧急，那就先把它罗列在你的工作清单表中，这样你手上的工作就不会被中断，而且这项工作也不会被遗忘掉。</p>
<p><strong>（2）外部中断</strong></p>
<p>还有一种中断叫外部中断，也就是被他人打断自己的工作。</p>
<p>作者在书里也明确提出了一种处理策略，具体分四步：</p>
<p><strong>第一步：告知</strong></p>
<p>你需要先告知对方，“我手头有事，正忙。” 先保护好自己现有的番茄钟。</p>
<p>这种情况下，中断你工作的人，有一部分就会转向他人。当然还有一些人会继续选择向你求助，那么你就可以启动第二步。</p>
<p><strong>第二步：协商</strong></p>
<p>这一步你需要告诉对方一个准确的时间，比如“周五我再帮你做，你看行吗？”</p>
<p>如果对方不能接受，他就需要另想其他办法了。 </p>
<p>如果对方接受，那你就需要继续启动第三步，并且现在立刻把这项工作列入你的工作清单表中。</p>
<p><strong>第三步：列计划</strong></p>
<p>第三步就是，把这项计划外的工作列入你的工作清单当中，并为它预估一个番茄钟个数。</p>
<p><strong>第四步：答复</strong></p>
<p>最后一步就是，在你完成这项工作后，需要及时给对方一个回复，用于增加他对你的信任程度，不然的话，在以后的工作中，你就很难再得到信任了。</p>
<p>以上就是这本书的全部精华内容。最后，我们总结一下：</p>
<p><strong>1、番茄工作法的核心内容就是在25分钟番茄时间内只专注做一件事。</strong></p>
<p>一旦25分钟的专注工作时间到了，就需要休息5分钟，中途也不可以停止。当你连续完成4个番茄钟的时候，可以获得一个更长时间的休息，也就是20分钟的长休息时间。</p>
<p>通过这种“短时间的专注工作+频繁的休息奖励”的方式，不断激励自己投入下一个工作任务当中，并逐渐喜欢上这种工作方式。</p>
<p><strong>2、番茄工作法具体使用有三个环节：前期计划、中期执行和后期评估。</strong></p>
<p>前期计划需要准备三张表格，它们分别是工作清单表、今日待办表以及番茄跟踪记录表。</p>
<p>中期执行也是分三步。第一步，按照今日待办的所有工作任务，选择一项最重要的工作，作为当前马上要开展的工作；第二步，设定一个25分钟的计时器，作为你的专注工作的时间；第三步，专注工作25分钟之后，计时器响起，立刻放下手上的工作，休息5分钟。</p>
<p>后期评估环节也有两个步骤：首先，要把预估番茄钟和实际番茄钟的个数进行对比，找到自己的不足和差距。同时还要结合自己的番茄记录，了解自己一天有多少次的中断？有多少项计划外工作？找到自己的问题以及短板，为自己的能力提升找到一个明确的方向。</p>
<p><strong>3、在具体工作中如果被中断也有两个策略。</strong></p>
<p>面对内部中断，首先是接受它，然后把它可视化，也就是把它记录下来，然后立即继续你手头的工作。</p>
<p>面对外部打断，可以分四步走：</p>
<p>第一步：告知对方，自己正在忙；</p>
<p>第二步：与对方协商一个新的工作时间；</p>
<p>第三步：把这项计划外的工作列入你的工作清单中。</p>
<p>第四步：在完成这项计划外工作的时候，需要按照承诺给对方一个明确的回复。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>工作方法</tag>
        <tag>效率</tag>
      </tags>
  </entry>
  <entry>
    <title>那些有趣的注释，有没有你曾用过的</title>
    <url>/2023/02/27/%E9%82%A3%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E6%B3%A8%E9%87%8A%EF%BC%8C%E6%9C%89%E6%B2%A1%E6%9C%89%E4%BD%A0%E6%9B%BE%E7%94%A8%E8%BF%87%E7%9A%84/</url>
    <content><![CDATA[<p>闲来无事收集了一些有趣的注释，各式各样的都有，程序员真是一群有趣的人，喜欢哪一款拿走不谢</p>
<span id="more"></span>

<p>第一款：佛祖保佑，永无BUG</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span>                            _ooOoo_    </span><br><span class="line"><span class="string">//</span>                           o8888888o    </span><br><span class="line"><span class="string">//</span>                           88<span class="string">&quot; . &quot;</span>88    </span><br><span class="line"><span class="string">//</span>                           <span class="params">(| -_- |)</span>    </span><br><span class="line"><span class="string">//</span>                            O\ = <span class="string">/O</span>    </span><br><span class="line"><span class="string">//</span>                        ____/`<span class="params">---</span>&#x27;\____    </span><br><span class="line"><span class="string">//</span>                      .   &#x27; \\| |<span class="string">//</span> `.    </span><br><span class="line"><span class="string">//</span>                       / \\||| : |||<span class="string">//</span> \    </span><br><span class="line"><span class="string">//</span>                     / _||||| -<span class="function">:-</span> |||||- \    </span><br><span class="line"><span class="string">//</span>                       | | \\\ - <span class="string">///</span> | |    </span><br><span class="line"><span class="string">//</span>                     | \_| &#x27;&#x27;\<span class="params">---/</span>&#x27;&#x27; | |    </span><br><span class="line"><span class="string">//</span>                      \ <span class="string">.-</span>\__ `-` ___/-. /    </span><br><span class="line"><span class="string">//</span>                   ___`. .&#x27; <span class="string">/--.--</span>\ `. . __    </span><br><span class="line"><span class="string">//</span>                .<span class="string">&quot;&quot;</span> &#x27;&lt; `<span class="string">.___</span>\_&lt;|&gt;_/___.&#x27; &gt;&#x27;<span class="string">&quot;&quot;</span>.    </span><br><span class="line"><span class="string">//</span>               | | : `- \`.;`\ _ /`;.`/ - ` : | |    </span><br><span class="line"><span class="string">//</span>                 \ \ `-. \_ __\ <span class="string">/__</span> _/ <span class="string">.-</span>` / /    </span><br><span class="line"><span class="string">//</span>         ======`-<span class="string">.____</span>`-<span class="string">.___</span>\_____/___.-`____.-&#x27;======    </span><br><span class="line"><span class="string">//</span>                            `=<span class="params">---=</span>&#x27;    </span><br><span class="line"><span class="string">//</span>    </span><br><span class="line"><span class="string">//</span>         <span class="string">.............................................</span>    </span><br><span class="line"><span class="string">//</span>                  佛祖保佑             永无BUG</span><br></pre></td></tr></table></figure>

<p>第二款：神兽护体，永无BUG</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> ┏┓　　　┏┓</span><br><span class="line"><span class="regexp">//</span> ┏┛┻━━━┛┻┓</span><br><span class="line"><span class="regexp">//</span> ┃　　　　　　　┃ 　</span><br><span class="line"><span class="regexp">//</span> ┃　　　━　　　┃</span><br><span class="line"><span class="regexp">//</span> ┃　┳┛　┗┳　┃</span><br><span class="line"><span class="regexp">//</span> ┃　　　　　　　┃</span><br><span class="line"><span class="regexp">//</span> ┃　　　┻　　　┃</span><br><span class="line"><span class="regexp">//</span> ┃　　　　　　　┃</span><br><span class="line"><span class="regexp">//</span> ┗━┓　　　┏━┛</span><br><span class="line"><span class="regexp">//</span> ┃　　　┃ Code is far away from bug with the animal protecting　　　　　　　　</span><br><span class="line"><span class="regexp">//</span> ┃　　　┃ 神兽保护，永无BUG！</span><br><span class="line"><span class="regexp">//</span> ┃　　　┗━━━┓</span><br><span class="line"><span class="regexp">//</span> ┃　　　　　　　┣┓</span><br><span class="line"><span class="regexp">//</span> ┃　　　　　　　┏┛</span><br><span class="line"><span class="regexp">//</span> ┗┓┓┏━┳┓┏┛</span><br><span class="line"><span class="regexp">//</span> ┃┫┫　┃┫┫</span><br><span class="line"><span class="regexp">//</span> ┗┻┛　┗┻┛</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *　　　　　　　　┏┓　　　┏┓+ +</span><br><span class="line"> *　　　　　　　┏┛┻━━━┛┻┓ + +</span><br><span class="line"> *　　　　　　　┃　　　　　　　┃ 　</span><br><span class="line"> *　　　　　　　┃　　　━　　　┃ ++ + + +</span><br><span class="line"> *　　　　　　 ████━████ ┃+</span><br><span class="line"> *　　　　　　　┃　　　　　　　┃ +</span><br><span class="line"> *　　　　　　　┃　　　┻　　　┃</span><br><span class="line"> *　　　　　　　┃　　　　　　　┃ + +</span><br><span class="line"> *　　　　　　　┗━┓　　　┏━┛</span><br><span class="line"> *　　　　　　　　　┃　　　┃　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　┃　　　┃ + + + +</span><br><span class="line"> *　　　　　　　　　┃　　　┃　Code is far away from bug with the animal protecting　　　　　　　</span><br><span class="line"> *　　　　　　　　　┃　　　┃ + 神兽保佑,永无bug　　</span><br><span class="line"> *　　　　　　　　　┃　　　┃</span><br><span class="line"> *　　　　　　　　　┃　　　┃　　+　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　┃　 　　┗━━━┓ + +</span><br><span class="line"> *　　　　　　　　　┃ 　　　　　　　┣┓</span><br><span class="line"> *　　　　　　　　　┃ 　　　　　　　┏┛</span><br><span class="line"> *　　　　　　　　　┗┓┓┏━┳┓┏┛ + + + +</span><br><span class="line"> *　　　　　　　　　　┃┫┫　┃┫┫</span><br><span class="line"> *　　　　　　　　　　┗┻┛　┗┻┛+ + + +</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>第三款：来首程序员打油诗，笑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *                      江城子 . 程序员之歌</span><br><span class="line"> *</span><br><span class="line"> *                  十年生死两茫茫，写程序，到天亮。</span><br><span class="line"> *                      千行代码，Bug何处藏。</span><br><span class="line"> *                  纵使上线又怎样，朝令改，夕断肠。</span><br><span class="line"> *</span><br><span class="line"> *                  领导每天新想法，天天改，日日忙。</span><br><span class="line"> *                      相顾无言，惟有泪千行。</span><br><span class="line"> *                  每晚灯火阑珊处，夜难寐，加班狂。</span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *          写字楼里写字间，写字间里程序员；</span><br><span class="line"> *          程序人员写程序，又拿程序换酒钱。</span><br><span class="line"> *          酒醒只在网上坐，酒醉还来网下眠；</span><br><span class="line"> *          酒醉酒醒日复日，网上网下年复年。</span><br><span class="line"> *          但愿老死电脑间，不愿鞠躬老板前；</span><br><span class="line"> *          奔驰宝马贵者趣，公交自行程序员。</span><br><span class="line"> *          别人笑我忒疯癫，我笑自己命太贱；</span><br><span class="line"> *          不见满街漂亮妹，哪个归得程序员？</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>第四款：单身狗专用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">                       ::</span><br><span class="line">                      :;J7, :,                        ::;7:</span><br><span class="line">                      ,ivYi, ,                       ;LLLFS:</span><br><span class="line">                      :iv7Yi                       :7ri;j5PL</span><br><span class="line">                     ,:ivYLvr                    ,ivrrirrY2X,</span><br><span class="line">                     :;r@Wwz.7r:                :ivu@kexianli.</span><br><span class="line">                    :iL7::,:::iiirii:ii;::::,,irvF7rvvLujL7ur</span><br><span class="line">                   ri::,:,::i:iiiiiii:i:irrv177JX7rYXqZEkvv17</span><br><span class="line">                ;i:, , ::::iirrririi:i:::iiir2XXvii;L8OGJr71i</span><br><span class="line">              :,, ,,:   ,::ir@mingyi.irii:i:::j1jri7ZBOS7ivv,</span><br><span class="line">                 ,::,    ::rv77iiiriii:iii:i::,rvLq@huhao.Li</span><br><span class="line">             ,,      ,, ,:ir7ir::,:::i;ir:::i:i::rSGGYri712:</span><br><span class="line">           :::  ,v7r:: ::rrv77:, ,, ,:i7rrii:::::, ir7ri7Lri</span><br><span class="line">          ,     2OBBOi,iiir;r::        ,irriiii::,, ,iv7Luur:</span><br><span class="line">        ,,     i78MBBi,:,:::,:,  :7FSL: ,iriii:::i::,,:rLqXv::</span><br><span class="line">        :      iuMMP: :,:::,:ii;2GY7OBB0viiii:i:iii:i:::iJqL;::</span><br><span class="line">       ,     ::::i   ,,,,, ::LuBBu BBBBBErii:i:i:i:i:i:i:r77ii</span><br><span class="line">      ,       :       , ,,:::rruBZ1MBBqi, :,,,:::,::::::iiriri:</span><br><span class="line">     ,               ,,,,::::i:  @arqiao.       ,:,, ,:::ii;i7:</span><br><span class="line">    :,       rjujLYLi   ,,:::::,:::::::::,,   ,:i,:,,,,,::i:iii</span><br><span class="line">    ::      BBBBBBBBB0,    ,,::: , ,:::::: ,      ,,,, ,,:::::::</span><br><span class="line">    i,  ,  ,8BMMBBBBBBi     ,,:,,     ,,, , ,   , , , :,::ii::i::</span><br><span class="line">    :      iZMOMOMBBM2::::::::::,,,,     ,,,,,,:,,,::::i:irr:i:::,</span><br><span class="line">    i   ,,:;u0MBMOG1L:::i::::::  ,,,::,   ,,, ::::::i:i:iirii:i:i:</span><br><span class="line">    :    ,iuUuuXUkFu7i:iii:i:::, :,:,: ::::::::i:i:::::iirr7iiri::</span><br><span class="line">    :     :rk@Yizero.i:::::, ,:ii:::::::i:::::i::,::::iirrriiiri::,</span><br><span class="line">     :      5BMBBBBBBSr:,::rv2kuii:::iii::,:i:,, , ,,:,:i@petermu.,</span><br><span class="line">          , :r50EZ8MBBBBGOBBBZP7::::i::,:::::,: :,:,::i;rrririiii::</span><br><span class="line">              :jujYY7LS0ujJL7r::,::i::,::::::::::::::iirirrrrrrr:ii:</span><br><span class="line">           ,:  :@kevensun.:,:,,,::::i:i:::::,,::::::iir;ii;7v77;ii;i,</span><br><span class="line">           ,,,     ,,:,::::::i:iiiii:i::::,, ::::iiiir@xingjief.r;7:i,</span><br><span class="line">        , , ,,,:,,::::::::iiiiiiiiii:,:,:::::::::iiir;ri7vL77rrirri::</span><br><span class="line">         :,, , ::::::::i:::i:::i:i::,,,,,:,::i:i:::iir;@Secbone.ii:::</span><br><span class="line"></span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<p>第五款：骷髅头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> **************************************************************</span><br><span class="line"> *                                                            *</span><br><span class="line"> *   .=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-.       *</span><br><span class="line"> *    |                     ______                     |      *</span><br><span class="line"> *    |                  .-&quot;      &quot;-.                  |      *</span><br><span class="line"> *    |                 /            \                 |      *</span><br><span class="line"> *    |     _          |              |          _     |      *</span><br><span class="line"> *    |    ( \         |,  .-.  .-.  ,|         / )    |      *</span><br><span class="line"> *    |     &gt; &quot;=._     | )(__/  \__)( |     _.=&quot; &lt;     |      *</span><br><span class="line"> *    |    (_/&quot;=._&quot;=._ |/     /\     \| _.=&quot;_.=&quot;\_)    |      *</span><br><span class="line"> *    |           &quot;=._&quot;(_     ^^     _)&quot;_.=&quot;           |      *</span><br><span class="line"> *    |               &quot;=\__|IIIIII|__/=&quot;               |      *</span><br><span class="line"> *    |              _.=&quot;| \IIIIII/ |&quot;=._              |      *</span><br><span class="line"> *    |    _     _.=&quot;_.=&quot;\          /&quot;=._&quot;=._     _    |      *</span><br><span class="line"> *    |   ( \_.=&quot;_.=&quot;     `--------`     &quot;=._&quot;=._/ )   |      *</span><br><span class="line"> *    |    &gt; _.=&quot;                            &quot;=._ &lt;    |      *</span><br><span class="line"> *    |   (_/                                    \_)   |      *</span><br><span class="line"> *    |                                                |      *</span><br><span class="line"> *    &#x27;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=&#x27;      *</span><br><span class="line"> *                                                            *</span><br><span class="line"> *           LASCIATE OGNI SPERANZA, VOI CH&#x27;ENTRATE           *</span><br><span class="line"> **************************************************************</span><br><span class="line"> */</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第六款：标准键盘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐</span><br><span class="line"> * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐</span><br><span class="line"> * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘</span><br><span class="line"> * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐</span><br><span class="line"> * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │</span><br><span class="line"> * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤</span><br><span class="line"> * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │</span><br><span class="line"> * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │</span><br><span class="line"> * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &#x27;│ Enter  │               │ 4 │ 5 │ 6 │   │</span><br><span class="line"> * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤</span><br><span class="line"> * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │</span><br><span class="line"> * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││</span><br><span class="line"> * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│</span><br><span class="line"> * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>第七款：顶</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 頂頂頂頂頂頂頂頂頂　頂頂頂頂頂頂頂頂頂</span><br><span class="line"> * 頂頂頂頂頂頂頂　　　　　頂頂　　　　　</span><br><span class="line"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　　　　　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　　　　　頂頂頂　</span><br><span class="line"> * 　　　頂頂　　　　　　頂頂　頂頂　頂頂</span><br><span class="line"> * 　頂頂頂頂　　　頂頂頂頂頂　頂頂頂頂頂</span><br><span class="line"> * 　頂頂頂頂　　　頂頂頂頂　　　頂頂頂頂</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>还有一些其他有趣搞怪的注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * _ooOoo_</span><br><span class="line"> * o8888888o</span><br><span class="line"> * 88&quot; . &quot;88</span><br><span class="line"> * (| -_- |)</span><br><span class="line"> *  O\ = /O</span><br><span class="line"> * ___/`---&#x27;\____</span><br><span class="line"> * .   &#x27; \\| |// `.</span><br><span class="line"> * / \\||| : |||// \</span><br><span class="line"> * / _||||| -:- |||||- \</span><br><span class="line"> * | | \\\ - /// | |</span><br><span class="line"> * | \_| &#x27;&#x27;\---/&#x27;&#x27; | |</span><br><span class="line"> * \ .-\__ `-` ___/-. /</span><br><span class="line"> * ___`. .&#x27; /--.--\ `. . __</span><br><span class="line"> * .&quot;&quot; &#x27;&lt; `.___\_&lt;|&gt;_/___.&#x27; &gt;&#x27;&quot;&quot;.</span><br><span class="line"> * | | : `- \`.;`\ _ /`;.`/ - ` : | |</span><br><span class="line"> * \ \ `-. \_ __\ /__ _/ .-` / /</span><br><span class="line"> * ======`-.____`-.___\_____/___.-`____.-&#x27;======</span><br><span class="line"> * `=---=&#x27;</span><br><span class="line"> * .............................................</span><br><span class="line"> * 佛曰：bug泛滥，我已瘫痪！</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *                                         ,s555SB@@&amp;                          </span><br><span class="line"> *                                      :9H####@@@@@Xi                        </span><br><span class="line"> *                                     1@@@@@@@@@@@@@@8                       </span><br><span class="line"> *                                   ,8@@@@@@@@@B@@@@@@8                      </span><br><span class="line"> *                                  :B@@@@X3hi8Bs;B@@@@@Ah,                   </span><br><span class="line"> *             ,8i                  r@@@B:     1S ,M@@@@@@#8;                 </span><br><span class="line"> *            1AB35.i:               X@@8 .   SGhr ,A@@@@@@@@S                </span><br><span class="line"> *            1@h31MX8                18Hhh3i .i3r ,A@@@@@@@@@5               </span><br><span class="line"> *            ;@&amp;i,58r5                 rGSS:     :B@@@@@@@@@@A               </span><br><span class="line"> *             1#i  . 9i                 hX.  .: .5@@@@@@@@@@@1               </span><br><span class="line"> *              sG1,  ,G53s.              9#Xi;hS5 3B@@@@@@@B1                </span><br><span class="line"> *               .h8h.,A@@@MXSs,           #@H1:    3ssSSX@1                  </span><br><span class="line"> *               s ,@@@@@@@@@@@@Xhi,       r#@@X1s9M8    .GA981               </span><br><span class="line"> *               ,. rS8H#@@@@@@@@@@#HG51;.  .h31i;9@r    .8@@@@BS;i;          </span><br><span class="line"> *                .19AXXXAB@@@@@@@@@@@@@@#MHXG893hrX#XGGXM@@@@@@@@@@MS        </span><br><span class="line"> *                s@@MM@@@hsX#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;,      </span><br><span class="line"> *              :GB@#3G@@Brs ,1GM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B,     </span><br><span class="line"> *            .hM@@@#@@#MX 51  r;iSGAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8     </span><br><span class="line"> *          :3B@@@@@@@@@@@&amp;9@h :Gs   .;sSXH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:    </span><br><span class="line"> *      s&amp;HA#@@@@@@@@@@@@@@M89A;.8S.       ,r3@@@@@@@@@@@@@@@@@@@@@@@@@@@r    </span><br><span class="line"> *   ,13B@@@@@@@@@@@@@@@@@@@5 5B3 ;.         ;@@@@@@@@@@@@@@@@@@@@@@@@@@@i    </span><br><span class="line"> *  5#@@#&amp;@@@@@@@@@@@@@@@@@@9  .39:          ;@@@@@@@@@@@@@@@@@@@@@@@@@@@;    </span><br><span class="line"> *  9@@@X:MM@@@@@@@@@@@@@@@#;    ;31.         H@@@@@@@@@@@@@@@@@@@@@@@@@@:    </span><br><span class="line"> *   SH#@B9.rM@@@@@@@@@@@@@B       :.         3@@@@@@@@@@@@@@@@@@@@@@@@@@5    </span><br><span class="line"> *     ,:.   9@@@@@@@@@@@#HB5                 .M@@@@@@@@@@@@@@@@@@@@@@@@@B    </span><br><span class="line"> *           ,ssirhSM@&amp;1;i19911i,.             s@@@@@@@@@@@@@@@@@@@@@@@@@@S   </span><br><span class="line"> *              ,,,rHAri1h1rh&amp;@#353Sh:          8@@@@@@@@@@@@@@@@@@@@@@@@@#:  </span><br><span class="line"> *            .A3hH@#5S553&amp;@@#h   i:i9S          #@@@@@@@@@@@@@@@@@@@@@@@@@A. </span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *   </span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p>上面这些都不能满足你，想要找更多的ascii图在这里<a href="http://www.asciiworld.com/">http://www.asciiworld.com/</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>Httprunner源码解读(1)源码模块内容</title>
    <url>/2023/06/10/Httprunner%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-1-%E6%BA%90%E7%A0%81%E6%A8%A1%E5%9D%97%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于团队要基于httprunner开展接口自动化测试，本人后续也想基于httprunner测试框架搭建一个API测试平台，而且目前很多开源的测试平台<br>都是基于httprunner，所以，读懂源码必不可少</p>
<span id="more"></span>

<h3 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h3><p><img src="/../images/h1.png" alt="git.png"></p>
<h4 id="builtin"><a href="#builtin" class="headerlink" title="builtin"></a>builtin</h4><p>这个包做了一些内置的功能</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">├── __init__.<span class="keyword">py</span></span><br><span class="line">├── comparators.<span class="keyword">py</span></span><br><span class="line">└── functions.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>
<ul>
<li>comparators：内置验证校验器</li>
<li>functions：内置的一些方法</li>
</ul>
<h4 id="database"><a href="#database" class="headerlink" title="database"></a>database</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└── engine.py</span><br></pre></td></tr></table></figure>
<p>数据库模块是基于 DBEngine 实现的，用于对测试数据进行存储和管理。它支持多种类型数据库，如 MySQL、PostgreSQL、SQLite 等</p>
<p><strong>engine.py实现了一个数据库引擎类DBEngine，用于连接数据库并执行SQL语句。在初始化时，它会根据传入的数据库URI创建一个SQLAlchemy的engine，<br>并使用sessionmaker创建一个session。在执行SQL语句时，它会根据语句的类型（SELECT、UPDATE、DELETE、INSERT）返回不同的结果。如果是SELECT语句，<br>它会根据size参数返回对应数量的结果，如果size为1，则返回一个字典，否则返回一个字典列表。在返回结果前，它会对结果进行处理，将datetime.datetime<br>和datetime.date类型转换为字符串，将json字符串转换为字典。如果是UPDATE、DELETE、INSERT语句，则返回一个字典，包含受影响的行数。</strong> </p>
<h4 id="ext"><a href="#ext" class="headerlink" title="ext"></a>ext</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── __init__.py</span><br><span class="line">└── uploader</span><br><span class="line">   └── __init__.py</span><br></pre></td></tr></table></figure>
<p>在httprunner基础上集成了别的插件</p>
<ul>
<li><p>uploader：集成了上传文件的功能<br>这是一个名为uploader的HTTPRunner扩展，它提供了上传文件的功能。如果要使用此扩展，需要先安装以下依赖项：</p>
</li>
<li><p>requests_toolbelt</p>
</li>
<li><p>filetype</p>
</li>
</ul>
<p><strong>uploader扩展提供了prepare_upload_step函数，用于预处理上传测试步骤。它会将上传信息替换为MultipartEncoder对象。<br>如果上传信息不存在，则不进行处理。MultipartEncoder对象是使用multipart_encoder函数初始化的，该函数接受上传字段作为参数，<br>并返回一个初始化的MultipartEncoder对象。multipart_content_type函数用于准备请求头的Content-Type。如果依赖项未安装，<br>则会引发ModuleNotFoundError异常。</strong> </p>
<h4 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── data_convertor.py</span><br><span class="line">└── thrift_client.py</span><br></pre></td></tr></table></figure>

<p><strong>thrift 模块是用于支持 Apache Thrift 的模块，可以将 thrift 服务定义文件（.thrift 文件）转换为 Python 代码，并生成可用的客户端和服务端代码。它基于 thrift 的 Python 库进行开发，<br>支持多种类型的 thrift 服务，如 TCP、HTTP 等。</strong></p>
<h4 id="cli-py"><a href="#cli-py" class="headerlink" title="cli.py"></a>cli.py</h4><p>命令行驱动执行</p>
<h4 id="client-py"><a href="#client-py" class="headerlink" title="client.py"></a>client.py</h4><p>客户端相关方法,主要是封装 requests.Session.request,安全调用,输出log等, 给runner.py调用.</p>
<h4 id="compat-py"><a href="#compat-py" class="headerlink" title="compat.py"></a>compat.py</h4><p>提供各种处理兼容性的方法,包括让v2版本的用例能在v3版本继续运行的相关转换方法</p>
<h4 id="config-py"><a href="#config-py" class="headerlink" title="config.py"></a>config.py</h4><p>包含三个类：ConfigThrift、ConfigDB 和 Config。<br>这些类的作用是为 HttpRunner 提供配置信息，包括 Thrift 协议相关的配置信息和数据库相关的配置信息。通过使用这些类，用户可以方便地设置和管理配置信息，从而更好地控制测试用例的执行过程。 </p>
<h4 id="exceptions-py"><a href="#exceptions-py" class="headerlink" title="exceptions.py"></a>exceptions.py</h4><p>定义了失败类型的异常信息</p>
<h4 id="loader-py"><a href="#loader-py" class="headerlink" title="loader.py"></a>loader.py</h4><p>加载文件内容的方法</p>
<h4 id="make-py"><a href="#make-py" class="headerlink" title="make.py"></a>make.py</h4><p>主要集成参数使之生效在测试用例中，如config、request、teststep等等，构成一个可用的用例</p>
<h4 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h4><p>定义各种model类,以BaseModel为父类</p>
<h4 id="parser-py"><a href="#parser-py" class="headerlink" title="parser.py"></a>parser.py</h4><p>各种解析方法，主要用于数值类型判断后自动转换</p>
<h4 id="response-py"><a href="#response-py" class="headerlink" title="response.py"></a>response.py</h4><p>处理响应报文格式</p>
<h4 id="runner-py"><a href="#runner-py" class="headerlink" title="runner.py"></a>runner.py</h4><p>运行项目的核心</p>
<h4 id="step-py"><a href="#step-py" class="headerlink" title="step.py"></a>step.py</h4><p>文件定义了 Step 类，该类表示 HttpRunner 测试用例中的一个步骤，提供了多个属性和方法，用于获取步骤的信息和运行步骤</p>
<h4 id="step-request-py"><a href="#step-request-py" class="headerlink" title="step_request.py"></a>step_request.py</h4><p>用于运行 HttpRunner 测试步骤中的请求</p>
<h4 id="step-sql-request-py"><a href="#step-sql-request-py" class="headerlink" title="step_sql_request.py"></a>step_sql_request.py</h4><p>定义了 run_step_sql_request 函数，该函数表示 HttpRunner 测试用例中的一个 SQL 查询步骤，提供了解析 SQL 查询请求、<br>执行 SQL 查询、提取 SQL 查询结果、更新 step_variables 和验证 SQL 查询结果等功能。 </p>
<h4 id="step-testcase-py"><a href="#step-testcase-py" class="headerlink" title="step_testcase.py"></a>step_testcase.py</h4><p>定义了 StepTestCase 类，该类表示 HttpRunner 测试用例中的一个测试步骤，继承自 Step 类，提供了多个属性和方法，<br>用于获取测试步骤的信息和运行测试步骤</p>
<h4 id="step-thrift-request-py"><a href="#step-thrift-request-py" class="headerlink" title="step_thrift_request.py"></a>step_thrift_request.py</h4><p>定义了 run_step_thrift_request 函数，该函数表示 HttpRunner 测试用例中的一个 Thrift 请求步骤，提供了解析 Thrift 请求、<br>执行 Thrift 请求、提取 Thrift 请求结果、更新 step_variables 和验证 Thrift 请求结果等功能。 </p>
<h4 id="utils-py"><a href="#utils-py" class="headerlink" title="utils.py"></a>utils.py</h4><p>一些工具函数用于处理数据、打印信息等,辅助测试用例的编写和执行，可以在测试用例中直接使用。 </p>
]]></content>
      <categories>
        <category>Httprunner</category>
      </categories>
      <tags>
        <tag>httprunner</tag>
        <tag>接口自动化</tag>
      </tags>
  </entry>
</search>
