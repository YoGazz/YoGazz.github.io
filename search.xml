<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos安装docker教程</title>
    <url>/2023/05/31/Centos%E5%AE%89%E8%A3%85docker%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="一、安装前必读"><a href="#一、安装前必读" class="headerlink" title="一、安装前必读"></a>一、安装前必读</h4><p>在安装 Docker 之前，先说一下配置，我这里是Centos7<br>Linux 内核：官方建议 3.10 以上，3.8以上貌似也可。</p>
<span id="more"></span>

<p>1.查看当前的内核版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>

<p>2.使用 root 权限更新 yum 包（生产环境中此步操作需慎重，看自己情况，学习的话随便搞）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure>

<p>这个命令不是必须执行的，看个人情况，后面出现不兼容的情况的话就必须update了</p>
<p>注意</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y update：升级所有包同时也升级软件和系统内核；</span><br><span class="line">yum -y upgrade：只升级所有包，不升级软件和系统内核</span><br></pre></td></tr></table></figure>

<p>3.卸载旧版本（如果之前安装过的话）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>
<h4 id="二、安装Docker的详细步骤"><a href="#二、安装Docker的详细步骤" class="headerlink" title="二、安装Docker的详细步骤"></a>二、安装Docker的详细步骤</h4><p>1.安装需要的软件包， yum-util 提供yum-config-manager功能，另两个是devicemapper驱动依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<p>2.设置 yum 源</p>
<p>设置一个yum源，下面两个都可用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo（中央仓库）</span><br><span class="line"></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo（阿里仓库）</span><br></pre></td></tr></table></figure>

<p>3.选择docker版本并安装<br>（1）查看可用版本有哪些</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>

<p>（2）选择一个版本并安装：yum install docker-ce-版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce-18.06.0.ce-3.el7</span><br></pre></td></tr></table></figure>

<p>4.启动 Docker 并设置开机自启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装jenkins教程</title>
    <url>/2023/06/01/Docker%E5%AE%89%E8%A3%85jenkins%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="一、jenkins安装"><a href="#一、jenkins安装" class="headerlink" title="一、jenkins安装"></a>一、jenkins安装</h4><p>1.查找，下载jenkins镜像文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search jenkins</span><br></pre></td></tr></table></figure>
<p>下载Jenkins镜像文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>2.创建Jenkins挂载目录并授权权限，这样我们就可以很方便地对容器内的配置文件进行修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/jenkins_home/</span><br><span class="line"></span><br><span class="line">chmod 777 /data/jenkins_home/</span><br></pre></td></tr></table></figure>

<p>3.创建并启动Jenkins容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name jenkins \</span><br><span class="line">  -p 8080:8080 -p 50000:50000 \</span><br><span class="line">  -v /root/Yoga/data/jenkins_home:/var/jenkins_home \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  jenkins/jenkins:lts</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>-d 后台运行镜像</li>
<li>-p 8080:8080 -p 50000:50000 表示将容器内部的 8080 和 50000 端口映射到主机的 8080 和 50000 端口</li>
<li>-v &#x2F;root&#x2F;Yoga&#x2F;data&#x2F;jenkins_home:&#x2F;var&#x2F;jenkins_home &#x2F;var&#x2F;jenkins_home目录为容器jenkins工作目录，我们将硬盘上的一个目录挂载到这个位置，方便后续更新镜像后继续使用原来的工作目录。这里我们设置的就是上面我们创建的 &#x2F;data&#x2F;jenkins_home目录</li>
<li>-e TZ&#x3D;Asia&#x2F;Shanghai 表示设置时区为亚洲上海时区。</li>
<li>–name myjenkins 给容器起一个别名</li>
</ul>
<p>4.查看jenkins是否启动成功，如下图出现端口号，就为启动成功了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -l</span><br></pre></td></tr></table></figure>

<p>5.查看docker容器日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs jenkins</span><br></pre></td></tr></table></figure>

<p>6.配置镜像加速，进入 cd &#x2F;data&#x2F;jenkins_home 目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改hudson.model.UpdateCenter.xml里的内容</span><br><span class="line"></span><br><span class="line">将 url 修改为清华大学官方镜像：https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br></pre></td></tr></table></figure>

<p>7.访问Jenkins页面，输入你的ip加上8090</p>
<p>8.管理员密码获取方法，编辑initialAdminPassword文件查看，把密码输入登录中的密码即可，开始使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /root/Yoga/data/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用详细教程</title>
    <url>/2023/06/05/Git%E4%BD%BF%E7%94%A8%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>现在大部分的开发团队都以 Git 作为自己的版本控制工具，需要对 Git 的使用非常的熟悉。<br>这篇文章中本人整理了自己在工作过程中经常使用到的 Git 命令，方便在偶尔忘记时速查。<br><img src="/../images/git.png" alt="git.png"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Httprunner源码解读(1)源码模块内容</title>
    <url>/2023/06/10/Httprunner%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-1-%E6%BA%90%E7%A0%81%E6%A8%A1%E5%9D%97%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于团队要基于httprunner开展接口自动化测试，本人后续也想基于httprunner测试框架搭建一个API测试平台，而且目前很多开源的测试平台<br>都是基于httprunner，所以，读懂源码必不可少</p>
<span id="more"></span>

<h3 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h3><p><img src="/../images/h1.png" alt="git.png"></p>
<h4 id="builtin"><a href="#builtin" class="headerlink" title="builtin"></a>builtin</h4><p>这个包做了一些内置的功能</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">├── __init__.<span class="keyword">py</span></span><br><span class="line">├── comparators.<span class="keyword">py</span></span><br><span class="line">└── functions.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>
<ul>
<li>comparators：内置验证校验器</li>
<li>functions：内置的一些方法</li>
</ul>
<h4 id="database"><a href="#database" class="headerlink" title="database"></a>database</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└── engine.py</span><br></pre></td></tr></table></figure>
<p>数据库模块是基于 DBEngine 实现的，用于对测试数据进行存储和管理。它支持多种类型数据库，如 MySQL、PostgreSQL、SQLite 等</p>
<p><strong>engine.py实现了一个数据库引擎类DBEngine，用于连接数据库并执行SQL语句。在初始化时，它会根据传入的数据库URI创建一个SQLAlchemy的engine，<br>并使用sessionmaker创建一个session。在执行SQL语句时，它会根据语句的类型（SELECT、UPDATE、DELETE、INSERT）返回不同的结果。如果是SELECT语句，<br>它会根据size参数返回对应数量的结果，如果size为1，则返回一个字典，否则返回一个字典列表。在返回结果前，它会对结果进行处理，将datetime.datetime<br>和datetime.date类型转换为字符串，将json字符串转换为字典。如果是UPDATE、DELETE、INSERT语句，则返回一个字典，包含受影响的行数。</strong> </p>
<h4 id="ext"><a href="#ext" class="headerlink" title="ext"></a>ext</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── __init__.py</span><br><span class="line">└── uploader</span><br><span class="line">   └── __init__.py</span><br></pre></td></tr></table></figure>
<p>在httprunner基础上集成了别的插件</p>
<ul>
<li><p>uploader：集成了上传文件的功能<br>这是一个名为uploader的HTTPRunner扩展，它提供了上传文件的功能。如果要使用此扩展，需要先安装以下依赖项：</p>
</li>
<li><p>requests_toolbelt</p>
</li>
<li><p>filetype</p>
</li>
</ul>
<p><strong>uploader扩展提供了prepare_upload_step函数，用于预处理上传测试步骤。它会将上传信息替换为MultipartEncoder对象。<br>如果上传信息不存在，则不进行处理。MultipartEncoder对象是使用multipart_encoder函数初始化的，该函数接受上传字段作为参数，<br>并返回一个初始化的MultipartEncoder对象。multipart_content_type函数用于准备请求头的Content-Type。如果依赖项未安装，<br>则会引发ModuleNotFoundError异常。</strong> </p>
<h4 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── data_convertor.py</span><br><span class="line">└── thrift_client.py</span><br></pre></td></tr></table></figure>

<p><strong>thrift 模块是用于支持 Apache Thrift 的模块，可以将 thrift 服务定义文件（.thrift 文件）转换为 Python 代码，并生成可用的客户端和服务端代码。它基于 thrift 的 Python 库进行开发，<br>支持多种类型的 thrift 服务，如 TCP、HTTP 等。</strong></p>
<h4 id="cli-py"><a href="#cli-py" class="headerlink" title="cli.py"></a>cli.py</h4><p>命令行驱动执行</p>
<h4 id="client-py"><a href="#client-py" class="headerlink" title="client.py"></a>client.py</h4><p>客户端相关方法,主要是封装 requests.Session.request,安全调用,输出log等, 给runner.py调用.</p>
<h4 id="compat-py"><a href="#compat-py" class="headerlink" title="compat.py"></a>compat.py</h4><p>提供各种处理兼容性的方法,包括让v2版本的用例能在v3版本继续运行的相关转换方法</p>
<h4 id="config-py"><a href="#config-py" class="headerlink" title="config.py"></a>config.py</h4><p>包含三个类：ConfigThrift、ConfigDB 和 Config。<br>这些类的作用是为 HttpRunner 提供配置信息，包括 Thrift 协议相关的配置信息和数据库相关的配置信息。通过使用这些类，用户可以方便地设置和管理配置信息，从而更好地控制测试用例的执行过程。 </p>
<h4 id="exceptions-py"><a href="#exceptions-py" class="headerlink" title="exceptions.py"></a>exceptions.py</h4><p>定义了失败类型的异常信息</p>
<h4 id="loader-py"><a href="#loader-py" class="headerlink" title="loader.py"></a>loader.py</h4><p>加载文件内容的方法</p>
<h4 id="make-py"><a href="#make-py" class="headerlink" title="make.py"></a>make.py</h4><p>主要集成参数使之生效在测试用例中，如config、request、teststep等等，构成一个可用的用例</p>
<h4 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h4><p>定义各种model类,以BaseModel为父类</p>
<h4 id="parser-py"><a href="#parser-py" class="headerlink" title="parser.py"></a>parser.py</h4><p>各种解析方法，主要用于数值类型判断后自动转换</p>
<h4 id="response-py"><a href="#response-py" class="headerlink" title="response.py"></a>response.py</h4><p>处理响应报文格式</p>
<h4 id="runner-py"><a href="#runner-py" class="headerlink" title="runner.py"></a>runner.py</h4><p>运行项目的核心</p>
<h4 id="step-py"><a href="#step-py" class="headerlink" title="step.py"></a>step.py</h4><p>文件定义了 Step 类，该类表示 HttpRunner 测试用例中的一个步骤，提供了多个属性和方法，用于获取步骤的信息和运行步骤</p>
<h4 id="step-request-py"><a href="#step-request-py" class="headerlink" title="step_request.py"></a>step_request.py</h4><p>用于运行 HttpRunner 测试步骤中的请求</p>
<h4 id="step-sql-request-py"><a href="#step-sql-request-py" class="headerlink" title="step_sql_request.py"></a>step_sql_request.py</h4><p>定义了 run_step_sql_request 函数，该函数表示 HttpRunner 测试用例中的一个 SQL 查询步骤，提供了解析 SQL 查询请求、<br>执行 SQL 查询、提取 SQL 查询结果、更新 step_variables 和验证 SQL 查询结果等功能。 </p>
<h4 id="step-testcase-py"><a href="#step-testcase-py" class="headerlink" title="step_testcase.py"></a>step_testcase.py</h4><p>定义了 StepTestCase 类，该类表示 HttpRunner 测试用例中的一个测试步骤，继承自 Step 类，提供了多个属性和方法，<br>用于获取测试步骤的信息和运行测试步骤</p>
<h4 id="step-thrift-request-py"><a href="#step-thrift-request-py" class="headerlink" title="step_thrift_request.py"></a>step_thrift_request.py</h4><p>定义了 run_step_thrift_request 函数，该函数表示 HttpRunner 测试用例中的一个 Thrift 请求步骤，提供了解析 Thrift 请求、<br>执行 Thrift 请求、提取 Thrift 请求结果、更新 step_variables 和验证 Thrift 请求结果等功能。 </p>
<h4 id="utils-py"><a href="#utils-py" class="headerlink" title="utils.py"></a>utils.py</h4><p>一些工具函数用于处理数据、打印信息等,辅助测试用例的编写和执行，可以在测试用例中直接使用。 </p>
]]></content>
      <categories>
        <category>Httprunner</category>
      </categories>
      <tags>
        <tag>httprunner</tag>
        <tag>接口自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>Httprunner源码解读(2)models.py</title>
    <url>/2023/06/11/Httprunner%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-2-models-py/</url>
    <content><![CDATA[<h3 id="models-py的代码结构"><a href="#models-py的代码结构" class="headerlink" title="models.py的代码结构"></a>models.py的代码结构</h3><p><img src="/../images/models.png" alt="img.png"><br><strong>这个模块中定义了12个属性和29个模型类</strong><br><strong>文件主要包含了一系列用于描述测试配置、请求和响应的数据模型类。这些数据模型通常继承自 Pydantic’s BaseModel 类，它们用于实现类型检查、数据验证以及序列化和反序列化等功能。</strong></p>
<span id="more"></span>

<p><strong><code>models.py</code> 中的数据模型提供了以下几个方面的功能：</strong></p>
<ul>
<li>定义测试用例的数据结构：通过创建数据模型来表示测试用例的各个组成部分，如配置、请求、响应和变量等。</li>
<li>类型检查和数据验证：利用 <code>Pydantic</code> 提供的类型检查和验证机制，确保从 YAML&#x2F;JSON 测试用例文件中加载的数据符合预期格式和约束。</li>
<li>序列化与反序列化：<code>Pydantic</code> 数据模型可以轻松地将 Python 对象转换为 JSON 格式，或者将 JSON 数据反序列化为 Python 对象。</li>
<li>总的来说，models.py 文件对 HttpRunner 的整个测试流程提供了结构支持，确保了测试用例以一种结构化、可靠且易于解析的方式进行编写和执行。通过使用这些数据模型，HttpRunner 可以更容易地处理、验证和操作来自测试用例文件的数据。</li>
</ul>
<p><strong><code>BaseModel</code> 是一个pydantic的基础类，用于数据验证和序列化。它的作用主要包括：</strong></p>
<ul>
<li>类型检查：确保输入数据符合预期类型。</li>
<li>数据验证：根据模型中定义的限制条件对输入数据进行验证。</li>
<li>默认值设置：自动为缺失字段提供默认值。</li>
<li>序列化与反序列化：将 Python 对象转换为 JSON 格式，以及从 JSON 转换回 Python 对象。</li>
<li>通过继承 <code>BaseModel</code> 并定义字段，用户可以轻松构建自己的数据模型。这有助于减少代码错误、提高数据质量和简化数据处理流程。</li>
</ul>
<h3 id="属性源码分析"><a href="#属性源码分析" class="headerlink" title="属性源码分析"></a>属性源码分析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">from enum import Enum</span><br><span class="line">from typing import Any, Callable, Dict, List, Text, Union</span><br><span class="line"></span><br><span class="line">from pydantic import BaseModel, Field, HttpUrl</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Text =&gt; str / 文本</span><br><span class="line">List =&gt; list / 列表</span><br><span class="line">Dict =&gt; dict / 字典</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">Name = Text</span><br><span class="line">Url = Text</span><br><span class="line">BaseUrl = Union[HttpUrl, Text]</span><br><span class="line">VariablesMapping = Dict[Text, Any]</span><br><span class="line">FunctionsMapping = Dict[Text, Callable]</span><br><span class="line">Headers = Dict[Text, Text]</span><br><span class="line">Cookies = Dict[Text, Text]</span><br><span class="line">Verify = bool</span><br><span class="line">Hooks = List[Union[Text, Dict[Text, Text]]]</span><br><span class="line">Export = List[Text]</span><br><span class="line">Validators = List[Dict]</span><br><span class="line">Env = Dict[Text, Any]</span><br></pre></td></tr></table></figure>
<p><strong>用到了typing和pydantic模块，定义了这些属性的类型</strong></p>
<h3 id="模型类源码分析"><a href="#模型类源码分析" class="headerlink" title="模型类源码分析"></a>模型类源码分析</h3><h4 id="MethodEnum"><a href="#MethodEnum" class="headerlink" title="MethodEnum"></a>MethodEnum</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MethodEnum(Text, Enum):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类，常用请求的方式</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    GET = &quot;GET&quot;</span><br><span class="line">    POST = &quot;POST&quot;</span><br><span class="line">    PUT = &quot;PUT&quot;</span><br><span class="line">    DELETE = &quot;DELETE&quot;</span><br><span class="line">    HEAD = &quot;HEAD&quot;</span><br><span class="line">    OPTIONS = &quot;OPTIONS&quot;</span><br><span class="line">    PATCH = &quot;PATCH&quot;</span><br></pre></td></tr></table></figure>

<h4 id="ProtoType"><a href="#ProtoType" class="headerlink" title="ProtoType"></a>ProtoType</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ProtoType(Enum):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类，请求数据类型</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Binary = 1</span><br><span class="line">    CyBinary = 2</span><br><span class="line">    Compact = 3</span><br><span class="line">    Json = 4</span><br></pre></td></tr></table></figure>

<h4 id="TransType"><a href="#TransType" class="headerlink" title="TransType"></a>TransType</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ProtoType(Enum):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类，请求数据类型</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Binary = 1</span><br><span class="line">    CyBinary = 2</span><br><span class="line">    Compact = 3</span><br><span class="line">    Json = 4</span><br></pre></td></tr></table></figure>

<h4 id="TransType-1"><a href="#TransType-1" class="headerlink" title="TransType"></a>TransType</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TransType(Enum):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类，它定义了 thrift 协议中数据传输类型</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Buffered = 1</span><br><span class="line">    CyBuffered = 2</span><br><span class="line">    Framed = 3</span><br><span class="line">    CyFramed = 4</span><br></pre></td></tr></table></figure>

<h4 id="TConfigThrift"><a href="#TConfigThrift" class="headerlink" title="TConfigThrift"></a>TConfigThrift</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TConfigThrift(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类, 定义TConfigThrift 的数据模型</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    psm: Text = None</span><br><span class="line">    env: Text = None</span><br><span class="line">    cluster: Text = None</span><br><span class="line">    target: Text = None</span><br><span class="line">    include_dirs: List[Text] = None</span><br><span class="line">    thrift_client: Any = None</span><br><span class="line">    timeout: int = 10</span><br><span class="line">    idl_path: Text = None</span><br><span class="line">    method: Text = None</span><br><span class="line">    ip: Text = &quot;127.0.0.1&quot;</span><br><span class="line">    port: int = 9000</span><br><span class="line">    service_name: Text = None</span><br><span class="line">    proto_type: ProtoType = ProtoType.Binary</span><br><span class="line">    trans_type: TransType = TransType.Buffered</span><br></pre></td></tr></table></figure>

<h4 id="TConfigDB"><a href="#TConfigDB" class="headerlink" title="TConfigDB"></a>TConfigDB</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TConfigDB(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类, 定义用于存储与数据库相关的配置信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    psm: Text = None</span><br><span class="line">    user: Text = None</span><br><span class="line">    password: Text = None</span><br><span class="line">    ip: Text = None</span><br><span class="line">    port: int = 3306</span><br><span class="line">    database: Text = None</span><br></pre></td></tr></table></figure>

<h4 id="TransportEnum"><a href="#TransportEnum" class="headerlink" title="TransportEnum"></a>TransportEnum</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TransportEnum(Text, Enum):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类,继承自 Text 和 Enum。它定义了两个枚举值：BUFFERED 和 FRAMED，分别表示缓冲传输和帧传输。枚举值的类型是 Text，</span><br><span class="line">    因此它们可以是任何字符串。枚举类的作用是为 HttpRunner 提供传输类型的选择</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    BUFFERED = &quot;buffered&quot;</span><br><span class="line">    FRAMED = &quot;framed&quot;</span><br></pre></td></tr></table></figure>

<h4 id="TThriftRequest"><a href="#TThriftRequest" class="headerlink" title="TThriftRequest"></a>TThriftRequest</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TThriftRequest(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    rpc request model</span><br><span class="line">    内置枚举类，它继承自 BaseModel。它定义了一些属性，用于表示 Thrift 请求的相关信息，包括方法名、参数、Thrift 客户端、IDL 文件路径、</span><br><span class="line">    超时时间、传输类型、目标地址、环境、集群、PSM、服务名、IP、端口、协议类型和传输类型等。这些属性都有默认值，可以通过实例化对象来设置它们的值</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    method: Text = &quot;&quot;</span><br><span class="line">    params: Dict = &#123;&#125;</span><br><span class="line">    thrift_client: Any = None</span><br><span class="line">    idl_path: Text = &quot;&quot;  # idl local path</span><br><span class="line">    timeout: int = 10  # sec</span><br><span class="line">    transport: TransportEnum = TransportEnum.BUFFERED</span><br><span class="line">    include_dirs: List[Union[Text, None]] = []  # param of thriftpy2.load</span><br><span class="line">    target: Text = &quot;&quot;  # tcp://&#123;ip&#125;:&#123;port&#125; or sd://psm?cluster=xx&amp;env=xx</span><br><span class="line">    env: Text = &quot;prod&quot;</span><br><span class="line">    cluster: Text = &quot;default&quot;</span><br><span class="line">    psm: Text = &quot;&quot;</span><br><span class="line">    service_name: Text = None</span><br><span class="line">    ip: Text = None</span><br><span class="line">    port: int = None</span><br><span class="line">    proto_type: ProtoType = None</span><br><span class="line">    trans_type: TransType = None</span><br></pre></td></tr></table></figure>

<h4 id="SqlMethodEnum"><a href="#SqlMethodEnum" class="headerlink" title="SqlMethodEnum"></a>SqlMethodEnum</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class SqlMethodEnum(Text, Enum):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类，它继承自 Text 和 Enum。它定义了一些枚举值，用于表示 SQL 操作的类型，包括 FETCHONE、FETCHMANY、FETCHALL、INSERT、UPDATE 和 DELETE。</span><br><span class="line">    这些枚举值可以通过实例化对象来访问，以执行相应的 SQL 操作</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    FETCHONE = &quot;FETCHONE&quot;</span><br><span class="line">    FETCHMANY = &quot;FETCHMANY&quot;</span><br><span class="line">    FETCHALL = &quot;FETCHALL&quot;</span><br><span class="line">    INSERT = &quot;INSERT&quot;</span><br><span class="line">    UPDATE = &quot;UPDATE&quot;</span><br><span class="line">    DELETE = &quot;DELETE&quot;</span><br></pre></td></tr></table></figure>

<h4 id="TSqlRequest"><a href="#TSqlRequest" class="headerlink" title="TSqlRequest"></a>TSqlRequest</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TSqlRequest(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    sql request model</span><br><span class="line">    内置枚举类, 它继承自 BaseModel。它定义了一些属性，用于表示 SQL 请求的相关信息，包括数据库配置、SQL 操作类型、SQL 语句和结果集大小等。其中，db_config 属性表示数据库配置信息，</span><br><span class="line">    它是一个 TConfigDB 类型的对象，包括 PSM、用户名、密码、IP、端口和数据库名等。method 属性表示 SQL 操作类型，它是一个 SqlMethodEnum 类型的枚举值，包括 FETCHONE、FETCHMANY、FETCHALL、</span><br><span class="line">    INSERT、UPDATE 和 DELETE。sql 属性表示 SQL 语句，size 属性表示结果集大小，用于限制 SQL 查询结果的数量。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    db_config: TConfigDB = TConfigDB()</span><br><span class="line">    method: SqlMethodEnum = None</span><br><span class="line">    sql: Text = None</span><br><span class="line">    size: int = 0  # limit nums of sql result</span><br></pre></td></tr></table></figure>

<h4 id="TConfig"><a href="#TConfig" class="headerlink" title="TConfig"></a>TConfig</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TConfig(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    内置枚举类</span><br><span class="line">    它定义了一些属性，用于表示 HttpRunner 的配置信息，包括名称、验证、基础 URL、变量、参数、导出变量、路径、Thrift 配置和数据库配置等。</span><br><span class="line">    其中，name 属性表示配置对象的名称，</span><br><span class="line">    verify 属性表示是否验证 SSL 证书，</span><br><span class="line">    base_url 属性表示基础 URL，</span><br><span class="line">    variables 属性表示变量，可以是一个字典或者是一个字符串，字符串表示变量的 Python 代码，</span><br><span class="line">    parameters 属性表示参数，可以是一个字典或者是一个字符串，字符串表示参数的 Python 代码，export 属性表示导出变量的名称列表，</span><br><span class="line">    path 属性表示配置文件的路径，</span><br><span class="line">    thrift 属性表示 Thrift 配置信息，是一个 TConfigThrift 类型的对象，</span><br><span class="line">    db 属性表示数据库配置信息，是一个 TConfigDB 类型的对象。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    name: Name</span><br><span class="line">    verify: Verify = False</span><br><span class="line">    base_url: BaseUrl = &quot;&quot;</span><br><span class="line">    # Text: prepare variables in debugtalk.py, $&#123;gen_variables()&#125;</span><br><span class="line">    variables: Union[VariablesMapping, Text] = &#123;&#125;</span><br><span class="line">    parameters: Union[VariablesMapping, Text] = &#123;&#125;</span><br><span class="line">    # setup_hooks: Hooks = []</span><br><span class="line">    # teardown_hooks: Hooks = []</span><br><span class="line">    export: Export = []</span><br><span class="line">    path: Text = None</span><br><span class="line">    # configs for other protocols</span><br><span class="line">    thrift: TConfigThrift = None</span><br><span class="line">    db: TConfigDB = TConfigDB()</span><br></pre></td></tr></table></figure>

<h4 id="TRequest"><a href="#TRequest" class="headerlink" title="TRequest"></a>TRequest</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TRequest(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    requests.Request model</span><br><span class="line">    内置枚举类</span><br><span class="line">    它继承自 BaseModel。它定义了一些属性，用于表示 HTTP 请求的相关信息，包括请求方法、URL、查询参数、请求头、请求体、数据、超时时间、重定向、SSL 验证和上传文件等。</span><br><span class="line">    method 属性表示请求方法，它是一个 MethodEnum 类型的枚举值，包括 GET、POST、PUT、DELETE、HEAD、OPTIONS、PATCH 和 TRACE。</span><br><span class="line">    url 属性表示请求的 URL，</span><br><span class="line">    params 属性表示查询参数，headers 属性表示请求头，</span><br><span class="line">    req_json 属性表示请求体，可以是一个字典、列表或者字符串，字符串表示请求体的 JSON 格式的字符串，</span><br><span class="line">    data 属性表示请求数据，可以是一个字典或者字符串，字符串表示请求数据的 Python 代码，</span><br><span class="line">    cookies 属性表示请求的 cookies，</span><br><span class="line">    timeout 属性表示超时时间，</span><br><span class="line">    allow_redirects 属性表示是否允许重定向，</span><br><span class="line">    verify 属性表示是否验证 SSL 证书，</span><br><span class="line">    upload 属性表示上传文件的信息，是一个字典，包括文件名、文件路径和文件类型等。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    method: MethodEnum</span><br><span class="line">    url: Url</span><br><span class="line">    params: Dict[Text, Text] = &#123;&#125;</span><br><span class="line">    headers: Headers = &#123;&#125;</span><br><span class="line">    req_json: Union[Dict, List, Text] = Field(None, alias=&quot;json&quot;)</span><br><span class="line">    data: Union[Text, Dict[Text, Any]] = None</span><br><span class="line">    cookies: Cookies = &#123;&#125;</span><br><span class="line">    timeout: float = 120</span><br><span class="line">    allow_redirects: bool = True</span><br><span class="line">    verify: Verify = False</span><br><span class="line">    upload: Dict = &#123;&#125;  # used for upload files</span><br></pre></td></tr></table></figure>

<h4 id="TStep"><a href="#TStep" class="headerlink" title="TStep"></a>TStep</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TStep(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    测试步骤，里面包含了request请求</span><br><span class="line">    它继承自 BaseModel。它定义了一些属性，用于表示测试步骤的相关信息，包括名称、请求、测试用例、变量、setup 和 teardown 钩子、提取变量、导出变量、验证器、验证脚本、重试次数、重试间隔、Thrift 请求和 SQL 请求等。</span><br><span class="line">    其中，name 属性表示测试步骤的名称，</span><br><span class="line">    request 属性表示 HTTP 请求的相关信息，是一个 TRequest 类型的对象，</span><br><span class="line">    testcase 属性表示测试用例，可以是一个字符串或者是一个函数，字符串表示测试用例的 Python 代码，函数表示测试用例的函数对象，</span><br><span class="line">    variables 属性表示变量，是一个字典，setup_hooks 属性表示 setup 钩子，是一个列表，列表中的元素可以是字符串或者是函数，字符串表示 setup 钩子的 Python 代码，函数表示 setup 钩子的函数对象，t</span><br><span class="line">    eardown_hooks 属性表示 teardown 钩子，是一个列表，列表中的元素可以是字符串或者是函数，字符串表示 teardown 钩子的 Python 代码，函数表示 teardown 钩子的函数对象，</span><br><span class="line">    extract 属性表示提取变量，是一个字典，export 属性表示导出变量，是一个列表，列表中的元素是字符串，表示要导出的变量名，</span><br><span class="line">    validators 属性表示验证器，是一个列表，列表中的元素是一个字典，表示验证器的相关信息，validate_script 属性表示验证脚本，是一个列表，列表中的元素是字符串，表示验证脚本的 Python 代码，</span><br><span class="line">    retry_times 属性表示重试次数，</span><br><span class="line">    retry_interval 属性表示重试间隔，</span><br><span class="line">    thrift_request 属性表示 Thrift 请求的相关信息，是一个 TThriftRequest 类型的对象，</span><br><span class="line">    sql_request 属性表示 SQL 请求的相关信息，是一个 TSqlRequest 类型的对象。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    name: Name</span><br><span class="line">    request: Union[TRequest, None] = None</span><br><span class="line">    testcase: Union[Text, Callable, None] = None</span><br><span class="line">    variables: VariablesMapping = &#123;&#125;</span><br><span class="line">    setup_hooks: Hooks = []</span><br><span class="line">    teardown_hooks: Hooks = []</span><br><span class="line">    # used to extract request&#x27;s response field</span><br><span class="line">    extract: VariablesMapping = &#123;&#125;</span><br><span class="line">    # used to export session variables from referenced testcase</span><br><span class="line">    export: Export = []</span><br><span class="line">    validators: Validators = Field([], alias=&quot;validate&quot;)</span><br><span class="line">    validate_script: List[Text] = []</span><br><span class="line">    retry_times: int = 0</span><br><span class="line">    retry_interval: int = 0  # sec</span><br><span class="line">    thrift_request: Union[TThriftRequest, None] = None</span><br><span class="line">    sql_request: Union[TSqlRequest, None] = None</span><br></pre></td></tr></table></figure>
<p><strong>这个类的作用是定义测试步骤的相关信息，方便用户进行接口测试。用户可以通过实例化对象来设置这些属性的值，然后将对象传递给 HttpRunner 类的相应方法，<br>以执行相应的接口测试。在执行接口测试之前，用户需要先创建一个 HttpRunner 对象，并将配置信息传递给它。然后，用户可以通过调用 HttpRunner 对象的相应方法，<br>传递 TStep 对象作为参数，来执行相应的接口测试。在执行测试步骤之前，用户需要先创建一个 TRequest 对象，并将 HTTP 请求的相关信息传递给它。<br>然后，用户可以通过设置 TStep 对象的 request 属性，将 TRequest 对象作为参数传递给它，来定义测试步骤的 HTTP 请求。如果用户需要在测试步骤中执行测试用例，<br>可以将测试用例的 Python 代码或者函数对象作为参数传递给 TStep 对象的 testcase 属性。如果用户需要在测试步骤中执行 setup 或 teardown 钩子，可以将钩子的<br>Python 代码或者函数对象作为参数传递给 TStep 对象的 setup_hooks 或 teardown_hooks 属性。如果用户需要在测试步骤中提取变量，可以将变量名和提取规则作为参数传递给<br>TStep 对象的 extract 属性。如果用户需要在测试步骤中导出变量，可以将变量名作为参数传递给 TStep 对象的 export 属性。如果用户需要在测试步骤中执行验证器，可以将验证器<br>的相关信息作为参数传递给 TStep 对象的 validators 属性。如果用户需要在测试步骤中执行验证脚本，可以将验证脚本的 Python 代码作为参数传递给 TStep 对象的 validate_script 属性。<br>如果用户需要在测试步骤中执行重试操作，可以将重试次数和重试间隔作为参数传递给 TStep 对象的 retry_times 和 retry_interval 属性。如果用户需要在测试步骤中执行 Thrift 请求，<br>可以将 Thrift 请求的相关信息作为参数传递给 TStep 对象的 thrift_request 属性。如果用户需要在测试步骤中执行 SQL 请求，可以将 SQL 请求的相关信息作为参数传递给 TStep 对象的 sql_request 属性。</strong></p>
<h4 id="TestCase"><a href="#TestCase" class="headerlink" title="TestCase"></a>TestCase</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TestCase(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    测试用例，包含了测试步骤和配置信息</span><br><span class="line">    它定义了一些属性，用于表示测试用例的相关信息，包括配置信息和测试步骤等。</span><br><span class="line">    config 属性表示配置信息，是一个 TConfig 类型的对象，</span><br><span class="line">    teststeps 属性表示测试步骤，是一个 TStep 类型的对象的列表。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    config: TConfig</span><br><span class="line">    teststeps: List[TStep]</span><br></pre></td></tr></table></figure>

<h4 id="ProjectMeta"><a href="#ProjectMeta" class="headerlink" title="ProjectMeta"></a>ProjectMeta</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ProjectMeta(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    项目结构</span><br><span class="line">    定义了一些属性，用于表示项目的相关信息，</span><br><span class="line">     debugtalk.py 文件的内容和路径、.env 文件的路径、在 debugtalk.py 中定义的函数、环境变量和项目根目录等。</span><br><span class="line">     其中，debugtalk_py 属性表示 debugtalk.py 文件的内容，</span><br><span class="line">     debugtalk_path 属性表示 debugtalk.py 文件的路径，</span><br><span class="line">     dot_env_path 属性表示 .env 文件的路径，</span><br><span class="line">     functions 属性表示在 debugtalk.py 中定义的函数，是一个字典，</span><br><span class="line">     env 属性表示环境变量，是一个字典，</span><br><span class="line">     RootDir 属性表示项目根目录，是一个字符串，表示 debugtalk.py 文件所在的目录。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    debugtalk_py: Text = &quot;&quot;  # debugtalk.py file content</span><br><span class="line">    debugtalk_path: Text = &quot;&quot;  # debugtalk.py file path</span><br><span class="line">    dot_env_path: Text = &quot;&quot;  # .env file path</span><br><span class="line">    functions: FunctionsMapping = &#123;&#125;  # functions defined in debugtalk.py</span><br><span class="line">    env: Env = &#123;&#125;</span><br><span class="line">    RootDir: Text = (</span><br><span class="line">        os.getcwd()</span><br><span class="line">    )  # project root directory (ensure absolute), the path debugtalk.py located</span><br></pre></td></tr></table></figure>

<h4 id="TestsMapping"><a href="#TestsMapping" class="headerlink" title="TestsMapping"></a>TestsMapping</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TestsMapping(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    测试映射</span><br><span class="line">    1.project_meta</span><br><span class="line">    2.testcases 测试用例集，list下有多个用例</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    project_meta: ProjectMeta</span><br><span class="line">    testcases: List[TestCase]</span><br></pre></td></tr></table></figure>

<h4 id="TestCaseTime"><a href="#TestCaseTime" class="headerlink" title="TestCaseTime"></a>TestCaseTime</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TestCaseTime(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    测试用例时间</span><br><span class="line">    1.start_at：开始时间默认为0</span><br><span class="line">    2.start_at_iso_format：以iso格式启动</span><br><span class="line">    3.duration：持续时间</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    start_at: float = 0</span><br><span class="line">    start_at_iso_format: Text = &quot;&quot;</span><br><span class="line">    duration: float = 0</span><br></pre></td></tr></table></figure>

<h4 id="TestCaseInOut"><a href="#TestCaseInOut" class="headerlink" title="TestCaseInOut"></a>TestCaseInOut</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TestCaseInOut(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    测试用例的输入输出：</span><br><span class="line">    config_vars：配置变量</span><br><span class="line">    export_vars：导出变量</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    config_vars: VariablesMapping = &#123;&#125;</span><br><span class="line">    export_vars: Dict = &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="RequestStat"><a href="#RequestStat" class="headerlink" title="RequestStat"></a>RequestStat</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class RequestStat(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    请求指标：</span><br><span class="line">    content_size：内容大小</span><br><span class="line">    response_time_ms：响应时间(ms)</span><br><span class="line">    elapsed_ms：逝去的时间(ms)</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    content_size: float = 0</span><br><span class="line">    response_time_ms: float = 0</span><br><span class="line">    elapsed_ms: float = 0</span><br></pre></td></tr></table></figure>

<h4 id="AddressData"><a href="#AddressData" class="headerlink" title="AddressData"></a>AddressData</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class AddressData(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    客户端与服务器地址数据</span><br><span class="line">    client_ip：客户端ip地址</span><br><span class="line">    client_port：客户端端口号</span><br><span class="line">    server_ip：服务器ip地址</span><br><span class="line">    server_port：服务器端口号</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    client_ip: Text = &quot;N/A&quot;</span><br><span class="line">    client_port: int = 0</span><br><span class="line">    server_ip: Text = &quot;N/A&quot;</span><br><span class="line">    server_port: int = 0</span><br></pre></td></tr></table></figure>

<h4 id="RequestData"><a href="#RequestData" class="headerlink" title="RequestData"></a>RequestData</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class RequestData(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    请求数据</span><br><span class="line">    method：请求方法，默认为GET</span><br><span class="line">    url：url地址</span><br><span class="line">    headers：请求头</span><br><span class="line">    cookies：cookie信息</span><br><span class="line">    body：请求体</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    method: MethodEnum = MethodEnum.GET</span><br><span class="line">    url: Url</span><br><span class="line">    headers: Headers = &#123;&#125;</span><br><span class="line">    cookies: Cookies = &#123;&#125;</span><br><span class="line">    body: Union[Text, bytes, List, Dict, None] = &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ResponseData"><a href="#ResponseData" class="headerlink" title="ResponseData"></a>ResponseData</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ResponseData(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    响应数据</span><br><span class="line">    status_code：状态码</span><br><span class="line">    headers：响应头</span><br><span class="line">    cookies：cookie信息</span><br><span class="line">    encoding：编码格式</span><br><span class="line">    content_type：内容类型</span><br><span class="line">    body：响应体</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    status_code: int</span><br><span class="line">    headers: Dict</span><br><span class="line">    cookies: Cookies</span><br><span class="line">    encoding: Union[Text, None] = None</span><br><span class="line">    content_type: Text</span><br><span class="line">    body: Union[Text, bytes, List, Dict, None]</span><br></pre></td></tr></table></figure>

<h4 id="ReqRespData"><a href="#ReqRespData" class="headerlink" title="ReqRespData"></a>ReqRespData</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ReqRespData(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    请求响应数据</span><br><span class="line">    request：RequestData</span><br><span class="line">    response：ResponseData</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    request: RequestData</span><br><span class="line">    response: ResponseData</span><br></pre></td></tr></table></figure>

<h4 id="SessionData"><a href="#SessionData" class="headerlink" title="SessionData"></a>SessionData</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class SessionData(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    request session data, including request, response, validators and stat data</span><br><span class="line">    它定义了一些属性，用于表示请求会话数据，包括请求、响应、验证器和统计数据等。</span><br><span class="line">    success 属性表示请求是否成功，是一个布尔值，</span><br><span class="line">    req_resps 属性表示请求和响应数据，是一个 ReqRespData 类型的对象的列表，</span><br><span class="line">    stat 属性表示请求统计数据，是一个 RequestStat 类型的对象，</span><br><span class="line">    address 属性表示请求地址数据，是一个 AddressData 类型的对象，</span><br><span class="line">    validators 属性表示验证器，是一个字典</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    success: bool = False</span><br><span class="line">    # in most cases, req_resps only contains one request &amp; response</span><br><span class="line">    # while when 30X redirect occurs, req_resps will contain multiple request &amp; response</span><br><span class="line">    req_resps: List[ReqRespData] = []</span><br><span class="line">    stat: RequestStat = RequestStat()</span><br><span class="line">    address: AddressData = AddressData()</span><br><span class="line">    validators: Dict = &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="StepResult"><a href="#StepResult" class="headerlink" title="StepResult"></a>StepResult</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class StepResult(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    teststep data, each step maybe corresponding to one request or one testcase</span><br><span class="line">    它定义了一些属性，用于表示测试步骤的相关信息，包括测试步骤名称、测试步骤类型、请求会话数据、测试步骤执行时间、响应内容大小、导出变量和附件等。其中，</span><br><span class="line">    name 属性表示测试步骤名称，是一个字符串，</span><br><span class="line">    step_type 属性表示测试步骤类型，是一个字符串，</span><br><span class="line">    success 属性表示测试步骤是否成功，是一个布尔值，</span><br><span class="line">    data 属性表示请求会话数据，是一个 SessionData 类型的对象或 StepResult 类型的对象的列表，</span><br><span class="line">    elapsed 属性表示测试步骤执行时间，是一个浮点数，</span><br><span class="line">    content_size 属性表示响应内容大小，是一个浮点数，</span><br><span class="line">    export_vars 属性表示导出变量，是一个字典，</span><br><span class="line">    attachment 属性表示测试步骤的附件，是一个字符串。</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    name: Text = &quot;&quot;  # teststep name</span><br><span class="line">    step_type: Text = &quot;&quot;  # teststep type, request or testcase</span><br><span class="line">    success: bool = False</span><br><span class="line">    data: Union[SessionData, List[&quot;StepResult&quot;]] = None</span><br><span class="line">    elapsed: float = 0.0  # teststep elapsed time</span><br><span class="line">    content_size: float = 0  # response content size</span><br><span class="line">    export_vars: VariablesMapping = &#123;&#125;</span><br><span class="line">    attachment: Text = &quot;&quot;  # teststep attachment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">StepResult.update_forward_refs()</span><br></pre></td></tr></table></figure>

<h4 id="IStep"><a href="#IStep" class="headerlink" title="IStep"></a>IStep</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class IStep(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    它定义了一些方法，用于表示测试步骤的相关信息，包括测试步骤名称、测试步骤类型、测试步骤结构和测试步骤执行等。</span><br><span class="line">    name 方法返回测试步骤名称，是一个字符串，</span><br><span class="line">    type 方法返回测试步骤类型，是一个字符串，</span><br><span class="line">    struct 方法返回测试步骤结构，是一个 TStep 类型的对象，</span><br><span class="line">    run 方法用于执行测试步骤，接受一个 runner 参数，返回一个 StepResult 类型的对象。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    </span><br><span class="line">    def name(self) -&gt; str:</span><br><span class="line">        raise NotImplementedError</span><br><span class="line"></span><br><span class="line">    def type(self) -&gt; str:</span><br><span class="line">        raise NotImplementedError</span><br><span class="line"></span><br><span class="line">    def struct(self) -&gt; TStep:</span><br><span class="line">        raise NotImplementedError</span><br><span class="line"></span><br><span class="line">    def run(self, runner) -&gt; StepResult:</span><br><span class="line">        # runner: HttpRunner</span><br><span class="line">        raise NotImplementedError</span><br></pre></td></tr></table></figure>

<h4 id="TestCaseSummary"><a href="#TestCaseSummary" class="headerlink" title="TestCaseSummary"></a>TestCaseSummary</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class PlatformInfo(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    平台信息</span><br><span class="line">    httprunner_version：httprunner版本号</span><br><span class="line">    python_version：python版本</span><br><span class="line">    platform：平台</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    httprunner_version: Text</span><br><span class="line">    python_version: Text</span><br><span class="line">    platform: Text</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="PlatformInfo"><a href="#PlatformInfo" class="headerlink" title="PlatformInfo"></a>PlatformInfo</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class PlatformInfo(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    平台信息</span><br><span class="line">    httprunner_version：httprunner版本号</span><br><span class="line">    python_version：python版本</span><br><span class="line">    platform：平台</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    httprunner_version: Text</span><br><span class="line">    python_version: Text</span><br><span class="line">    platform: Text</span><br></pre></td></tr></table></figure>

<h4 id="Stat"><a href="#Stat" class="headerlink" title="Stat"></a>Stat</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Stat(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    统计信息</span><br><span class="line">    total：总数</span><br><span class="line">    success：成功的用例数</span><br><span class="line">    fail：失败的用例数</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    total: int = 0</span><br><span class="line">    success: int = 0</span><br><span class="line">    fail: int = 0</span><br></pre></td></tr></table></figure>

<h4 id="TestSuiteSummary"><a href="#TestSuiteSummary" class="headerlink" title="TestSuiteSummary"></a>TestSuiteSummary</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class TestSuiteSummary(BaseModel):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    测试套件结果</span><br><span class="line">    success：成功的状态</span><br><span class="line">    stat：统计信息</span><br><span class="line">    time：测试用例花费的时间</span><br><span class="line">    platform：平台信息</span><br><span class="line">    testcases：测试用例集</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    success: bool = False</span><br><span class="line">    stat: Stat = Stat()</span><br><span class="line">    time: TestCaseTime = TestCaseTime()</span><br><span class="line">    platform: PlatformInfo</span><br><span class="line">    testcases: List[TestCaseSummary]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Httprunner</category>
      </categories>
      <tags>
        <tag>httprunner</tag>
        <tag>接口自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>Httprunner源码解读(3)client.py</title>
    <url>/2023/06/12/Httprunner%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-3-client-py/</url>
    <content><![CDATA[<h3 id="client-py的代码结构"><a href="#client-py的代码结构" class="headerlink" title="client.py的代码结构"></a>client.py的代码结构</h3><p><img src="/../images/client.png" alt="img.png"><br><strong>这个模块中定义了2个类和1个方法</strong></p>
<h4 id="ApiResponse类"><a href="#ApiResponse类" class="headerlink" title="ApiResponse类"></a>ApiResponse类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ApiResponse(Response):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    继承Response 类，重写了raise_for_status方法，用于检查响应是否包含错误信息，并在响应中包含错误信息时抛出相应的异常</span><br><span class="line">    raise_for_status 方法首先检查响应对象是否包含 error 属性，并且该属性的值不为 None。如果 error 属性存在且不为 None，则抛出 error 异常。</span><br><span class="line">    否则，调用父类 Response 的 raise_for_status 方法，检查响应的状态码是否为 4xx 或 5xx，如果是，则抛出相应的异常。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def raise_for_status(self):</span><br><span class="line">        if hasattr(self, &quot;error&quot;) and self.error:</span><br><span class="line">            raise self.error</span><br><span class="line">        Response.raise_for_status(self)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="get-req-resp-record方法"><a href="#get-req-resp-record方法" class="headerlink" title="get_req_resp_record方法"></a>get_req_resp_record方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def get_req_resp_record(resp_obj: Response) -&gt; ReqRespData:</span><br><span class="line">    &quot;&quot;&quot;get request and response info from Response() object.&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># 定义了一个打印日志的函数，将打印的日志解析为标准的json格式</span><br><span class="line">    def log_print(req_or_resp, r_type):</span><br><span class="line">        msg = f&quot;\n================== &#123;r_type&#125; details ==================\n&quot;</span><br><span class="line">        for key, value in req_or_resp.dict().items():</span><br><span class="line">            if isinstance(value, dict) or isinstance(value, list):</span><br><span class="line">                value = json.dumps(value, indent=4, ensure_ascii=False)</span><br><span class="line"></span><br><span class="line">            msg += &quot;&#123;:&lt;8&#125; : &#123;&#125;\n&quot;.format(key, value)</span><br><span class="line">        logger.debug(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # record actual request info</span><br><span class="line">    # 是先获取request_headers、request_cookies、request_body，然后将获取到的信息放入RequestData模型中，最后打印请求的信息</span><br><span class="line">    request_headers = dict(resp_obj.request.headers)</span><br><span class="line">    request_cookies = resp_obj.request._cookies.get_dict()</span><br><span class="line"></span><br><span class="line">    request_body = resp_obj.request.body</span><br><span class="line">    if request_body is not None:</span><br><span class="line">        try:</span><br><span class="line">            request_body = json.loads(request_body)</span><br><span class="line">        except json.JSONDecodeError:</span><br><span class="line">            # str: a=1&amp;b=2</span><br><span class="line">            pass</span><br><span class="line">        except UnicodeDecodeError:</span><br><span class="line">            # bytes/bytearray: request body in protobuf</span><br><span class="line">            pass</span><br><span class="line">        except TypeError:</span><br><span class="line">            # neither str nor bytes/bytearray, e.g. &lt;MultipartEncoder&gt;</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line">        request_content_type = lower_dict_keys(request_headers).get(&quot;content-type&quot;)</span><br><span class="line">        if request_content_type and &quot;multipart/form-data&quot; in request_content_type:</span><br><span class="line">            # upload file type</span><br><span class="line">            request_body = &quot;upload file stream (OMITTED)&quot;</span><br><span class="line"></span><br><span class="line">    request_data = RequestData(</span><br><span class="line">        method=resp_obj.request.method,</span><br><span class="line">        url=resp_obj.request.url,</span><br><span class="line">        headers=request_headers,</span><br><span class="line">        cookies=request_cookies,</span><br><span class="line">        body=request_body,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # log request details in debug mode</span><br><span class="line">    log_print(request_data, &quot;request&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # record response info</span><br><span class="line">    # 获取resp_headers、content_type、response_body，最后将这些数据都放入ResponseData模型类中，最后打印响应日志</span><br><span class="line">    resp_headers = dict(resp_obj.headers)</span><br><span class="line">    lower_resp_headers = lower_dict_keys(resp_headers)</span><br><span class="line">    content_type = lower_resp_headers.get(&quot;content-type&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">    if &quot;image&quot; in content_type:</span><br><span class="line">        # response is image type, record bytes content only</span><br><span class="line">        response_body = resp_obj.content</span><br><span class="line">    else:</span><br><span class="line">        try:</span><br><span class="line">            # try to record json data</span><br><span class="line">            response_body = resp_obj.json()</span><br><span class="line">        except ValueError:</span><br><span class="line">            # only record at most 512 text charactors</span><br><span class="line">            resp_text = resp_obj.text</span><br><span class="line">            response_body = omit_long_data(resp_text)</span><br><span class="line"></span><br><span class="line">    response_data = ResponseData(</span><br><span class="line">        status_code=resp_obj.status_code,</span><br><span class="line">        cookies=resp_obj.cookies or &#123;&#125;,</span><br><span class="line">        encoding=resp_obj.encoding,</span><br><span class="line">        headers=resp_headers,</span><br><span class="line">        content_type=content_type,</span><br><span class="line">        body=response_body,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # log response details in debug mode</span><br><span class="line">    log_print(response_data, &quot;response&quot;)</span><br><span class="line"></span><br><span class="line">    # 请求信息和响应信息全部放入ReqRespData模型中，最后get_req_resp_record函数返回的内容就是ReqRespData模型</span><br><span class="line">req_resp_data = ReqRespData(request=request_data, response=response_data)</span><br><span class="line">    return req_resp_data</span><br></pre></td></tr></table></figure>


<h4 id="HttpSession类"><a href="#HttpSession类" class="headerlink" title="HttpSession类"></a>HttpSession类</h4><p><strong><code>HttpSession</code> 是一个用于执行 HTTP 请求的类，它继承自 <code>requests.Session</code> 类，并扩展了一些功能。<code>HttpSession</code> 类的主要作用是在发送 HTTP 请求时记录请求和响应的信息，以便后续进行统计和分析</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def __init__(self):</span><br><span class="line">    super(HttpSession, self).__init__()</span><br><span class="line">    self.data = SessionData()</span><br></pre></td></tr></table></figure>
<p><strong>初始化方法，定义了data属性的默认值为SessionData模型，该模型包含了req_resps: List[ReqRespData] &#x3D; []请求响应内容</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def update_last_req_resp_record(self, resp_obj):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    update request and response info from Response() object.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # TODO: fix</span><br><span class="line">    self.data.req_resps.pop()</span><br><span class="line">    self.data.req_resps.append(get_req_resp_record(resp_obj))</span><br></pre></td></tr></table></figure>
<p><strong>update_last_req_resp_record 方法用于更新最后一次请求和响应的信息，该方法会从 Response 对象中提取请求和响应的信息，并更新到 SessionData 对象中</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _send_request_safe_mode(self, method, url, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Send a HTTP request, and catch any exception that might occur due to connection problems.</span><br><span class="line">    Safe mode has been removed from requests 1.x.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        return requests.Session.request(self, method, url, **kwargs)</span><br><span class="line">    except (MissingSchema, InvalidSchema, InvalidURL):</span><br><span class="line">        raise</span><br><span class="line">    except RequestException as ex:</span><br><span class="line">        resp = ApiResponse()</span><br><span class="line">        resp.error = ex</span><br><span class="line">        resp.status_code = 0  # with this status_code, content returns None</span><br><span class="line">        resp.request = Request(method, url).prepare()</span><br><span class="line">        return resp</span><br></pre></td></tr></table></figure>
<p><strong>_send_request_safe_mode 方法用于发送 HTTP 请求，并捕获可能发生的连接问题异常。如果发送请求时发生异常，则返回一个 ApiResponse 对象，该对象包含了异常信息和请求对象。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def request(self, method, url, name=None, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Constructs and sends a :py:class:`requests.Request`.</span><br><span class="line">    Returns :py:class:`requests.Response` object.</span><br><span class="line"></span><br><span class="line">    :param method:</span><br><span class="line">        method for the new :class:`Request` object.</span><br><span class="line">    :param url:</span><br><span class="line">        URL for the new :class:`Request` object.</span><br><span class="line">    :param name: (optional)</span><br><span class="line">        Placeholder, make compatible with Locust&#x27;s HttpSession</span><br><span class="line">    :param params: (optional)</span><br><span class="line">        Dictionary or bytes to be sent in the query string for the :class:`Request`.</span><br><span class="line">    :param data: (optional)</span><br><span class="line">        Dictionary or bytes to send in the body of the :class:`Request`.</span><br><span class="line">    :param headers: (optional)</span><br><span class="line">        Dictionary of HTTP Headers to send with the :class:`Request`.</span><br><span class="line">    :param cookies: (optional)</span><br><span class="line">        Dict or CookieJar object to send with the :class:`Request`.</span><br><span class="line">    :param files: (optional)</span><br><span class="line">        Dictionary of ``&#x27;filename&#x27;: file-like-objects`` for multipart encoding upload.</span><br><span class="line">    :param auth: (optional)</span><br><span class="line">        Auth tuple or callable to enable Basic/Digest/Custom HTTP Auth.</span><br><span class="line">    :param timeout: (optional)</span><br><span class="line">        How long to wait for the server to send data before giving up, as a float, or \</span><br><span class="line">        a (`connect timeout, read timeout &lt;user/advanced.html#timeouts&gt;`_) tuple.</span><br><span class="line">        :type timeout: float or tuple</span><br><span class="line">    :param allow_redirects: (optional)</span><br><span class="line">        Set to True by default.</span><br><span class="line">    :type allow_redirects: bool</span><br><span class="line">    :param proxies: (optional)</span><br><span class="line">        Dictionary mapping protocol to the URL of the proxy.</span><br><span class="line">    :param stream: (optional)</span><br><span class="line">        whether to immediately download the response content. Defaults to ``False``.</span><br><span class="line">    :param verify: (optional)</span><br><span class="line">        if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.</span><br><span class="line">    :param cert: (optional)</span><br><span class="line">        if String, path to ssl client cert file (.pem). If Tuple, (&#x27;cert&#x27;, &#x27;key&#x27;) pair.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    self.data = SessionData()</span><br><span class="line"></span><br><span class="line">    # timeout default to 120 seconds</span><br><span class="line">    kwargs.setdefault(&quot;timeout&quot;, 120)</span><br><span class="line"></span><br><span class="line">    # set stream to True, in order to get client/server IP/Port</span><br><span class="line">    kwargs[&quot;stream&quot;] = True</span><br><span class="line"></span><br><span class="line">    start_timestamp = time.time()</span><br><span class="line">    response = self._send_request_safe_mode(method, url, **kwargs)</span><br><span class="line">    response_time_ms = round((time.time() - start_timestamp) * 1000, 2)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        client_ip, client_port = response.raw._connection.sock.getsockname()</span><br><span class="line">        self.data.address.client_ip = client_ip</span><br><span class="line">        self.data.address.client_port = client_port</span><br><span class="line">        logger.debug(f&quot;client IP: &#123;client_ip&#125;, Port: &#123;client_port&#125;&quot;)</span><br><span class="line">    except Exception:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        server_ip, server_port = response.raw._connection.sock.getpeername()</span><br><span class="line">        self.data.address.server_ip = server_ip</span><br><span class="line">        self.data.address.server_port = server_port</span><br><span class="line">        logger.debug(f&quot;server IP: &#123;server_ip&#125;, Port: &#123;server_port&#125;&quot;)</span><br><span class="line">    except Exception:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # get length of the response content</span><br><span class="line">    content_size = int(dict(response.headers).get(&quot;content-length&quot;) or 0)</span><br><span class="line"></span><br><span class="line">    # record the consumed time</span><br><span class="line">    self.data.stat.response_time_ms = response_time_ms</span><br><span class="line">    self.data.stat.elapsed_ms = response.elapsed.microseconds / 1000.0</span><br><span class="line">    self.data.stat.content_size = content_size</span><br><span class="line"></span><br><span class="line">    # record request and response histories, include 30X redirection</span><br><span class="line">    response_list = response.history + [response]</span><br><span class="line">    self.data.req_resps = [</span><br><span class="line">        get_req_resp_record(resp_obj) for resp_obj in response_list</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        response.raise_for_status()</span><br><span class="line">    except RequestException as ex:</span><br><span class="line">        logger.error(f&quot;&#123;str(ex)&#125;&quot;)</span><br><span class="line">    else:</span><br><span class="line">        logger.info(</span><br><span class="line">            f&quot;status_code: &#123;response.status_code&#125;, &quot;</span><br><span class="line">            f&quot;response_time(ms): &#123;response_time_ms&#125; ms, &quot;</span><br><span class="line">            f&quot;response_length: &#123;content_size&#125; bytes&quot;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    return response</span><br></pre></td></tr></table></figure>
<p><strong>最重要的 request 方法。request 方法用于构造并发送一个 HTTP 请求，并返回一个 requests.Response 对象。在发送请求之前，<br>request 方法会先清空之前的请求和响应信息，然后设置一些默认参数，如超时时间、是否允许重定向等。接着，request 方法会调用 _send_request_safe_mode 方法发送请求，<br>并记录请求和响应的信息。最后，request 方法会检查响应的状态码是否为 4xx 或 5xx，如果是，则抛出相应的异常。</strong><br><strong>主要做了以下事情</strong></p>
<ul>
<li>设置了超时时间120s</li>
<li>计算整个请求花费了多少时间</li>
<li>定义了客户端ip地址和端口号、服务端ip地址和端口号</li>
<li>计算了响应体的内容大小</li>
<li>记录了消耗时间</li>
<li>记录了request和response记录，包括重定向记录</li>
</ul>
]]></content>
      <categories>
        <category>Httprunner</category>
      </categories>
      <tags>
        <tag>httprunner</tag>
        <tag>接口自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>Java三大特性之一—— 封装</title>
    <url>/2024/12/25/Java%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E4%B8%80%E2%80%94%E2%80%94-%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h2 id="一、什么是封装"><a href="#一、什么是封装" class="headerlink" title="一、什么是封装"></a>一、什么是封装</h2><p>我们知道在面向对象编程的世界里有三大特征，分别是封装，继承，多态，那我们来了解了解何为封装。</p>
<p>    举个例子，拿我们的手机来说，我们所看到的手机外观基本都是非常漂亮的，我们只知道手机该怎么用手机有什么功能，但我们并不知道这些功能这小小的手机是怎么做到的那么小的体积做到有这么多的功能，我们身为使用者，我们是无法知道手机内部是怎么实现这么多功能的，这同时也是手机的制作者想要的，在手机制作者的世界里面，他认为使用者只需要会使用自己放出的功能就足够了，手机内部功能的实现是怎么做到的，使用者没必要知道，使用者会玩手机就足够了。</p>
<span id="more"></span>

<p>这其中就体现了封装，使用者只能使用制作者放出来的东西，使用者不知道手机的内部功能的实现，我想要你知道的你才能知道，我不想要你知道的你就不能知道。封装指的是将数据和操作数据的方法有机结合，同时对外隐藏内部的细节，只暴露必要的接口供其他对象使用。<br>    Java的封装主要是通过类和访问权限来实现的，类可以将数据和操作数据的方法进行有机结合在一起，访问权限用来控制成员变量和成员方法能否在类外进行使用，从而实现对对象内部的实现细节进行隐藏。同时包也是对类，接口等的封装机制的体现，是一种对类和接口很好的组织方式。</p>
<p>封装性的主要目的是保护数据，防止外部的不合理访问和修改，从而提高代码的可维护性和可复用性。</p>
<h2 id="二、访问修饰限定符"><a href="#二、访问修饰限定符" class="headerlink" title="二、访问修饰限定符"></a>二、访问修饰限定符</h2><p>那如何实现封装呢，这儿就需要使用到访问修饰限定符：public、private、protected、default。通过<a href="https://so.csdn.net/so/search?q=%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90&spm=1001.2101.3001.7020">访问权限</a>的不同来控制方法或者属性能否可以直接在类外使用</p>
<h3 id="2-1、public"><a href="#2-1、public" class="headerlink" title="2.1、public"></a>2.1、public</h3><p>public是Java里权限最大的，当前类，同一个包中的其他类，不同包的子类，不同包的非子类，都可以访问。可以理解外一个人的外貌，每个人都可以看得见。</p>
<h3 id="2-2、protected"><a href="#2-2、protected" class="headerlink" title="2.2、protected"></a>2.2、protected</h3><p> protected是访问权限里面第二大的，通常用于被继承的父类，当前类，同一个包中的其他类，不同包的子类。</p>
<h3 id="2-3、default"><a href="#2-3、default" class="headerlink" title="2.3、default"></a>2.3、default</h3><p>default并不是一个关键字，当类内的方法或者属性没有被任何访问修饰限定符修饰时，当前方法或者属性被称为包访问权限。可以想象为一个家庭或者一个家族，包访问权限就相当与只有该家庭或者家族内部的人才知道的事情，家庭外或者家族外的人不知道这件事情</p>
<h3 id="2-4、private"><a href="#2-4、private" class="headerlink" title="2.4、private"></a>2.4、private</h3><p>private是所有权限中最小的，相当于某件事情只有自己知道，其他任何人都不知道。也被称之为私有权限</p>
<p> 大多数情况下，成员属性设置为private，成员方法设置为public，将对象的属性隐藏起来，提供开放的接口供给外部使用，这些接口可以操作成员属性。可以操作成员属性的方法一般有两种，一种是set方法，一种是get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">//私有</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//私有</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> set方法可以对成员属性进行赋值<br>    get方法可以取到成员属性的值<br>当成员属性数量多的时候，一个一个的定义set，get方法就会很繁琐并且消耗大量时间，此时编译器就提供了相应的快捷方式，可以一键生成set，get方法</p>
<h2 id="三、包"><a href="#三、包" class="headerlink" title="三、包"></a>三、包</h2><h3 id="3-1、什么是包"><a href="#3-1、什么是包" class="headerlink" title="3.1、什么是包"></a>3.1、什么是包</h3><p>在面向对象体系中，提出了软件包的概念，即为了更好的管理类，创建一个包把多个类收集在一起，称之为软件包。有点类似于文件夹，文件夹里面可以存储多个内容，将内容类似的存储在同一个文件夹中，比如说一个班级有男生和女生，男生的信息存储到一号文件夹，女生的信息存储到二号文件夹，此时学生的信息可以更好的进行管理<br>    包是对类和接口等的封装机制的体现 ，是类或者接口的容器，它通过命名空间来区分不同的类，使得即使类名相同，只要它们位于不同的包中就不会发生冲突。这也就意味着在同一个工程里面可以存在名字相同的类</p>
<h3 id="3-2、导入其他包中的类"><a href="#3-2、导入其他包中的类" class="headerlink" title="3.2、导入其他包中的类"></a>3.2、导入其他包中的类</h3><p>Java本身提供了很多现成的类供我们使用，但在使用之前必须要进行导包，导包需要使用到import关键字，但大多数时候并不需要我们手动导包，编译器会自动导包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br></pre></td></tr></table></figure>

<p>导包导包，顾名思义就是将包内我们所需要的类导入当前类中，import java.util.*，并非是将util包内的全部类导入当前类，而是代码需要调用哪个类，编译器就加载对应的util底下的类出来供给JVM使用。<br>    但是这种方式也是有缺陷的，首先就是代码的可读性降低了，其次就是有可能会导致冲突出现。</p>
<h3 id="3-3、自定义包"><a href="#3-3、自定义包" class="headerlink" title="3.3、自定义包"></a>3.3、自定义包</h3><p> 	  1、在文件的最上方加上一个package语句声明当前类在哪个包中<br>    2、包名通常会使用公司的域名的颠倒形式（例如：com.bit.www），并且必须要小写字母<br>    3、包名和代码路径相匹配，例如创建com.bit.demo1的包，那么会存在一个对应的路径com&#x2F;bit&#x2F;demo1来存储代码<br>    4、如果一个类没有package语句，那么当前类是存放在默认包底下的，src是默认包。<br>    5、程序在运行的时候是默认在src这个包里面查找可执行程序的。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java三大特性之一—— 继承</title>
    <url>/2024/12/25/Java%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E4%B8%80%E2%80%94%E2%80%94-%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h2 id="一、为什么要继承"><a href="#一、为什么要继承" class="headerlink" title="一、为什么要继承"></a>一、为什么要继承</h2>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter压测-Linux运行Jmeter环境</title>
    <url>/2023/06/05/Jmeter%E5%8E%8B%E6%B5%8B-Linux%E8%BF%90%E8%A1%8CJmeter%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>使用jmeter做压测的时候，在windows上不太稳定，所有一直在linux服务器上使用jmeter做压力测试。<br>本篇记录下linux上搭建jmeter环境，以及运行jmeter脚本，查看报告。</p>
<span id="more"></span>

<p>相关环境：<br>java 1.8<br>jmeter 5.5</p>
<h4 id="一、java环境"><a href="#一、java环境" class="headerlink" title="一、java环境"></a>一、java环境</h4><p>先在Linux上安装java环境，安装1.8.0版本，先查找java相关的列表</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">yum -y <span class="type">list</span> java*</span><br></pre></td></tr></table></figure>
<p>安装java-1.8.0-openjdk相关的文件</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yum</span> -y install java-<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>-openjdk*</span><br></pre></td></tr></table></figure>
<p>安装完成后环境变量自动已经生效了，输入java -version查看版本号</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">java -<span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<h4 id="二、安装jmeter"><a href="#二、安装jmeter" class="headerlink" title="二、安装jmeter"></a>二、安装jmeter</h4><p>在jmeter官网<a href="https://jmeter.apache.org/%E4%B8%8B%E8%BD%BDjmeter%E7%9A%84zip%E5%AE%89%E8%A3%85%E5%8C%85,%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E5%90%8E%E4%BC%A0%E5%88%B0linux%E4%B8%8A%E4%BB%BB%E6%84%8F%E7%9B%AE%E5%BD%95%EF%BC%8C%E6%AF%94%E5%A6%82%E6%88%91%E7%9A%84%E6%98%AF/root/jmeter%E3%80%82">https://jmeter.apache.org/下载jmeter的zip安装包,下载完成后传到linux上任意目录，比如我的是/root/jmeter。</a><br>使用unzip命令解压zip文件，如果没有安装过unzip，先yum安装下</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> unzip</span><br></pre></td></tr></table></figure>
<p>使用unzip 解压.zip 文件</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">unzip</span> apache-jmeter-<span class="number">5</span>.<span class="number">5</span>.zip</span><br></pre></td></tr></table></figure>
<p>解压完成后，接下来vi编辑&#x2F;etc&#x2F;profile文件，设置环境变量,在文件底部编辑</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">export PATH=<span class="regexp">/root/</span>jmeter<span class="regexp">/apache-jmeter-5.5/</span>bin/:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>接下来source执行&#x2F;etc&#x2F;profile文件让环境变量生效</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>
<p>输入jmeter -v能看到内容说明安装成功了</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">jmeter -v</span></span><br></pre></td></tr></table></figure>
<h4 id="三、启动jmeter脚本测试"><a href="#三、启动jmeter脚本测试" class="headerlink" title="三、启动jmeter脚本测试"></a>三、启动jmeter脚本测试</h4><p>脚本文件(Test Plan.jmx)导入linux服务器上,执行以下命令启动测试计划</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">jmeter -<span class="built_in">n</span> -<span class="built_in">t</span> Test\ Plan.jmx -l testplan.jtl</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>n 表示以no gui方式运行测试计划</li>
<li>t 表示测试计划，后面跟测试计划名称, 有空格的话用\空格表示</li>
<li>l表示测试结果，后面跟测试结果文件名称，后缀是.jtl文件</li>
</ul>
<h4 id="四、查看报告文件"><a href="#四、查看报告文件" class="headerlink" title="四、查看报告文件"></a>四、查看报告文件</h4><p>测试结束后导出testplan.jtl文件，在本地jmeter上查看运行结果</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Jmeter</tag>
        <tag>性能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown常用语法介绍</title>
    <url>/2023/05/27/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="1、Markdown标题-——-提升标题等级ctrl"><a href="#1、Markdown标题-——-提升标题等级ctrl" class="headerlink" title="1、Markdown标题 —— 提升标题等级ctrl +"></a>1、Markdown标题 —— 提升标题等级ctrl +</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line"></span><br><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">### 三级标题</span><br><span class="line"></span><br><span class="line">#### 四级标题</span><br><span class="line"></span><br><span class="line">##### 五级标题</span><br><span class="line"></span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="2、Markdown字体"><a href="#2、Markdown字体" class="headerlink" title="2、Markdown字体"></a>2、Markdown字体</h3><ul>
<li>用1个星号*或底线_表示斜体 斜体：Ctrl+I</li>
<li>用2个星号*或底线_表示粗体 加粗：Ctrl+B</li>
<li>用3个星号*或底线_表示粗斜体<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*斜体文字*</span><br><span class="line"></span><br><span class="line">_斜体文字_</span><br><span class="line"></span><br><span class="line">**粗体文字**</span><br><span class="line"></span><br><span class="line">__粗体文字__</span><br><span class="line"></span><br><span class="line">***粗斜体文字***</span><br><span class="line"></span><br><span class="line">___粗斜体文字___</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3、Markdown分割线"><a href="#3、Markdown分割线" class="headerlink" title="3、Markdown分割线"></a>3、Markdown分割线</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">******</span><br><span class="line">------</span><br></pre></td></tr></table></figure>

<h3 id="4、Markdown删除线-——-删除线：Alt-Shift-5"><a href="#4、Markdown删除线-——-删除线：Alt-Shift-5" class="headerlink" title="4、Markdown删除线 —— 删除线：Alt+Shift+5"></a>4、Markdown删除线 —— 删除线：Alt+Shift+5</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~tencent.com~~</span><br></pre></td></tr></table></figure>

<h3 id="5、代码块-——-代码：Ctrl-Shift-96"><a href="#5、代码块-——-代码：Ctrl-Shift-96" class="headerlink" title="5、代码块 —— 代码：Ctrl+Shift+&#96;"></a>5、代码块 —— 代码：Ctrl+Shift+&#96;</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`world`</span><br></pre></td></tr></table></figure>

<h3 id="6、Markdown下划线-——-下划线：Ctrl-U"><a href="#6、Markdown下划线-——-下划线：Ctrl-U" class="headerlink" title="6、Markdown下划线 —— 下划线：Ctrl+U"></a>6、Markdown下划线 —— 下划线：Ctrl+U</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;带下划线文本&lt;/u&gt;  </span><br></pre></td></tr></table></figure>

<h3 id="7、Markdown列表"><a href="#7、Markdown列表" class="headerlink" title="7、Markdown列表"></a>7、Markdown列表</h3><p>无序列表(三个都行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure>
<p>有序列表直接在文字有加上1. 2. 3. 来表示，符号和文字之间加上一个空格字符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure>

<h3 id="8、Markdown嵌套列表"><a href="#8、Markdown嵌套列表" class="headerlink" title="8、Markdown嵌套列表"></a>8、Markdown嵌套列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>

<h3 id="9、Markdown链接-——-超链接：Ctrl-K"><a href="#9、Markdown链接-——-超链接：Ctrl-K" class="headerlink" title="9、Markdown链接 —— 超链接：Ctrl+K"></a>9、Markdown链接 —— 超链接：Ctrl+K</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一个链接 [新浪新闻](https://news.sina.com.cn/)</span><br><span class="line">&lt;https://news.sina.com.cn/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="10、Markdown图片-——-图像：Ctrl-Shift-I"><a href="#10、Markdown图片-——-图像：Ctrl-Shift-I" class="headerlink" title="10、Markdown图片 —— 图像：Ctrl+Shift+I"></a>10、Markdown图片 —— 图像：Ctrl+Shift+I</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="11、Markdown表格-——-ctrl-T-插入表格"><a href="#11、Markdown表格-——-ctrl-T-插入表格" class="headerlink" title="11、Markdown表格 —— ctrl + T 插入表格"></a>11、Markdown表格 —— ctrl + T 插入表格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line"></span><br><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>

<h3 id="12、Markdown高亮-——-ctrl-T-插入表格"><a href="#12、Markdown高亮-——-ctrl-T-插入表格" class="headerlink" title="12、Markdown高亮 —— ctrl + T 插入表格"></a>12、Markdown高亮 —— ctrl + T 插入表格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==高亮==</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>《JAVA基础》：继承</title>
    <url>/2025/02/25/%E3%80%8AJAVA%E5%9F%BA%E7%A1%80%E3%80%8B%EF%BC%9A%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h2 id="一、继承的核心概念"><a href="#一、继承的核心概念" class="headerlink" title="一、继承的核心概念"></a><strong>一、继承的核心概念</strong></h2><h3 id="1-什么是继承？"><a href="#1-什么是继承？" class="headerlink" title="1. 什么是继承？"></a><strong>1. 什么是继承？</strong></h3><ul>
<li><strong>定义</strong>：继承是面向对象编程（OOP）的四大特性之一，允许一个类（子类）基于另一个类（父类）来构建，<strong>复用父类的属性和方法</strong>。</li>
<li><strong>目的</strong>：提高代码复用性，建立类之间的层次关系，支持多态。</li>
</ul>
<span id="more"></span>

<h3 id="2-继承的语法"><a href="#2-继承的语法" class="headerlink" title="2. 继承的语法"></a><strong>2. 继承的语法</strong></h3><ul>
<li>使用 <code>extends</code> 关键字实现继承：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="comment">// 父类成员</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildClass</span> <span class="keyword">extends</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="comment">// 子类成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-继承的类型"><a href="#3-继承的类型" class="headerlink" title="3. 继承的类型"></a><strong>3. 继承的类型</strong></h3><ul>
<li><strong>单继承</strong>：Java只支持类的单继承（一个子类只能有一个直接父类）。</li>
<li><strong>多层继承</strong>：允许链式继承（例如：A → B → C）。</li>
<li><strong>接口多继承</strong>：类可以实现多个接口（<code>implements</code>），接口可以继承多个接口（<code>extends</code>）。</li>
</ul>
<hr>
<h2 id="二、继承的成员访问规则"><a href="#二、继承的成员访问规则" class="headerlink" title="二、继承的成员访问规则"></a><strong>二、继承的成员访问规则</strong></h2><h3 id="1-可继承的成员"><a href="#1-可继承的成员" class="headerlink" title="1. 可继承的成员"></a><strong>1. 可继承的成员</strong></h3><ul>
<li><code>public</code> 和 <code>protected</code> 修饰的成员（字段、方法）。</li>
<li>默认访问权限（无修饰符）的成员，<strong>仅在同一包内可继承</strong>。</li>
</ul>
<h3 id="2-不可继承的成员"><a href="#2-不可继承的成员" class="headerlink" title="2. 不可继承的成员"></a><strong>2. 不可继承的成员</strong></h3><ul>
<li><code>private</code> 修饰的成员。</li>
<li>父类的构造器（但可通过<code>super()</code>调用）。</li>
<li>被<code>final</code>修饰的类或方法（<code>final</code>类不可被继承，<code>final</code>方法不可被重写）。</li>
</ul>
<hr>
<h2 id="三、方法重写（Override）"><a href="#三、方法重写（Override）" class="headerlink" title="三、方法重写（Override）"></a><strong>三、方法重写（Override）</strong></h2><h3 id="1-重写规则"><a href="#1-重写规则" class="headerlink" title="1. 重写规则"></a><strong>1. 重写规则</strong></h3><ul>
<li><strong>方法签名相同</strong>：方法名、参数列表、返回类型（或子类返回类型）必须一致。</li>
<li><strong>访问权限不能更严格</strong>：子类方法的访问修饰符应 ≥ 父类方法（例如：父类为<code>protected</code>，子类可为<code>public</code>）。</li>
<li><strong>异常范围不能扩大</strong>：子类方法抛出的异常不能比父类更宽泛。</li>
</ul>
<h3 id="2-Override注解"><a href="#2-Override注解" class="headerlink" title="2. @Override注解"></a><strong>2. <code>@Override</code>注解</strong></h3><ul>
<li>显式声明方法重写，编译器会检查是否符合重写规则。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal eats&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog eats bones&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="四、super关键字的使用"><a href="#四、super关键字的使用" class="headerlink" title="四、super关键字的使用"></a><strong>四、<code>super</code>关键字的使用</strong></h2><h3 id="1-调用父类成员"><a href="#1-调用父类成员" class="headerlink" title="1. 调用父类成员"></a><strong>1. 调用父类成员</strong></h3><ul>
<li><strong>访问父类字段&#x2F;方法</strong>：当子类与父类成员同名时，用<code>super.成员名</code>区分。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Parent&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Child&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printNames</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name);  <span class="comment">// 输出 Parent</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);   <span class="comment">// 输出 Child</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-调用父类构造器"><a href="#2-调用父类构造器" class="headerlink" title="2. 调用父类构造器"></a><strong>2. 调用父类构造器</strong></h3><ul>
<li><strong>规则</strong>：<code>super(...)</code>必须位于子类构造器的第一行。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> grade;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> grade)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);  <span class="comment">// 调用父类构造器</span></span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="五、继承与多态"><a href="#五、继承与多态" class="headerlink" title="五、继承与多态"></a><strong>五、继承与多态</strong></h2><h3 id="1-多态的表现"><a href="#1-多态的表现" class="headerlink" title="1. 多态的表现"></a><strong>1. 多态的表现</strong></h3><ul>
<li><strong>向上转型（Upcasting）</strong>：父类引用指向子类对象。</li>
<li><strong>动态绑定（Dynamic Binding）</strong>：运行时根据实际对象类型调用方法。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();  <span class="comment">// 向上转型</span></span><br><span class="line">myDog.eat();               <span class="comment">// 调用Dog类的eat()方法</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-instanceof运算符"><a href="#2-instanceof运算符" class="headerlink" title="2. instanceof运算符"></a><strong>2. <code>instanceof</code>运算符</strong></h3><ul>
<li>检查对象是否为特定类或其子类的实例。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (myDog <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;This is a Dog&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="六、抽象类与接口"><a href="#六、抽象类与接口" class="headerlink" title="六、抽象类与接口"></a><strong>六、抽象类与接口</strong></h2><h3 id="1-抽象类（Abstract-Class）"><a href="#1-抽象类（Abstract-Class）" class="headerlink" title="1. 抽象类（Abstract Class）"></a><strong>1. 抽象类（Abstract Class）</strong></h3><ul>
<li><strong>定义</strong>：用<code>abstract</code>修饰的类，可以包含抽象方法（无实现）。</li>
<li><strong>用途</strong>：为子类提供通用模板，强制子类实现特定方法。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span>;  <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-接口（Interface）"><a href="#2-接口（Interface）" class="headerlink" title="2. 接口（Interface）"></a><strong>2. 接口（Interface）</strong></h3><ul>
<li><strong>定义</strong>：用<code>interface</code>定义，默认方法为<code>public abstract</code>（Java 8+支持默认方法和静态方法）。</li>
<li><strong>多继承</strong>：类可以实现多个接口。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Swimmable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Duck</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span>, Swimmable &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123; <span class="comment">/* 实现飞行 */</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123; <span class="comment">/* 实现游泳 */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="七、继承的最佳实践"><a href="#七、继承的最佳实践" class="headerlink" title="七、继承的最佳实践"></a><strong>七、继承的最佳实践</strong></h2><ol>
<li><strong>优先使用组合而非继承</strong>：除非明确的“is-a”关系，否则用组合（持有其他类的实例）代替继承。</li>
<li><strong>避免过深的继承层次</strong>：继承链过长会降低代码可维护性。</li>
<li><strong>使用<code>final</code>限制继承</strong>：若类不应被继承，声明为<code>final</code>。</li>
<li><strong>遵循里氏替换原则（LSP）</strong></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>《JAVA基础》：构造器</title>
    <url>/2025/02/25/%E3%80%8AJAVA%E5%9F%BA%E7%A1%80%E3%80%8B%EF%BC%9A%E6%9E%84%E9%80%A0%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一、构造器（Constructor）的定义与作用"><a href="#一、构造器（Constructor）的定义与作用" class="headerlink" title="一、构造器（Constructor）的定义与作用"></a><strong>一、构造器（Constructor）的定义与作用</strong></h2><h3 id="1-什么是构造器？"><a href="#1-什么是构造器？" class="headerlink" title="1. 什么是构造器？"></a><strong>1. 什么是构造器？</strong></h3><p>构造器是类中用于 <strong>初始化对象</strong> 的特殊方法，在创建对象时通过<code>new</code>关键字自动调用。</p>
<h3 id="2-核心作用"><a href="#2-核心作用" class="headerlink" title="2. 核心作用"></a><strong>2. 核心作用</strong></h3><ul>
<li><p><strong>分配内存</strong>：为对象分配堆内存空间。</p>
</li>
<li><p><strong>初始化成员变量</strong>：设置对象的初始状态。</p>
</li>
<li><p><strong>执行必要逻辑</strong>：如资源加载、参数校验等。</p>
<span id="more"></span></li>
</ul>
<h2 id="二、构造器的基本语法"><a href="#二、构造器的基本语法" class="headerlink" title="二、构造器的基本语法"></a><strong>二、构造器的基本语法</strong></h2><h3 id="1-语法规则"><a href="#1-语法规则" class="headerlink" title="1. 语法规则"></a><strong>1. 语法规则</strong></h3><ul>
<li><strong>名称必须与类名完全相同</strong>（区分大小写）。</li>
<li><strong>无返回值类型</strong>（连<code>void</code>也不能声明）。</li>
<li><strong>支持重载</strong>：一个类可以有多个不同参数的构造器。</li>
</ul>
<h3 id="2-默认构造器"><a href="#2-默认构造器" class="headerlink" title="2. 默认构造器"></a><strong>2. 默认构造器</strong></h3><ul>
<li>如果类中未定义任何构造器，编译器会自动生成一个无参构造器。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">// 编译器自动生成：public User() &#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-显式定义构造器"><a href="#3-显式定义构造器" class="headerlink" title="3. 显式定义构造器"></a><strong>3. 显式定义构造器</strong></h3><ul>
<li><p><strong>无参构造器</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>有参构造器</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="三、构造器的类型与高级用法"><a href="#三、构造器的类型与高级用法" class="headerlink" title="三、构造器的类型与高级用法"></a><strong>三、构造器的类型与高级用法</strong></h2><h3 id="1-私有构造器（Singleton模式）"><a href="#1-私有构造器（Singleton模式）" class="headerlink" title="1. 私有构造器（Singleton模式）"></a><strong>1. 私有构造器（Singleton模式）</strong></h3><ul>
<li><strong>用途</strong>：禁止外部通过<code>new</code>创建对象，常用于单例模式或工具类。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseConnection</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DatabaseConnection instance;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DatabaseConnection</span><span class="params">()</span> &#123;&#125;  <span class="comment">// 私有构造器</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DatabaseConnection <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">DatabaseConnection</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-构造器重载（Overload）"><a href="#2-构造器重载（Overload）" class="headerlink" title="2. 构造器重载（Overload）"></a><strong>2. 构造器重载（Overload）</strong></h3><ul>
<li><strong>定义</strong>：一个类中定义多个参数列表不同的构造器。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;&#125;  <span class="comment">// 无参构造器</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String title, String author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-构造器链（Constructor-Chaining）"><a href="#3-构造器链（Constructor-Chaining）" class="headerlink" title="3. 构造器链（Constructor Chaining）"></a><strong>3. 构造器链（Constructor Chaining）</strong></h3><ul>
<li><strong>用途</strong>：通过<code>this()</code>在一个构造器中调用另一个构造器，减少代码冗余。</li>
<li><strong>规则</strong>：<code>this()</code>必须放在构造器的第一行。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> height;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">1</span>, <span class="number">1</span>);  <span class="comment">// 调用双参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="四、构造器与继承"><a href="#四、构造器与继承" class="headerlink" title="四、构造器与继承"></a><strong>四、构造器与继承</strong></h2><h3 id="1-核心规则"><a href="#1-核心规则" class="headerlink" title="1. 核心规则"></a><strong>1. 核心规则</strong></h3><ul>
<li><strong>构造器不可被继承</strong>：子类不能直接继承父类的构造器。</li>
<li><strong>必须调用父类构造器</strong>：子类构造器的第一行必须通过<code>super(...)</code>显式或隐式调用父类构造器。</li>
</ul>
<h3 id="2-隐式调用父类无参构造器"><a href="#2-隐式调用父类无参构造器" class="headerlink" title="2. 隐式调用父类无参构造器"></a><strong>2. 隐式调用父类无参构造器</strong></h3><ul>
<li><strong>条件</strong>：父类存在无参构造器，且子类未显式调用<code>super(...)</code>。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;  <span class="comment">// 隐式调用super()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Dog构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-显式调用父类有参构造器"><a href="#3-显式调用父类有参构造器" class="headerlink" title="3. 显式调用父类有参构造器"></a><strong>3. 显式调用父类有参构造器</strong></h3><ul>
<li><strong>条件</strong>：父类没有无参构造器或需要传递参数。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);  <span class="comment">// 必须显式调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="五、构造器中的异常处理"><a href="#五、构造器中的异常处理" class="headerlink" title="五、构造器中的异常处理"></a><strong>五、构造器中的异常处理</strong></h2><h3 id="1-抛出异常"><a href="#1-抛出异常" class="headerlink" title="1. 抛出异常"></a><strong>1. 抛出异常</strong></h3><ul>
<li>构造器中可以抛出异常，但需确保对象初始化失败时资源被正确释放。</li>
<li><strong>示例</strong>：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileReader</span><span class="params">(String path)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">new</span> <span class="title class_">File</span>(path).exists()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileNotFoundException</span>(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-异常处理建议"><a href="#2-异常处理建议" class="headerlink" title="2. 异常处理建议"></a><strong>2. 异常处理建议</strong></h3><ul>
<li><strong>避免构造器过于复杂</strong>：复杂的初始化逻辑可拆分为独立方法。</li>
<li><strong>使用工厂模式</strong>：将可能失败的对象创建逻辑移至工厂方法。</li>
</ul>
<hr>
<h2 id="六、构造器与文档生成（Javadoc）"><a href="#六、构造器与文档生成（Javadoc）" class="headerlink" title="六、构造器与文档生成（Javadoc）"></a><strong>六、构造器与文档生成（Javadoc）</strong></h2><h3 id="1-文档注释规范"><a href="#1-文档注释规范" class="headerlink" title="1. 文档注释规范"></a><strong>1. 文档注释规范</strong></h3><ul>
<li>使用<code>/** ... */</code>描述构造器功能和参数。</li>
<li><strong>常用标签</strong>：<code>@param</code>, <code>@throws</code>, <code>@see</code>。</li>
</ul>
<h3 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2. 示例代码"></a><strong>2. 示例代码</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示一个银行账户的类。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个初始余额为0的账户。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BankAccount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">0.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个指定初始余额的账户。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialBalance 初始余额（必须≥0）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException 如果初始余额为负数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BankAccount</span><span class="params">(<span class="type">double</span> initialBalance)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (initialBalance &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;初始余额不能为负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.balance = initialBalance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-生成HTML文档"><a href="#3-生成HTML文档" class="headerlink" title="3. 生成HTML文档"></a><strong>3. 生成HTML文档</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javadoc -d docs -encoding UTF-8 BankAccount.java</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="七、构造器的最佳实践"><a href="#七、构造器的最佳实践" class="headerlink" title="七、构造器的最佳实践"></a><strong>七、构造器的最佳实践</strong></h2><ol>
<li><strong>优先使用不可变对象</strong>：通过构造器初始化所有字段（结合<code>final</code>关键字）。</li>
<li><strong>避免在构造器中调用可重写方法</strong>：可能导致子类状态未初始化。</li>
<li><strong>保持构造器简洁</strong>：复杂初始化逻辑应封装到方法中。</li>
<li><strong>使用Builder模式</strong>：当构造器参数过多时，提高代码可读性。</li>
</ol>
<hr>
<h2 id="八、常见问题与解答"><a href="#八、常见问题与解答" class="headerlink" title="八、常见问题与解答"></a><strong>八、常见问题与解答</strong></h2><h3 id="Q1：构造器能声明为final或static吗？"><a href="#Q1：构造器能声明为final或static吗？" class="headerlink" title="Q1：构造器能声明为final或static吗？"></a><strong>Q1：构造器能声明为<code>final</code>或<code>static</code>吗？</strong></h3><ul>
<li><strong>不能</strong>：构造器隐式为实例方法，不可用<code>static</code>或<code>final</code>修饰。</li>
</ul>
<h3 id="Q2：构造器可以同步（synchronized）吗？"><a href="#Q2：构造器可以同步（synchronized）吗？" class="headerlink" title="Q2：构造器可以同步（synchronized）吗？"></a><strong>Q2：构造器可以同步（synchronized）吗？</strong></h3><ul>
<li><strong>可以</strong>，但不推荐，可能导致死锁或性能问题。</li>
</ul>
<h3 id="Q3：如何实现深拷贝（Deep-Copy）？"><a href="#Q3：如何实现深拷贝（Deep-Copy）？" class="headerlink" title="Q3：如何实现深拷贝（Deep Copy）？"></a><strong>Q3：如何实现深拷贝（Deep Copy）？</strong></h3><ul>
<li>通过构造器复制对象及其引用对象的字段：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(Person other)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = other.name;</span><br><span class="line">        <span class="built_in">this</span>.address = <span class="keyword">new</span> <span class="title class_">Address</span>(other.address);  <span class="comment">// 深拷贝</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a><strong>九、总结</strong></h2><p>构造器是Java对象生命周期的起点，掌握其核心规则和高级用法对编写健壮代码至关重要。合理使用构造器重载、链式调用和异常处理，结合Javadoc生成清晰的API文档，将显著提升代码质量和团队协作效率。</p>
<p>将此内容发布到博客时，建议搭配代码高亮插件和流程图工具（如Mermaid）增强可读性。如果需要进一步补充或调整，请随时告知！</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>《JAVA基础》：面向对象</title>
    <url>/2024/12/23/%E3%80%8AJAVA%E5%9F%BA%E7%A1%80%E3%80%8B%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-1/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>面向过程和面向对象的区别：</p>
<ul>
<li>二者都是一种思想，面向对象是相对于面向过程而言的</li>
<li>面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做；将功能封装进对象，强调具备了功能的对象，以类&#x2F;对象为最小单位，考虑谁来做</li>
<li>面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如抽象、分类、继承、聚合、多态等。</li>
<li>例如，人把大象装进冰箱：</li>
</ul>
<span id="more"></span>

<p><img src="/../images/image-01.png" alt="image-01"></p>
<p>面向对象的思想概述：</p>
<ol>
<li>程序员从面向过程的执行者转变为面向对象的指挥者</li>
<li>面向对象分析方法分析问题的思路和步骤：<ul>
<li>根据问题需要，选择问题所针对的现实世界中的实体。</li>
<li>从实体中寻找解决问题相关的属性和功能，这些属性和功能就形成了概念世界中的类。</li>
<li>把抽象的实体用计算机语言进行描述，形成计算机世界中类的定义。即借助某种程序语言，把类构造成计算机能够识别和处理的数据结构。</li>
<li>将类实例化成计算机世界中的对象。对象是计算机世界中解决问题的最终工具。</li>
</ul>
</li>
</ol>
<p><strong>Java 面向对象的三条主线：</strong></p>
<ol>
<li>类及类的成员：<code>属性</code>，<code>方法</code>，<code>构造器</code>，<code>代码块</code>，<code>内部类</code></li>
<li>关键字：<code>instanceof</code>、<code>this</code>、<code>super</code>、<code>static</code>、<code>final</code>、<code>package</code>、<code>import</code>、<code>abstract</code>、<code>interface</code>等。</li>
<li>面向对象的三大特征：<code>封装性（Encapsulation）</code>、<code>继承性（Inheritance）</code>、<code>多态性（Polymorphism）</code>、<code>（抽象性）</code>。</li>
</ol>
<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>**<code>类（Class）</code><strong>和</strong><code>对象（Object）</code>**是面向对象的核心概念。</p>
<ul>
<li>类是对一类事物的描述，是抽象的、概念上的定义。</li>
<li>对象是实际存在的该类事物的每个个体，因而也称为<code>实例（instance）</code>。</li>
</ul>
<h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>创建 Java 自定义类步骤：</p>
<ol>
<li>定义类：考虑修饰符、类名。</li>
<li>编写类的属性：考虑修饰符、属性类型、属性名、初始化值。</li>
<li>编写类的方法：考虑修饰符、返回值类型、方法名、形参等。</li>
<li>按需编写类的构造器、代码块和内部类等。</li>
</ol>
<p><strong>类的语法格式：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 class 类名 &#123;</span><br><span class="line">    属性声明;</span><br><span class="line">    </span><br><span class="line">    构造器声明;</span><br><span class="line">    </span><br><span class="line">    方法声明;</span><br><span class="line">    </span><br><span class="line">    代码块声明;</span><br><span class="line">    </span><br><span class="line">    内部类声明;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> duixiang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 属性，或成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person类的无参构造方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">boolean</span> isMale)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.isMale = isMale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法，或函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;，年龄：&quot;</span> + age + <span class="string">&quot;，性别：&quot;</span> + (isMale ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person类的代码块执行了&quot;</span>);</span><br><span class="line">        name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">        isMale = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="type">float</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>类的访问机制：</strong></p>
<ul>
<li>在一个类中的访问机制：类中的方法可以直接访问类中的成员变量。例外：static 方法访问非 static 属性，编译不通过。</li>
<li>在不同类中的访问机制： 先创建要访问类的对象， 再用对象访问类中定义的成员</li>
</ul>
<h3 id="对象的定义"><a href="#对象的定义" class="headerlink" title="对象的定义"></a>对象的定义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名 对象名 = <span class="keyword">new</span> 类名();</span><br></pre></td></tr></table></figure>

<p>使用<code>对象名.对象成员</code>的方式访问对象成员，包括属性和方法。示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> legs;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Moving&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 访问属性</span></span><br><span class="line">        animal.legs = <span class="number">4</span>;</span><br><span class="line">        System.out.println(animal.legs);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 访问方法</span></span><br><span class="line">        animal.eat();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 访问方法</span></span><br><span class="line">        animal.move();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>匿名对象</code>：不定义对象的句柄，而直接调用这个对象的方法，这样的对象叫做匿名对象。例如：”new Person().shout();”。如果对一个对象只需要进行一次方法调用，那么就可以使用匿名对象，我们经常将匿名对象作为实参传递给一个方法调用。</p>
<h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><p><code>权限修饰符</code>：置于类的成员定义前，用来限定对象对该类成员的访问权限。权限从小到大排列：<code>private</code>、<code>缺省</code>（什么都不写）、<code>protected</code>、<code>public</code>。</p>
<p><img src="/../images/image-02.png" alt="image-02"></p>
<p>权限修饰符可以用来修饰类及类的内部结构：属性、方法、构造器、内部类。</p>
<ul>
<li><strong>对于 class 的权限修饰只可以用 public 和 default（缺省）。</strong><ul>
<li>public 类可以在任意地方被访问。</li>
<li>default 类只可以被同一个包内部的类访问。</li>
</ul>
</li>
<li><strong>对于 class 的内部结构，四种权限修饰符都可以使用。</strong></li>
</ul>
<p>总结：Java 提供了 4 种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构在被调用时的可见性的大小。</p>
<h3 id="属性（field）"><a href="#属性（field）" class="headerlink" title="属性（field）"></a>属性（field）</h3><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">修饰符 数据类型 属性名 <span class="operator">=</span> 初始化值<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>常用的权限修饰符有：private、缺省、protected、public。其他修饰符：static、final。</li>
<li>数据类型：任何基本数据类型（如 int、boolean 等）或任何引用数据类型。</li>
<li>属性名：属于标识符，符合命名规则和规范即可。</li>
</ul>
<p><strong>属性（成员变量）与局部变量的区别：</strong></p>
<ul>
<li><strong>局部变量的默认初始化值：</strong>局部变量声明后，没有默认初始化值，必须显式赋值，方可使用。特别的，形参在调用时，赋值即可。</li>
<li><strong>成员变量的默认初始化值：</strong>当一个对象被创建时，会对其中各种类型的成员变量自动进行初始化赋值。除了基本数据类型之外的变量类型都是引用类型。</li>
</ul>
<h3 id="方法（method）"><a href="#方法（method）" class="headerlink" title="方法（method）"></a>方法（method）</h3><h4 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h4><p>什么是方法（method 、函数）：</p>
<ul>
<li>方法是类或对象行为特征的抽象，用来完成某个功能操作。在某些语言中也称为函数或过程。</li>
<li>将功能封装为方法的目的是，可以实现代码重用，简化代码。</li>
<li>Java 里的方法不能独立存在，所有的方法必须定义在类里。</li>
</ul>
<p>语法格式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(<span class="selector-attr">[参数类型 形参, ...]</span>) &#123;</span><br><span class="line">    方法体;</span><br><span class="line">    retrun 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>权限修饰符：public，缺省，private，protected 等。</li>
<li>返回值类型：<ul>
<li>没有返回值：使用 void。</li>
<li>有返回值：在方法声明时，必须指定返回值的类型，同时，方法体中需要使用 return 关键字返回指定类型的变量或常量。</li>
</ul>
</li>
<li>方法名 ：属于标识符，命名时遵循标识符命名规则和规范，能够见名知意。</li>
<li>形参列表：可以包含零个，一个或多个参数。多个参数时，中间用 “,” 隔开。</li>
<li>方法体：方法功能的具体实现。</li>
<li>返回值：方法在执行完毕后返还给调用它的程序的数据。</li>
</ul>
<p>方法的调用：</p>
<ul>
<li>方法通过方法名被调用，且只有被调用才会执行。</li>
<li>方法被调用一次，就会执行一次。</li>
<li>没有具体返回值的情况，返回值类型用关键字 void 表示，此时方法体中可以不必使用 return 语句。如果使用，表示用来结束方法。</li>
<li>定义方法时，方法的结果应该返回给调用者，交由调用者处理。</li>
<li>方法中可以调用当前类的属性或方法，不可以在方法内部定义方法。</li>
</ul>
<h4 id="可变个数的形参"><a href="#可变个数的形参" class="headerlink" title="可变个数的形参"></a>可变个数的形参</h4><p>JavaSE 5.0 中提供了<code>Varargs（variable number of arguments）机制</code>，允许直接定义能和多个实参相匹配的形参。从而，可以用一种更简单的方式，来传递个数可变的实参。</p>
<p>语法格式：<code>方法名(参数的类型名... 参数名)</code></p>
<p>可变参数的特点：</p>
<ul>
<li><p>方法参数部分指定类型的参数个数是可变多个 —&gt; 0 个，1 个或多个。</p>
</li>
<li><p><code>可变个数形参的方法与同名的方法之间，彼此构成重载。</code></p>
</li>
<li><p>可变参数方法的使用与方法参数部分使用数组是一致的，二者不共存。如下所示，方法二与方法三是相同的，不共存：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span>... m)</span> &#123;</span><br><span class="line">    <span class="comment">// m 参数等同于数组，与数组的使用方法相同</span></span><br><span class="line">    System.out.println(Arrays.toString(m));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 方法三</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span>[] m)</span> &#123;</span><br><span class="line">    System.out.println(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法的参数部分有可变形参，需要放在形参声明的最后。</p>
</li>
<li><pre><code class="java">// 合法
public static void show(String str, int... m) &#123;
    System.out.println(Arrays.toString(m));
&#125;
 
// 不合法
public static void show(int... m, String str) &#123;
    System.out.println(Arrays.toString(m));
&#125;
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 在一个方法的形参位置，最多只能声明一个可变个数形参。</span><br><span class="line"></span><br><span class="line">#### 方法参数的值传递机制</span><br><span class="line"></span><br><span class="line">方法，必须由其所在类或对象调用才有意义。若方法含有参数：</span><br><span class="line"></span><br><span class="line">- `形参`：方法声明时的参数。</span><br><span class="line">- `实参`：方法调用时实际传给形参的数据。</span><br><span class="line"></span><br><span class="line">Java 的实参值如何传入方法呢？Java 里方法的参数传递方式只有一种：**`值传递`**， 即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。</span><br><span class="line"></span><br><span class="line">- **形参是基本数据类型：将实参基本数据类型变量的`&quot;数据值&quot;`传递给形参。**</span><br><span class="line">- **形参是引用数据类型：将实参引用数据类型变量的`&quot;地址值&quot;`传递给形参。**</span><br><span class="line"></span><br><span class="line">形参是基本数据类型与引用数据类型之间的区别：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ValueTransferTest &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;***************基本数据类型***************&quot;);</span><br><span class="line">        <span class="type">int</span> m = <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> n = m;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;m = &quot; + m + &quot;, n = &quot; + n);</span><br><span class="line">        n = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;m = &quot; + m + &quot;, n = &quot; + n);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;***************引用数据类型***************&quot;);</span><br><span class="line">        <span class="keyword">Order</span> o1 = <span class="built_in">new</span> <span class="keyword">Order</span>();</span><br><span class="line">        o1.orderId = <span class="number">1001</span>;</span><br><span class="line">        <span class="keyword">Order</span> o2 = o1;// 赋值后，o1 和 o2 的地址值相同，都指向了堆空间中的同一个实体</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;o1.orderId = &quot; + o1.orderId + &quot;, o2.orderId = &quot; + o2.orderId);</span><br><span class="line">        o2.orderId = <span class="number">1002</span>;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;o1.orderId = &quot; + o1.orderId + &quot;, o2.orderId = &quot; + o2.orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="keyword">Order</span> &#123;</span><br><span class="line">    <span class="type">int</span> orderId;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">***************基本数据类型***************</span><br><span class="line">m = <span class="number">10</span>, n = <span class="number">10</span></span><br><span class="line">m = <span class="number">10</span>, n = <span class="number">20</span></span><br><span class="line">***************引用数据类型***************</span><br><span class="line">o1.orderId = <span class="number">1001</span>, o2.orderId = <span class="number">1001</span></span><br><span class="line">o1.orderId = <span class="number">1002</span>, o2.orderId = <span class="number">1002</span></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p><strong>对于基本数据类型，两个不同方法内的局部变量，互不影响。</strong>不因变量名相同而改变，因为是将实参基本数据类型变量的 “数据值” 传递给形参。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValueTransferTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;swap方法中, 交换之前: m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> m;</span><br><span class="line">        m = n;</span><br><span class="line">        n = temp;</span><br><span class="line">        System.out.println(<span class="string">&quot;swap方法中, 交换之后: m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;main方法中, 交换之前: m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 能够交换 m 和 n 的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> m;</span><br><span class="line">        m = n;</span><br><span class="line">        n = temp;</span><br><span class="line">        System.out.println(<span class="string">&quot;main方法中, 交换之后: m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 不能够交换 m 和 n 的值</span></span><br><span class="line">        <span class="type">ValueTransferTest</span> <span class="variable">valueTransferTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValueTransferTest</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;main方法中, 调用swap方法之前: m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line">        valueTransferTest.swap(m, n);<span class="comment">// // swap 方法调用完成后，该方法内的局部变量 temp，形参 m 和 n 从栈内存中弹出回收</span></span><br><span class="line">        System.out.println(<span class="string">&quot;main方法中, 调用swap方法之后: m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">main方法中, 交换之前: m = <span class="number">10</span>, n = <span class="number">20</span></span><br><span class="line">main方法中, 交换之后: m = <span class="number">20</span>, n = <span class="number">10</span></span><br><span class="line">main方法中, 调用swap方法之前: m = <span class="number">20</span>, n = <span class="number">10</span></span><br><span class="line">swap方法中, 交换之前: m = <span class="number">20</span>, n = <span class="number">10</span></span><br><span class="line">swap方法中, 交换之后: m = <span class="number">10</span>, n = <span class="number">20</span></span><br><span class="line">main方法中, 调用swap方法之后: m = <span class="number">20</span>, n = <span class="number">10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对于引用数据类型，两个不同方法的局部变量，会互相影响。</strong>因为是将实参引用数据类型变量的 “地址值” 传递给形参，二者指向的是堆内存中的同一个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValueTransferTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Data data)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;swap方法中, 交换之前: data.m = &quot;</span> + data.m + <span class="string">&quot;, data.n = &quot;</span> + data.n);</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> data.m;</span><br><span class="line">        data.m = data.n;</span><br><span class="line">        data.n = temp;</span><br><span class="line">        System.out.println(<span class="string">&quot;swap方法中, 交换之后: data.m = &quot;</span> + data.m + <span class="string">&quot;, data.n = &quot;</span> + data.n);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data</span>();</span><br><span class="line">        data.m = <span class="number">10</span>;</span><br><span class="line">        data.n = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;main方法中, 交换之前: data.m = &quot;</span> + data.m + <span class="string">&quot;, data.n = &quot;</span> + data.n);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 能够交换 m 和 n 的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> data.m;</span><br><span class="line">        data.m = data.n;</span><br><span class="line">        data.n = temp;</span><br><span class="line">        System.out.println(<span class="string">&quot;main方法中, 交换之后: data.m = &quot;</span> + data.m + <span class="string">&quot;, data.n = &quot;</span> + data.n);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 能够交换 m 和 n 的值</span></span><br><span class="line">        <span class="type">ValueTransferTest</span> <span class="variable">valueTransferTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValueTransferTest</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;main方法中, 调用swap方法之前: data.m = &quot;</span> + data.m + <span class="string">&quot;, data. = &quot;</span> + data.n);</span><br><span class="line">        valueTransferTest.swap(data);<span class="comment">// swap 方法调用完成后，该方法内的局部变量 temp 和形参 data 从栈内存中弹出回收</span></span><br><span class="line">        System.out.println(<span class="string">&quot;main方法中, 调用swap方法之后: data.m = &quot;</span> + data.m + <span class="string">&quot;, data.n = &quot;</span> + data.n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    <span class="type">int</span> n;java</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">main方法中, 交换之前: data.m = <span class="number">10</span>, data.n = <span class="number">20</span></span><br><span class="line">main方法中, 交换之后: data.m = <span class="number">20</span>, data.n = <span class="number">10</span></span><br><span class="line">main方法中, 调用swap方法之前: data.m = <span class="number">20</span>, data. = <span class="number">10</span></span><br><span class="line">swap方法中, 交换之前: data.m = <span class="number">20</span>, data.n = <span class="number">10</span></span><br><span class="line">swap方法中, 交换之后: data.m = <span class="number">10</span>, data.n = <span class="number">20</span></span><br><span class="line">main方法中, 调用swap方法之后: data.m = <span class="number">10</span>, data.n = <span class="number">20</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValueTransferTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">first</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">Value</span> <span class="variable">v</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Value</span>();</span><br><span class="line">        v.i = <span class="number">25</span>;</span><br><span class="line">        second(v, i);</span><br><span class="line">        System.out.println(v.i);<span class="comment">// 20</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">second</span><span class="params">(Value v, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        v.i = <span class="number">20</span>;</span><br><span class="line">        <span class="type">Value</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Value</span>();</span><br><span class="line">        v = val;</span><br><span class="line">        System.out.println(v.i + <span class="string">&quot; &quot;</span> + i);<span class="comment">// 15 0</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ValueTransferTest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValueTransferTest</span>();</span><br><span class="line">        test.first();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Value</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>示例二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        method(a, b); <span class="comment">// 需要在代码编写处添加方法method，仅打印出a=100,b=200,请写出方法method的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 代码编写处</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>方法一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a * <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b * <span class="number">20</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        method(a, b);</span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">printStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(System.out) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(String x)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;a = 10&quot;</span>.equals(x)) &#123;</span><br><span class="line">                    x = <span class="string">&quot;a = 100&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;b = 10&quot;</span>.equals(x)) &#123;</span><br><span class="line">                    x = <span class="string">&quot;b = 200&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">super</span>.println(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.setOut(printStream);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        method(a, b);</span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例三：定义一个 int 型的数组<code>int[] arr = new int[]&#123;12,3,3,34,56,77,432&#125;;</code>，让数组的每个位置上的值去除以首位置的元素，得到的结果，作为该位置上的新值，然后遍历新的数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">12</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">34</span>, <span class="number">56</span>, <span class="number">77</span>, <span class="number">432</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算前: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 正确写法一</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = arr[i] / temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 正确写法二</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            arr[i] = arr[i] / arr[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 错误写法，因为第一次循环之后，首位置上的数已经改变，不再是最开始的值</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            arr[i] = arr[i] / arr[0];</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;计算后: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例四：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(arr);<span class="comment">// 地址值</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">char</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        System.out.println(arr1);<span class="comment">// 传入 char 数组时，println 方法体内是遍历这个数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">[I@78308db1</span><br><span class="line">abc</span><br></pre></td></tr></table></figure>

<h4 id="方法的重载（overload）"><a href="#方法的重载（overload）" class="headerlink" title="方法的重载（overload）"></a>方法的重载（overload）</h4><p>概念：<strong>在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。</strong></p>
<p><strong>方法重载的要求：</strong></p>
<ul>
<li>与方法的权限修饰符、返回值类型、形参变量名、方法体都无关，<code>只看参数列表</code>，且参数列表（参数个数、参数类型或参数顺序）必须不同。调用时，根据方法参数列表的不同来区别。</li>
</ul>
<blockquote>
<p>下面示例中，如果方法一不存在，main 方法依然正常执行，此时涉及到的是自动类型转换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> m + n;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">getSum</span><span class="params">(<span class="type">double</span> m, <span class="type">double</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> m + n;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(getSum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="方法的重写（override-x2F-overwrite）"><a href="#方法的重写（override-x2F-overwrite）" class="headerlink" title="方法的重写（override&#x2F;overwrite）"></a>方法的重写（override&#x2F;overwrite）</h4><p>概念：<strong>在子类中可以根据需要，对从父类中继承来的方法进行改造，也称为方法的重置、覆盖。在程序执行时，子类重写的方法将覆盖父类的方法。</strong></p>
<p><strong>方法重写的要求：</strong></p>
<ul>
<li>子类重写的方法必须和父类被重写的方法具有相同的方法名称、参数列表。</li>
<li>子类重写的方法使用的<code>访问权限</code>不能小于父类被重写的方法的访问权限（权限修饰符）。<ul>
<li>子类不能重写父类中声明为 private 权限的方法。</li>
<li>子类中可以声明与父类 private 方法相同名称和参数列表的方法，但不属于重写。</li>
</ul>
</li>
<li>子类重写的方法的<code>返回值类型</code>不能大于父类被重写的方法的返回值类型。<ul>
<li>父类被重写的方法的返回值类型是 void，则子类重写的方法的返回值类型只能是 void。</li>
<li>父类被重写的方法的返回值类型是 A 类型，则子类重写的方法的返回值类型可以是 A 类或 A 类的子类。</li>
<li>父类被重写的方法的返回值类型是基本数据类型（比如：double），则子类重写的方法的返回值类型必须是相同的基本数据类型（即，只能是 double）。</li>
</ul>
</li>
<li>子类重写的方法<code>抛出的异常类型</code>不能大于父类被重写的方法抛出的异常类型。</li>
<li><strong><code>子类与父类中同名同参数的方法必须同时声明为非 static 的（此时属于重写），或者同时声明为 static 的（此时不属于重写）。因为 static 方法是属于类的，子类无法覆盖父类的方法。</code></strong><ul>
<li>此时，子类中的该方法也须遵循重写关于访问权限、返回值和抛出异常类型等方面的规则。</li>
</ul>
</li>
</ul>
<p><strong>方法重载与重写的区别：</strong></p>
<ol>
<li>二者的定义细节：略。</li>
<li>从编译和运行的角度看：重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。<strong>它们的调用地址在编译期就绑定了。</strong>Java 的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。所以：<strong>对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为<code>&quot;早绑定&quot;</code>或<code>&quot;静态绑定&quot;</code>；而对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为<code>&quot;晚绑定&quot;</code>或<code>&quot;动态绑定&quot;</code>。</strong>引用一句 Bruce Eckel 的话：”不要犯傻，如果它不是晚绑定，它就不是多态。”</li>
<li><strong><code>重载不表现为多态性，重写表现为多态性。</code></strong></li>
</ol>
<h4 id="递归方法（recursion）"><a href="#递归方法（recursion）" class="headerlink" title="递归方法（recursion）"></a>递归方法（recursion）</h4><p>定义：一个方法体内调用它自身。方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassObject</span> &#123;</span><br><span class="line">    <span class="comment">// 1 ~ n 之间所有自然数的和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n + getSum(n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 1 ~ n 之间所有自然数的乘积</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getProduct</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n * getProduct(n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 方式一：循环</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;1-100之间自然数的和: &quot;</span> + sum);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 方式二：递归</span></span><br><span class="line">        System.out.println(<span class="string">&quot;1-100之间自然数的和: &quot;</span> + getSum(<span class="number">100</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-100之间自然数的积: &quot;</span> + getProduct(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例二：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 已知有一个数列: f(0) = 1，f(1) = 4，f(n+2) = 2 * f(n+1) + f(n)，其中 n 是大于 0 的整数，求 f(10) 的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassObject</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">f</span>(n - <span class="number">1</span>) + <span class="built_in">f</span>(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> f = <span class="built_in">f</span>(<span class="number">10</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">10497</span></span><br></pre></td></tr></table></figure>

<p>示例三：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 已知一个数列: f(20) = 1，f(21) = 4，f(n+2) = 2 * f(n+1) + f(n)，其中 n 是大于 0 的整数，求 f(10) 的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassObject</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">21</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">f</span>(n + <span class="number">2</span>) - <span class="number">2</span> * <span class="built_in">f</span>(n + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> f = <span class="built_in">f</span>(<span class="number">10</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">-3771</span></span><br></pre></td></tr></table></figure>

<p>示例四：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斐波那契数列：1 1 2 3 5 8 13 21 34 55 ...</span></span><br><span class="line"><span class="comment"> * 规律：一个数等于前两个数之和</span></span><br><span class="line"><span class="comment"> * 要求：计算斐波那契数列（Fibonacci）的第 n 个值，并将整个数列打印出来</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PassObject</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">f</span>(<span class="params"><span class="built_in">int</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span> || n &gt;= <span class="number">30</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span>[] arr = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = f(i + <span class="number">1</span>);</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        System.<span class="keyword">out</span>.println(Arrays.toString(arr));</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;和: &quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">[<span class="meta">1, 1, 2, 3, 5</span>]</span><br><span class="line">和: <span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>示例五：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PassObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> recursion(<span class="built_in">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">count</span>++;</span><br><span class="line">        System.out.println(<span class="string">&quot;count1: &quot;</span> + <span class="keyword">count</span> + <span class="string">&quot;, k: &quot;</span> + k);</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> recursion(k - <span class="number">1</span>) + recursion(k - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        recursion(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">count1: <span class="number">1</span>, k: <span class="number">4</span></span><br><span class="line">count1: <span class="number">2</span>, k: <span class="number">3</span></span><br><span class="line">count1: <span class="number">3</span>, k: <span class="number">2</span></span><br><span class="line">count1: <span class="number">4</span>, k: <span class="number">1</span></span><br><span class="line">count1: <span class="number">5</span>, k: <span class="number">0</span></span><br><span class="line">count1: <span class="number">6</span>, k: <span class="number">-1</span></span><br><span class="line">count1: <span class="number">7</span>, k: <span class="number">0</span></span><br><span class="line">count1: <span class="number">8</span>, k: <span class="number">1</span></span><br><span class="line">count1: <span class="number">9</span>, k: <span class="number">0</span></span><br><span class="line">count1: <span class="number">10</span>, k: <span class="number">-1</span></span><br><span class="line">count1: <span class="number">11</span>, k: <span class="number">2</span></span><br><span class="line">count1: <span class="number">12</span>, k: <span class="number">1</span></span><br><span class="line">count1: <span class="number">13</span>, k: <span class="number">0</span></span><br><span class="line">count1: <span class="number">14</span>, k: <span class="number">-1</span></span><br><span class="line">count1: <span class="number">15</span>, k: <span class="number">0</span></span><br></pre></td></tr></table></figure>



<h3 id="构造器（constructor）"><a href="#构造器（constructor）" class="headerlink" title="构造器（constructor）"></a>构造器（constructor）</h3><p>构造器，也叫构造方法。</p>
<p>作用：</p>
<ol>
<li>创建对象。如：<code>Order o = new Order();</code>。</li>
<li>给对象进行初始化。如：<code>Person p = new Person(“Peter”, 15);</code>。</li>
</ol>
<p>语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 类名(参数列表) &#123;</span><br><span class="line">    初始化语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据参数不同，构造器可以分为如下两类：</p>
<ul>
<li>隐式无参构造器（系统默认提供）。</li>
<li>显式定义一个或多个构造器（无参、有参）。</li>
</ul>
<p>构造器的特征：</p>
<ul>
<li>构造器具有与类相同的名称，不声明返回值类型，与声明为 void 不同。</li>
<li>Java 语言中，<code>每个类都至少有一个构造器</code>。</li>
<li><strong>如果没有显示的定义类的构造器，则系统默认提供一个无参构造器。一旦显式定义了构造器， 则系统不再提供默认构造器。</strong></li>
<li>一般情况下，为了防止一些框架出异常，无论要不要自定义其他构造器，都应该把类的无参构造器显示的定义出来。</li>
<li><strong>构造器的修饰符默认与所属类的修饰符一致，即：public 或 default（缺省）。</strong></li>
<li>构造器不能被 static、final、synchronized、abstract、native 修饰，不能有 return 语句返回值。</li>
<li>一个类中定义的多个构造器，彼此构成重载。</li>
<li>父类的构造器不可被子类继承。</li>
</ul>
<h3 id="代码块（或初始化块）"><a href="#代码块（或初始化块）" class="headerlink" title="代码块（或初始化块）"></a>代码块（或初始化块）</h3><p>代码块的作用：对 Java 类或对象进行初始化。</p>
<p>代码块的分类：一个类中代码块若有修饰符，则只能被 static 修饰，称为<code>静态代码块（static block）</code>，没有使用 static 修饰的，为<code>非静态代码块</code>。</p>
<ul>
<li><strong>静态代码块：</strong><ul>
<li>内部可以有输出语句。</li>
<li><code>随着类的加载而执行，而且只执行一次。</code>（不同于静态方法，静态方法必须在被类显示的调用后，才会执行方法内的语句。）</li>
<li>作用：初始化类的信息。</li>
<li>如果一个类定义了多个静态代码块，则按照声明的先后顺序来执行。一般情况下，不建议定义多个。</li>
<li><code>静态代码块的执行要优先于非静态代码块的执行，与声明的先后顺序无关。</code></li>
<li>静态代码块中，只能调用静态的属性、静态的方法，不能调用非静态的属性、非静态的方法。</li>
</ul>
</li>
<li><strong>非静态代码块：</strong><ul>
<li>内部可以有输出语句。</li>
<li><code>随着对象的创建而执行。</code>（不同于非静态方法，非静态方法必须在被类的对象显示的调用后，才会执行方法内的语句。）</li>
<li><code>每创建一个对象，就执行一次非静态代码块，且先于构造器执行。</code></li>
<li>作用：可以在创建对象时，对对象的属性等进行初始化。</li>
<li>如果一身上个类定义了多个非静态代码块，则按照声明的先后顺序来执行。一般情况下，不建议定义多个。</li>
<li>非静态代码块中，可以调用静态的属性、静态的方法，也可以调用非静态的属性、非静态的方法。</li>
</ul>
</li>
</ul>
<p>代码块及构造器的执行顺序：</p>
<ul>
<li><strong><code>由父及子，静态先行。</code></strong></li>
<li><strong>注意：调用 main() 方法时，需要先加载类，这个过程是早于 main() 方法中的首行执行语句的。</strong></li>
<li>示例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Root</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Root的静态初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Root的普通初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Root</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Root的无参数的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mid</span> <span class="keyword">extends</span> <span class="title class_">Root</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mid的静态初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mid的普通初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mid</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mid的无参数的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mid</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 this 调用同一类中重载的构造器</span></span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Mid的带参数构造器，其参数值：&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Leaf</span> <span class="keyword">extends</span> <span class="title class_">Mid</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Leaf的静态初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Leaf的普通初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Leaf</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 super 调用父类中有一个字符串参数的构造器</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Leaf的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeafTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Leaf</span>();</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Leaf</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">Root的静态初始化块</span><br><span class="line">Mid的静态初始化块</span><br><span class="line">Leaf的静态初始化块</span><br><span class="line">Root的普通初始化块</span><br><span class="line">Root的无参数的构造器</span><br><span class="line">Mid的普通初始化块</span><br><span class="line">Mid的无参数的构造器</span><br><span class="line">Mid的带参数构造器，其参数值：ABC</span><br><span class="line">Leaf的普通初始化块</span><br><span class="line">Leaf的构造器</span><br><span class="line"> </span><br><span class="line">Root的普通初始化块</span><br><span class="line">Root的无参数的构造器</span><br><span class="line">Mid的普通初始化块</span><br><span class="line">Mid的无参数的构造器</span><br><span class="line">Mid的带参数构造器，其参数值：ABC</span><br><span class="line">Leaf的普通初始化块</span><br><span class="line">Leaf的构造器</span><br></pre></td></tr></table></figure>

<ul>
<li><p>示例二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;11111111111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;22222222222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;33333333333&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// main 方法是一个静态方法，执行某个类的 main 方法之前，要先加载这个类，此处是 Father 类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;77777777777&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;44444444444&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;55555555555&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;66666666666&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// main 方法是一个静态方法，执行某个类的 main 方法之前，要先加载这个类，此处是先加载 Son 类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; <span class="comment">// 由父及子 静态先行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;77777777777&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// main 方法是一个静态方法，执行某个类的 main 方法之前，要先加载这个类，此处是先加载 Test 类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;77777777777&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;************************&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>调用 Father 类的 main() 方法，要先加载 Father 类。输出结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">F: 11111111111</span><br><span class="line">F/m: 77777777777</span><br><span class="line">F/m: ************************</span><br><span class="line">S: 44444444444</span><br><span class="line">F: 22222222222</span><br><span class="line">F: 33333333333</span><br><span class="line">S: 55555555555</span><br><span class="line">S: 66666666666</span><br><span class="line">F/m: ************************</span><br><span class="line">F: 22222222222</span><br><span class="line">F: 33333333333</span><br><span class="line">S: 55555555555</span><br><span class="line">S: 66666666666</span><br><span class="line">F/m: ************************</span><br><span class="line">F: 22222222222</span><br><span class="line">F: 33333333333</span><br></pre></td></tr></table></figure>


</li>
<li><p>调用 Son 类的 main() 方法，要先加载 Son 类。输出结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">F: 11111111111</span><br><span class="line">S: 44444444444</span><br><span class="line">S/m: 77777777777</span><br><span class="line">S/m: ************************</span><br><span class="line">F: 22222222222</span><br><span class="line">F: 33333333333</span><br><span class="line">S: 55555555555</span><br><span class="line">S: 66666666666</span><br><span class="line">S/m: ************************</span><br><span class="line">F: 22222222222</span><br><span class="line">F: 33333333333</span><br><span class="line">S: 55555555555</span><br><span class="line">S: 66666666666</span><br><span class="line">S/m: ************************</span><br><span class="line">F: 22222222222</span><br><span class="line">F: 33333333333</span><br></pre></td></tr></table></figure>


</li>
<li><p>调用 Test 类的 main() 方法，要先加载 Test 类。输出结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">T/m: 77777777777</span><br><span class="line">T/m: ************************</span><br><span class="line">F: 11111111111</span><br><span class="line">S: 44444444444</span><br><span class="line">F: 22222222222</span><br><span class="line">F: 33333333333</span><br><span class="line">S: 55555555555</span><br><span class="line">S: 66666666666</span><br><span class="line">T/m: ************************</span><br><span class="line">F: 22222222222</span><br><span class="line">F: 33333333333</span><br><span class="line">S: 55555555555</span><br><span class="line">S: 66666666666</span><br><span class="line">T/m: ************************</span><br><span class="line">F: 22222222222</span><br><span class="line">F: 33333333333</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为当前外部事物提供服务，那么整个内部的完整结构最好使用<code>内部类</code>。</p>
<ul>
<li>在 Java 中，允许一个类 A 声明在另一个类 B 的内部，则类 A 称为内部类，类 B 称为外部类。</li>
<li>Inner class一般用在定义它的类或语句块之内，在外部引用它时必须给出完整的名称。Inner class 的名字不能与包含它的外部类类名相同。</li>
</ul>
<p>内部类的分类：成员内部类（静态的、非静态的），局部内部类（代码块内、构造器内、方法内）。</p>
<h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><p>成员内部类的特点：</p>
<ul>
<li>一方面，作为外部类的成员：<ul>
<li>调用外部类的结构，注意生命周期，如静态成员内部类不能调用外部类非静态的方法。</li>
<li>可以被 static 修饰，但此时就不能再使用外层类的非 static 的成员变量。注意，外部类不能被 static 修饰。</li>
<li>可以被 private、protected、缺省和 public 四种权限修饰符修饰。注意，外部类不能被 private 和 protected 修饰。</li>
</ul>
</li>
<li>另一方面，作为一个类：<ul>
<li>类内可以定义属性、方法、构造器、代码块、内部类等。</li>
<li>可以被 final 修饰，表示此类不能被继承，如果不使用 final，就可以被继承。</li>
<li>可以被 abstract 修饰，表示此类不能被实例化，可以被其它的内部类继承。</li>
<li>编译以后生成 OuterClass$InnerClass.class 字节码文件（也适用于局部内部类）。</li>
</ul>
</li>
<li>非 static 的成员内部类中的成员不能声明为 static 的，只有在外部类或 static 的成员内部类中才可声明 static 成员。</li>
<li>外部类访问成员内部类的成员，需要 “内部类.成员” 或 “内部类对象.成员” 的方式。</li>
<li>成员内部类可以直接使用外部类的所有成员，包括私有的数据。</li>
<li>当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的。</li>
</ul>
<h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><p>局部内部类的特点：</p>
<ul>
<li>局部内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的 .class 文件，但是前面冠以外部类的类名和 $ 符号，以及数字编号。</li>
<li>只能在声明它的方法或代码块中使用，而且是先声明后使用，除此之外的任何地方都不能使用该类。</li>
<li>局部内部类的对象可以通过外部方法的返回值返回使用，返回值类型只能是局部内部类的父类或父接口类型。</li>
<li>局部内部类可以使用外部类的成员，包括私有的。</li>
<li><code>局部内部类可以使用外部方法的局部变量，但是必须是 final 的，final 可以省略（JDK 8 及之后），但这个局部变量赋值后不能有再次修改操作，否则编译不通过。</code>这是因为局部内部类和局部变量的声明周期不同所致。</li>
<li>局部内部类和局部变量地位类似，不能使用 public，缺省，protected 和 private 修饰。</li>
<li>局部内部类不能使用 static 修饰，因此也不能包含静态成员。</li>
</ul>
<h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>匿名内部类不能定义任何静态成员、方法和类，只能创建匿名内部类的一个实例。一个匿名内部类一定是在 new 的后面，用其隐含实现一个接口或实现一个类。</p>
<p>语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类构造器(实参列表)|实现接口() &#123;</span><br><span class="line">    匿名内部类的类体部分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>匿名内部类的特点：</p>
<ul>
<li>匿名内部类必须继承父类或实现接口。</li>
<li>匿名内部类只能有一个对象。</li>
<li>匿名内部类对象只能使用多态形式引用</li>
</ul>
<h4 id="内部类的应用"><a href="#内部类的应用" class="headerlink" title="内部类的应用"></a>内部类的应用</h4><p>关注如下的 3 个问题：</p>
<ul>
<li><p>如何实例化成员内部类的对象？</p>
<ul>
<li>静态成员内部类：<code>外部类.静态内部类 变量名 = new 外部类.静态内部类();</code>。</li>
<li>非静态成员内部类：<code>外部类.非静态内部类 变量名 = new 外部类().new 非静态内部类();</code>。</li>
</ul>
</li>
<li><p>如何在成员内部类中区分调用外部类的结构？</p>
<ul>
<li><p>静态成员内部类，参考：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;形参：&quot;</span> + age);</span><br><span class="line">    System.out.println(<span class="string">&quot;静态成员内部类的静态属性：&quot;</span> + Brain.age);</span><br><span class="line">    System.out.println(<span class="string">&quot;外部类的静态属性：&quot;</span> + Person.age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>非静态成员内部类，参考：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;形参：&quot;</span> + name);</span><br><span class="line">    System.out.println(<span class="string">&quot;非静态成员内部类的非静态属性：&quot;</span> + <span class="built_in">this</span>.name);<span class="comment">// 非静态成员内部类，不能定义 static 的变量</span></span><br><span class="line">    System.out.println(<span class="string">&quot;外部类的非静态属性：&quot;</span> + Person.<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>开发中局部内部类的使用？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassTest1</span> &#123;</span><br><span class="line">    <span class="comment">// 这种局部内部类，开发中很少见</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 返回一个实现类 Comparable 接口的类的对象</span></span><br><span class="line">    <span class="keyword">public</span> Comparable <span class="title function_">getComparable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个实现了 Comparable 接口的类：局部内部类</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 方式一：创建 Comparable 接口的非匿名实现类的匿名对象</span></span><br><span class="line">        <span class="comment">/*class MyComparable implements Comparable &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public int compareTo(Object o) &#123;</span></span><br><span class="line"><span class="comment">                return 0;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">        return new MyComparable();*/</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 方式二：创建 Comparable 接口的匿名实现类的匿名对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Comparable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>成员内部类和局部内部类应用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建 Brain 实例---静态的成员内部类</span></span><br><span class="line">        Person.<span class="type">Brain</span> <span class="variable">brain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>.Brain();</span><br><span class="line">        brain.think();</span><br><span class="line">        brain.show(<span class="number">8</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 2. 创建 Hand 实例---非静态的成员内部类</span></span><br><span class="line">        Person.<span class="type">Hand</span> <span class="variable">hand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>().<span class="keyword">new</span> <span class="title class_">Hand</span>();</span><br><span class="line">        hand.grasp();</span><br><span class="line">        hand.show(<span class="string">&quot;外来手&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 静态成员内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Brain</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Brain</span><span class="params">()</span> &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">think</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;大脑想东西&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;形参：&quot;</span> + age);</span><br><span class="line">            System.out.println(<span class="string">&quot;静态成员内部类的静态属性：&quot;</span> + Brain.age);</span><br><span class="line">            System.out.println(<span class="string">&quot;外部类的静态属性：&quot;</span> + Person.age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 非静态成员内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Hand</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;内部手&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Hand</span><span class="params">()</span> &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">grasp</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;手抓东西&quot;</span>);</span><br><span class="line">            <span class="comment">// 调用 Person 外部类的方法</span></span><br><span class="line">            Person.<span class="built_in">this</span>.eat();<span class="comment">// 等价于 eat()，注意方法的生命周期</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;形参：&quot;</span> + name);</span><br><span class="line">            System.out.println(<span class="string">&quot;非静态成员内部类的非静态属性：&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">            System.out.println(<span class="string">&quot;外部类的非静态属性：&quot;</span> + Person.<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 静态代码块内局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 非静态代码块内局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">BB</span> &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 构造器内局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">CC</span> &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 静态方法内局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">DD</span> &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 非静态方法内局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">EE</span> &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>匿名内部类应用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Product p)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;购买了一个&quot;</span> + p.getName() + <span class="string">&quot;，花掉了&quot;</span> + p.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnonymousTest</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnonymousTest</span>();</span><br><span class="line">        <span class="comment">// 调用 test 方法时，需要传入一个 Product 参数</span></span><br><span class="line">        <span class="comment">// 此处传入其匿名实现类的实例</span></span><br><span class="line">        ta.test(<span class="keyword">new</span> <span class="title class_">Product</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">567.8</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;AGP显卡&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>面试题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        s1.a = <span class="number">10</span>;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        s2.a = <span class="number">20</span>;</span><br><span class="line">        Test.<span class="type">Inner</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>.Inner();</span><br><span class="line">        System.out.println(s3.a);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">r</span> <span class="operator">=</span> t.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        System.out.println(r.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>**<code>a instanceof A</code>**：检验对象 a 是否为类 A 的对象实例，如果是，返回 true，如果不是，返回 false。</p>
<p>使用情景：为了避免向下转型时出现 java.lang.ClassCastException，在向下转型之前，先进行 instanceof 判断，在返回 true 时，才进行向下转型。</p>
<ul>
<li><p>要求 a 所属的类与类 A 必须是子类和父类的关系，否则编译错误。</p>
</li>
<li><p>如果 a 属于类 A 的子类 B，a instanceof A 的返回值也为 true。</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105046910-1803242936.png" alt="image-20210226172858254"></p>
</li>
</ul>
<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>**<code>this</code>**：</p>
<ul>
<li>this 理解为：当前对象或当前正在创建的对象。</li>
<li>this 可以用来修饰或调用：属性、方法、构造器。</li>
<li>this 修饰属性和方法：<ul>
<li>在类的方法中，可以使用 “this.属性” 或 “this.方法” 的方式，调用当前属性或方法。<ul>
<li>通常情况下，可以省略 “this.”。</li>
<li>特殊情况下，如果方法的形参和类的属性同名，则必须显示的使用 “this.变量” 的方式，表明此变量是属性，而非形参。</li>
</ul>
</li>
<li>在类的构造器中，可以使用 “this.属性” 或 “this.方法” 的方式，调用当前正在创建的对象的属性或方法。<ul>
<li>通常情况下，可以省略 “this.”。</li>
<li>特殊情况下，如果构造器的形参和类的属性同名，则必须显示的使用 “this.变量” 的方式，表明此变量是属性，而非形参。</li>
</ul>
</li>
<li><strong>使用 this 访问属性和方法时，如果在本类中未找到，会从父类中查找。</strong></li>
</ul>
</li>
<li>this 调用构造器：<ul>
<li>在类的构造器中，可以显示的使用 “this(形参列表)” 的方式，调用本类中的其他构造器。<ul>
<li>存在构造器的多重调用时，创建的对象仍然是只有一个，而不是调用一个构造器就创造了一个新的对象，只有最开始被调用的构造器才创造了对象。</li>
</ul>
</li>
<li>构造器中，不能使用 “this(形参列表)” 的方式调用自己。</li>
<li>如果一个类中有 n 个构造器，则最多有 n - 1 个构造器中使用了 “this(形参列表)”。<ul>
<li>构造器在彼此调用时，不能形成一个封闭环，如：构造器 A 中调用了构造器 B，则在构造器 B 中不能再调用构造器 A，多构造器调用类推。</li>
</ul>
</li>
<li><strong>规定：”this(形参列表)” 必须声明在当前构造器的首行。</strong></li>
<li>一个构造器内部，最多只能声明一个 “this(形参列表)”，即只能调用一个其他的构造器。</li>
</ul>
</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 无参构造器</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.eat();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 带 name 的构造器</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>();<span class="comment">// 调用无参构造器</span></span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 带 name 和 age 的构造器</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>(name);<span class="comment">// 调用带 name 的构造器</span></span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.name;<span class="comment">// 此处 this 可以省略</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.age;<span class="comment">// 此处 this 可以省略</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;人吃饭&quot;</span>);</span><br><span class="line">      <span class="built_in">this</span>.study();<span class="comment">// this 调用方法，此处 this 可以省略</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.eat();<span class="comment">// this 调用方法，此处 this 可以省略</span></span><br><span class="line">      System.out.println(<span class="string">&quot;人学习&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boy</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Boy</span><span class="params">()</span> &#123;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Boy</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">marray</span><span class="params">(Girl girl)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;我想娶&quot;</span> + girl.getName());</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;我想找对象&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Girl</span><span class="params">()</span> &#123;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Girl</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">marry</span><span class="params">(Boy boy)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;我想嫁给&quot;</span> + boy.getName());</span><br><span class="line">      boy.marray(<span class="built_in">this</span>);<span class="comment">// 传入当前 Girl 对象</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Girl girl)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.age - girl.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="string">&quot;罗密欧&quot;</span>, <span class="number">20</span>);</span><br><span class="line">      boy.shout();</span><br><span class="line">      <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;朱丽叶&quot;</span>, <span class="number">18</span>);</span><br><span class="line">      girl.marry(boy);</span><br><span class="line"> </span><br><span class="line">      <span class="type">Girl</span> <span class="variable">girl2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;祝英台&quot;</span>, <span class="number">19</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;年龄差：&quot;</span> + girl.compare(girl2));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>**<code>super</code>**：</p>
<ul>
<li>super 理解为：父类的。</li>
<li>super 可以用来调用父类的：属性、方法、构造器。</li>
<li>在子类的方法或构造器中，可以通过使用 “super.属性” 或 “super.方法” 的形式，显示的调用父类中声明的属性或方法。<ul>
<li>通常情况下，可以省略 “super.”。</li>
<li>特殊情况：当子类和父类中定义了同名的属性时，要想在子类中调用父类中声明的该属性，则必须显示的使用 “super.属性” 的方式，表明调用的是父类中声明的属性。</li>
<li>特殊情况：当子类重写了父类中的方法以后，要想在子类中调用父类中被重写的方法时，则必须显示的使用 “super.方法” 的方式，表明调用的是父类中被重写的方法。</li>
</ul>
</li>
<li>在子类的构造器中，可以通过使用 “super(形参列表)” 的形式，显示的调用父类中声明的指定的构造器。<ul>
<li>“super(形参列表)” 的使用，必须声明在子类构造器的首行。</li>
<li>在类的构造器中，针对于 “this(形参列表)” 或 “super(形参列表)”，只能二选一，不能同时出现。</li>
<li>在构造器的首行，如果没有显示的声明 “this(形参列表)” 或 “super(形参列表)”，则默认调用的是父类中空参的构造器，即：<code>super();</code>。<ul>
<li>子类中所有的构造器默认都会访问父类中空参的构造器。</li>
<li>当父类中没有空参的构造器时，子类的构造器必须通过 “this(形参列表)” 或 “super(形参列表)” 语句，指定调用本类或者父类中相应的构造器。同时，只能二选一，且必须放在构造器的首行。</li>
<li>如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则编译出错。</li>
</ul>
</li>
<li>在类的多个构造器中，至少有一个类的构造器中使用了 “super(形参列表)”，调用父类中的构造器。</li>
</ul>
</li>
</ul>
<p><strong>this 和 super 的区别：</strong></p>
<table>
<thead>
<tr>
<th>区别点</th>
<th>this</th>
<th>super</th>
</tr>
</thead>
<tbody><tr>
<td>访问属性</td>
<td>访问本类中的属性，如果本类没有此属性，则从父类中继续查找</td>
<td>直接访问父类中的属性</td>
</tr>
<tr>
<td>调用方法</td>
<td>访问本类中的方法，如果本类没有此方法，则从父类中继续查找</td>
<td>直接访问父类中的方法</td>
</tr>
<tr>
<td>调用构造器</td>
<td>调用本类构造器，必须放在构造器的首行</td>
<td>调用父类构造器，必须放在子类构造器的首行</td>
</tr>
</tbody></table>
<p>思考：</p>
<ul>
<li>为什么 “super(形参列表)” 和 “this(形参列表)” 调用语句不能同时在一个构造器中出现？<ul>
<li>因为 “super(形参列表)” 和 “this(形参列表)” 调用语句都必须出现在构造器中的首行。</li>
</ul>
</li>
<li>为什么 “super(形参列表)” 和 “this(形参列表)” 只能作为构造器中的第一句出现？<ul>
<li>因为无论通过哪个构造器创建子类对象，都需要保证先初始化父类。这样做的目的是：当子类继承父类后，可以获得父类中所有的属性和方法，这样子类就有必要在一开始就知道父类是如何为对象进行初始化。</li>
</ul>
</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的空参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// String name;// 父类中已有的属性，可以省略</span></span><br><span class="line">    <span class="comment">// int age;// 父类中已有的属性，可以省略</span></span><br><span class="line">    String major;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1001</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String major)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 父类中已有的方法，可以省略，如有需要，可以重写</span></span><br><span class="line">    <span class="comment">// public void eat() &#123;</span></span><br><span class="line">    <span class="comment">//     System.out.println(&quot;吃饭&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 重写父类的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类中的id: &quot;</span> + <span class="built_in">this</span>.id);<span class="comment">// this 可以省略，就近原则</span></span><br><span class="line">        System.out.println(<span class="string">&quot;父类中的id: &quot;</span> + <span class="built_in">super</span>.id);<span class="comment">// 子类与父类有同名的属性 id，此时 super 不可以省略</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>当编写一个类时，其实就是在描述其对象的属性和行为，而并没有产生实质上的对象，只有通过 new 关键字才会产生出对象，这时系统才会分配内存空间给对象，其方法才可以供外部调用。有时候，希望无论是否产生了对象或无论产生了多少对象的情况下，<code>某些特定的数据在内存空间里只有一份</code>。例如：所有的中国人都有个国家名称，每一个中国人都共享这个国家名称，不必在每一个中国人的实例对象中都单独分配一个用于代表国家名称的变量。</p>
<p>实例变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">2.0</span>); <span class="comment">// c1.radius=2.0</span></span><br><span class="line">        <span class="type">Circle</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">3.0</span>); <span class="comment">// c2.radius=3.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上述代码中，c1 的 radius 独立于 c2 的 radius，存储在不同的空间。c1 中的 radius 变化不会影响 c2 的 radius，反之亦然。</li>
<li>像 Circle 类中的变量 radius 这样的，叫<code>实例变量 (instance variable)</code>，它属于类的每一个对象，不能被同一个类的不同对象所共享。</li>
<li>如果想让一个类的所有实例共享数据，就用<code>类变量</code>。类变量的定义，就需要用到<code>static</code>关键字。</li>
</ul>
<p>**<code>static</code>**：</p>
<ul>
<li><p>static：静态的。</p>
</li>
<li><p>static 可以用来修饰：属性、方法、代码块、内部类。</p>
</li>
<li><p>static 修饰后的成员具备以下特点：</p>
<ul>
<li><code>随着类的加载而加载。</code></li>
<li><code>优先于对象存在。</code></li>
<li>修饰的成员，被所有对象所共享。</li>
<li>访问权限允许时，可不创建对象，直接被类调用。</li>
</ul>
</li>
<li><p>使用 static 修饰属性：<code>静态变量（类变量/class variable）</code>。</p>
<ul>
<li>属性，按是否使用 static 修饰，分为：静态属性和非静态属性（实例变量）。<ul>
<li>实例变量：当创建了类的多个对象，每个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象的非静态属性时，不会导致其他对象中同样的属性值被修改。</li>
<li>静态变量：当创建了类的多个对象，每个对象都共用同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改之后的值。 <strong>注意：实际操作时，虽然编译能通过，但不应该通过类的实例对象来访问静态成员。</strong></li>
<li><code>静态变量随着类的加载而加载</code>，可以通过<code>&quot;类.静态变量&quot;</code>的方式进行调用。</li>
<li>静态变量的加载要早于对象的创建。实例变量在创建对象的过程中，或创建对象之后，才创建。</li>
<li>由于类只会加载一次，则静态变量在内存中也只会存在一份：保存在<code>方法区的静态域</code>中。</li>
<li>类可以访问静态变量，但不能访问实例变量（实例变量在对象产生时才生成），对象可以访问实例变量，也能访问静态变量（不推荐）。</li>
</ul>
</li>
<li>静态变量举例：System.out，Math.PI。</li>
</ul>
</li>
<li><p>使用 static 修饰方法：<code>静态方法（类方法/class method）</code>。</p>
<ul>
<li><code>静态方法随着类的加载而加载</code>，可以通过<code>&quot;类.静态方法&quot;</code>的方式进行调用。</li>
<li>类可以访问静态方法，但不能访问非静态方法（非静态方法在对象产生时才生成），对象可以访问非静态方法，也能访问静态方法（不推荐）。</li>
<li><strong><code>静态方法中，只能调用静态属性或静态方法，它们的生命周期是一致的。非静态方法中，既可以调用非静态属性或非静态方法，也能调用静态属性或静态方法。</code></strong></li>
</ul>
</li>
<li><p>static 使用的注意点：</p>
<ul>
<li><p><code>在静态方法内，不能使用 this 关键字、super 关键字。</code>（this 和 super 指向当前类对象和父类对象，需要创建实例对象后才有这些概念。）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法见下面的示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 省略的是 Chiese.，而不是 this.</span></span><br><span class="line">    walk();<span class="comment">// 等同于 Chinese.walk();</span></span><br><span class="line">    System.out.println(<span class="string">&quot;nation: &quot;</span> + nation);<span class="comment">// 等同于 System.out.println(Chinese.nation);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>static 修饰的方法不能被重写。</code></strong></p>
</li>
<li><p>关于静态属性和静态方法的使用，从生命周期的角度去理解。</p>
</li>
</ul>
</li>
</ul>
<p><strong>类属性、类方法的设计思想：</strong></p>
<ul>
<li>类属性作为该类各个对象之间共享的变量，在设计类时，分析哪些<code>属性不因对象的不同而改变</code>，将这些属性设置为类属性，相应的方法设置为类方法。</li>
<li>如果<code>方法与调用者无关</code>，则这样的方法通常被声明为类方法，由于<code>不需要创建对象就可以调用类方法</code>，从而简化了方法的调用。</li>
<li>类中的<code>常量</code>，通常也声明为 static 的。</li>
<li><code>操作静态属性的方法</code>，通常设置为 static 的。</li>
<li><code>工具类中的方法</code>，习惯上声明为 static 的。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Chinese</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line">        c1.name = <span class="string">&quot;姚明&quot;</span>;</span><br><span class="line">        c1.age = <span class="number">40</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="type">Chinese</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chinese</span>();</span><br><span class="line">        c2.name = <span class="string">&quot;马龙&quot;</span>;</span><br><span class="line">        c2.age = <span class="number">30</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 通过 c1 对象修改 nation 的值，c2 对象也能获得</span></span><br><span class="line">        <span class="comment">// 实际操作时，虽然编译能过通过，但不应该通过类的实例对象来访问静态成员</span></span><br><span class="line">        c1.nation = <span class="string">&quot;CHN&quot;</span>;</span><br><span class="line">        System.out.println(c2.nation);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 对象实例调用非静态方法</span></span><br><span class="line">        c1.eat();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 类调用静态方法</span></span><br><span class="line">        Chinese.show();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 通过 c1 对象也能调用非静态方法</span></span><br><span class="line">        <span class="comment">// 实际操作时，虽然编译能过通过，但不应该通过类的实例对象来访问静态成员</span></span><br><span class="line">        c1.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">static</span> String nation;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 调用非静态结构</span></span><br><span class="line">        <span class="built_in">this</span>.info();</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 调用静态结构</span></span><br><span class="line">        walk();</span><br><span class="line">        System.out.println(<span class="string">&quot;nation: &quot;</span> + nation);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age + <span class="string">&quot;, nation: &quot;</span> + nation);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是中国人&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 不能调用非静态的结构</span></span><br><span class="line">        <span class="comment">// eat();</span></span><br><span class="line">        <span class="comment">// name = &quot;Tom&quot;;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 调用静态的结构</span></span><br><span class="line">        walk();</span><br><span class="line">        System.out.println(<span class="string">&quot;nation: &quot;</span> + nation);<span class="comment">// 省略的是Chiese.，而不是this.，等同于 System.out.println(Chinese.nation);</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>final：</p>
<ul>
<li><p>理解为：最终的。</p>
</li>
<li><p>final 可以用来修饰：类、方法、变量（属性是成员变量，是变量的其中一种）。</p>
</li>
<li><p>final 用来修饰类：<code>此类不能被其他类所继承</code>。例如：String 类、System 类、StringBuffer 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 错误，final 类不能被继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>final 用来修饰方法：<code>此方法不能被子类重写</code>。例如：Object 类中的 getClass()。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="comment">// 错误，final 方法不能被子类重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>final 用来修饰变量：<code>此时的 &quot;变量&quot; 称为常量，名称大写，且只能被赋值一次</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">totalNumber</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> ID;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 可以在构造器中给 final 修饰的 &quot;变量&quot; 赋值</span></span><br><span class="line">        ID = ++totalNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        System.out.println(t.ID);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">I</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> J;</span><br><span class="line">        J = <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// 非法</span></span><br><span class="line">        <span class="comment">// J = 30;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>final 修饰成员变量</code>：必须在声明时或代码块中或在每个构造器中显式赋值，否则编译不通过。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalTest</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 显式初始化：所有对象的这个常量值都是相同的，可以考虑直接显式初始化</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WIDTH</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 2. 代码块中初始化：如果涉及到调用方法，或赋值操作较多，可以考虑代码块中初始化</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> HEIGHT;</span><br><span class="line"> </span><br><span class="line">    &#123;</span><br><span class="line">        HEIGHT = show();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 3. 构造器中初始化：如果涉及到调用方法，或赋值操作较多，可以考虑代码块中初始化</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> LEFT;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FinalTest</span><span class="params">()</span> &#123;</span><br><span class="line">        LEFT = show();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FinalTest</span> <span class="variable">finalTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FinalTest</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>final 修饰局部变量</code>：修饰方法内局部变量时，表明该变量是一个常量，不能被修改；修饰形参时，表明此形参是一个常量，当调用此方法时，给常量形参赋一个实参，一旦赋值以后，就只能在方法体内使用此形参，但不能被修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalTest</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 修饰方法内局部变量：常量，不能被再次更改</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NUM</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span> NUM;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 2. 修饰形参：当方法被调用时，传入的实参，不能被再次更改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FinalTest</span> <span class="variable">finalTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FinalTest</span>();</span><br><span class="line">        finalTest.show(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>static final</code>用来修饰属性：<code>全局常量</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalTest</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WIDTH</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> HEIGHT;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        HEIGHT = show();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FinalTest</span><span class="params">()</span> &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FinalTest</span> <span class="variable">finalTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FinalTest</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>面试题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Something</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addOne</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">// return ++x;// 编译不通过</span></span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">1</span>;<span class="comment">// 正常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Something</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addOne</span><span class="params">(<span class="keyword">final</span> Other o)</span> &#123;</span><br><span class="line">        <span class="comment">// o = new Other();// 编译不通过</span></span><br><span class="line">        o.i++;<span class="comment">// 正常</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Other</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Other</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Something</span>().addOne(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>**<code>package</code>**：作为 Java 源文件的第一条语句，指明该文件中定义的类所在的包。若缺省该语句，则指定为无名包。</p>
<p>语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 顶层包名.子包名;</span><br></pre></td></tr></table></figure>

<ul>
<li>包对应于文件系统的目录，package 语句中，用<code>.</code>来指明包（目录）的层次。</li>
<li>包属于标识符，遵循标识符的命名规范，通常用小写单词标识。通常使用所在公司域名的倒置，如：com.zeloud.xxx。</li>
<li>同一个包下，不能命名同名的接口、类。不同的包下，可以命名同名的接口、类。</li>
</ul>
<p>JDK 中主要的包：</p>
<ul>
<li><code>java.lang</code>：包含一些 Java 语言的核心类，如 String、Math、Integer、 System 和 Thread，提供常用功能。</li>
<li><code>java.net</code>：包含执行与网络相关的操作的类和接口。</li>
<li><code>java.io</code>：包含能提供多种输入&#x2F;输出功能的类。</li>
<li><code>java.util</code>：包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。</li>
<li><code>java.text</code>：包含了一些 Java 格式化相关的类。</li>
<li><code>java.sql</code>：包含了 Java 进行 JDBC 数据库编程的相关类&#x2F;接口。</li>
<li><code>java.awt</code>：包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面（GUI）。（B&#x2F;S 和 C&#x2F;S）</li>
</ul>
<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>**<code>import</code>**：为使用定义在不同包中的 Java 类，需用 import 语句来引入指定包层次下所需要的类或全部类（.*）。import 语句告诉编译器到哪里去寻找类。</p>
<p>语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 包名.类名;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在源文件中使用 import 语句，可以显式的导入指定包下的类或接口。</p>
</li>
<li><p>声明在包的声明和类的声明之间。</p>
</li>
<li><p>如果需要导入多个类或接口，那么就并列显式声明多个 import 语句即可。</p>
</li>
<li><p>举例：可以使用 “import java.util.*;” 的方式，一次性导入 java.util 包下所有的类或接口。</p>
</li>
<li><p>如果导入的类或接口是 java.lang 包下的，或者是当前包下的，则可以省略此 import 语句。</p>
</li>
<li><p>如果在代码中使用不同包下的同名的类，那么使用时需要使用类的全类名的方式指明调用的是哪个类。</p>
</li>
<li><p>如果已经导入 java.a 包下的类，那么如果需要使用 a 包的子包下的类的话，仍然需要导入。</p>
</li>
<li><p><code>import static 组合</code>的使用：导入指定类或接口下的静态的属性或方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        out.println(<span class="string">&quot;打印方法&quot;</span>);<span class="comment">// 可以省略 System</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>《Java详解》-抽象类</title>
    <url>/2024/12/25/%E3%80%8AJava%E8%AF%A6%E8%A7%A3%E3%80%8B-%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1、什么是抽象类"><a href="#1-1、什么是抽象类" class="headerlink" title="1.1、什么是抽象类"></a>1.1、什么是抽象类</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">    在Java中使用最多的就是类，类用于抽象一类事物，是将现实世界的事物通过抽象的方式给描述成为一个类，该类具有这一类事物的属性和行为，通过new关键字可以实例化类，在程序世界中按照类的描述创建一个对象。而当一个类提供的信息不足以实例化一个具体的对象时，或者说当前类的行为不符合具体对象的行为时，我们是不会将当前类实例化对象的，这种类一般被定义为抽象类。举个例子：定义一个宠物类，其中定义成员属性：姓名、年龄、毛色，定义成员行为：吃饭，睡觉等，这个时候我们看宠物类，宠物宠物，是哪一种动物？有点指代不清，并且不同的宠物吃的东西不一样，宠物狗吃狗粮，宠物猫吃猫粮，也就是说宠物类提供的信息不足以描述一个具体的对象，因此我们不会实例化宠物类这个对象，而是将其设置为抽象类。</span><br><span class="line">    </span><br><span class="line">    简而言之，言而简之，当一个类内部定义的成员变量成员方法不足以描述一个具体的对象时，便将该类定义为抽象类</span><br></pre></td></tr></table></figure>

<p>   <span id="more"></span></p>
<h3 id="1-2、定义抽象类"><a href="#1-2、定义抽象类" class="headerlink" title="1.2、定义抽象类"></a>1.2、定义抽象类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在Java中，如果被<span class="keyword">abstract</span>关键字修饰一个类，那么当前类被称之为抽象类</span><br><span class="line"></span><br><span class="line">访问修饰符   <span class="keyword">abstract</span>   class   类名&#123;     &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3、什么是抽象方法"><a href="#1-3、什么是抽象方法" class="headerlink" title="1.3、什么是抽象方法"></a>1.3、什么是抽象方法</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"> 宠物类不是一个具体的动物，那么其内部的eat（）方法就无法具体实现，具体的eat（）方法只有子类具体的动物对象才可以实现。像这种无法定义具体实现内容的方法我们可以将其设置为抽象方法。</span><br></pre></td></tr></table></figure>

<h3 id="1-4、定义抽象方法"><a href="#1-4、定义抽象方法" class="headerlink" title="1.4、定义抽象方法"></a>1.4、定义抽象方法</h3><p>    被abstract关键字修饰方法，那么当前方法被称之为抽象方法，抽象方法不需要写方法体，只有方法声明，没有具体的方法实现，没有{ }。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">访问修饰符  <span class="keyword">abstract</span>  返回类型  方法名（参数列表）；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;<span class="comment">//当前Animal类为抽象类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;<span class="comment">//eat（）方法为抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;<span class="comment">//fly（）方法为抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="二、特点"><a href="#二、特点" class="headerlink" title="二、特点"></a>二、特点</h2><h3 id="2-1、抽象类的特点"><a href="#2-1、抽象类的特点" class="headerlink" title="2.1、抽象类的特点"></a>2.1、抽象类的特点</h3><h4 id="2-1-1、抽象类不可以实例化对象"><a href="#2-1-1、抽象类不可以实例化对象" class="headerlink" title="2.1.1、抽象类不可以实例化对象"></a>2.1.1、抽象类不可以实例化对象</h4><p>本身就是因为当前类提供的信息不足以描述一个具体的类才将当前类设置为抽象类的，而又将抽象类进行实例化对象，那么得到的结果将得不偿失，抽象类不支持实例化对象，也就是不可以通过new关键字实例化对象。</p>
<h4 id="2-1-2、抽象类必须要被继承"><a href="#2-1-2、抽象类必须要被继承" class="headerlink" title="2.1.2、抽象类必须要被继承"></a>2.1.2、抽象类必须要被继承</h4><p>抽象类存在的意义本身就是为了被继承，抽象类没有被继承本身抽象类又不可以实例化对象，那么定义当前抽象类来干什么？</p>
<h4 id="2-1-3、抽象类的子类"><a href="#2-1-3、抽象类的子类" class="headerlink" title="2.1.3、抽象类的子类"></a>2.1.3、抽象类的子类</h4><p>抽象类的子类必须要重写抽象类当中的全部抽象方法，否则一直爆红，即抽象类当中只要是被<a href="https://so.csdn.net/so/search?q=abstract%E5%85%B3%E9%94%AE%E5%AD%97&spm=1001.2101.3001.7020">abstract关键字</a>修饰的方法都被强制重写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">// 实现抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有一种方法可以让子类不用重写父类抽象类当中的抽象方法，就是将子类也定义为抽象类，这样当前情况就是抽象类继承抽象类无需重写抽象方法，但是最终还是逃不过重写抽象方法的，该来的还是会来跑不掉的，即便子类是抽象类，那么只要是抽象类结果都是被继承，那么子类抽象类的子类还是要重写抽象方法，而且还是重写父类和父类的父类两个类的抽象方法</p>
<p>这也就意味着抽象类的子类可以有两种选择：<br>1、子类也定义为抽象类<br>2、子类不是抽象类<br>不过最终的结果还是继承普通类，即便子类是抽象类也2逃不过被继承的命运最终还是要重写全部都抽象方法</p>
<h4 id="2-1-4、抽象类的成员"><a href="#2-1-4、抽象类的成员" class="headerlink" title="2.1.4、抽象类的成员"></a>2.1.4、抽象类的成员</h4><p>抽象类和普通类基本一致，普通类有的抽象类都有，抽象类当中可以定义成员变量，构造器（同样支持重载），普通成员方法，抽象方法。<br>唯一和普通类不同的就是：普通类不可以定义抽象方法，抽象类可以定义抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ab;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">protected</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name, <span class="type">int</span> age, String color)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-2、抽象方法的特点"><a href="#2-2、抽象方法的特点" class="headerlink" title="2.2、抽象方法的特点"></a>2.2、抽象方法的特点</h3><h4 id="2-2-1、只能有方法声明，不能有方法体"><a href="#2-2-1、只能有方法声明，不能有方法体" class="headerlink" title="2.2.1、只能有方法声明，不能有方法体"></a>2.2.1、只能有方法声明，不能有方法体</h4><p> 当方法被abstract关键字修饰时，当前方法就是抽象方法，那么当前方法就不能够有具体的实现细节，将方法头编写完整后直接加上“；”，不可以加{ }，否则系统会爆红。</p>
<p>当方法被关键字abstract修饰时，该方法注定了要被子类重写，因此当前方法没必要再编写具体的实现细节了，语法也不支持编写方法体。</p>
<h4 id="2-2-2、抽象方法只存在于抽象类当中"><a href="#2-2-2、抽象方法只存在于抽象类当中" class="headerlink" title="2.2.2、抽象方法只存在于抽象类当中"></a>2.2.2、抽象方法只存在于抽象类当中</h4><p>抽象类当中可以不包含抽象方法，但是抽象方法必须存在于抽象类当中，这也就意味着：抽象方法不能存在普通类中。</p>
<h4 id="2-2-3、抽象方法必须要能够被继承"><a href="#2-2-3、抽象方法必须要能够被继承" class="headerlink" title="2.2.3、抽象方法必须要能够被继承"></a>2.2.3、抽象方法必须要能够被继承</h4><p>抽象类存在的意义就是被继承，抽象方法的存在就是被重写，那么抽象方法必须要满足重写的条件，这也就意味着抽象方法不能够被：static关键字，final关键字，private关键字修饰，被这三个关键字修饰的方法都不支持重写</p>
<p>也就是说：abstract关键字和static关键字，final关键字，private关键字不能共存，就像是this（）和super（）不能同时出现一样。</p>
<h4 id="2-2-4、其子类必须要重写抽象方法"><a href="#2-2-4、其子类必须要重写抽象方法" class="headerlink" title="2.2.4、其子类必须要重写抽象方法"></a>2.2.4、其子类必须要重写抽象方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ab;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">protected</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name, <span class="type">int</span> age, String color)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span> age, String color)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age, color);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、应用"><a href="#三、应用" class="headerlink" title="三、应用"></a>三、应用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ab;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">protected</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name, <span class="type">int</span> age, String color)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span> age, String color)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name, <span class="type">int</span> age, String color)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.printf(name + <span class="string">&quot;在走\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>    可能会有人说：普通的类也可以定义普通方法，然后其继承的子类也可以重写这些普通方法啊，那这样子抽象类有什么意义？定义成为抽象类然后子类一定要重写抽象方法和子类重写普通父类的普通方法有什么区别吗？这不是脱裤子放屁多此一举吗？<br>    <br>    事实上使用抽象类相当于多了一层编译器的校验，在很多时候，实际的工作不应该由父类来完成，而应该由子类来完成，父类本身的作用就是实现共性的抽取，实现代码的复用，而且大多数情况下父类所提供的信息都是不足以描述一个具体的对象的。那么此时我们一不小心误用了父类，使用普通方法是不会报错的，但是使用抽象类，当父类实例化的时候会提示错误，让我们尽早的发现并解决问题。这也就意味着抽象类本质上是一种预防出错的机制。</p>
<p>    很多语法存在的意义都是为了“预防出错” ，例如我们曾经使用fianl关键字，当我们定义变量后，不再对该变量进行更改时，该变量不就相当于是常量吗？但我们使用final关键字时就多了一层预防机制，当我们不小心对该变量进行了修改，编译器就会及时的提醒我们，让我们及时修改错误，避免出现不必要的麻烦。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>《JAVA基础》：面向对象</title>
    <url>/2024/12/24/%E3%80%8AJAVA%E5%9F%BA%E7%A1%80%E3%80%8B%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-2/</url>
    <content><![CDATA[<h2 id="OOP-三大特征"><a href="#OOP-三大特征" class="headerlink" title="OOP 三大特征"></a>OOP 三大特征</h2><h3 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h3><p>**<code>封装性的设计思想：隐藏对象内部的复杂性，只对外公开简单的接口。</code>**便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。</p>
<p>程序设计追求<code>&quot;高内聚，低耦合&quot;</code>：</p>
<ul>
<li>高内聚：类的内部数据操作细节自己完成，不允许外部干涉。</li>
<li>低耦合：仅对外暴露少量的方法用于使用。</li>
</ul>
<span id="more"></span>

<p>Java 中通过将对象的属性声明为私有的（private），再提供公共的（public）方法 —&gt; <code>getXxx()</code>和<code>setXxx()</code>，来实现对属性的操作，并以此达到<code>信息的封装和隐藏</code>的目的：</p>
<ul>
<li>隐藏一个类中不需要对外提供的实现细节。</li>
<li>使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作。</li>
<li>便于修改，增强代码的可维护性。</li>
</ul>
<p>封装性的体现：<code>属性私有</code>、<code>方法私有</code>、<code>构造器私有</code>（如单例模式）等。</p>
<blockquote>
<p>封装性的体现，需要权限修饰符的配合。</p>
</blockquote>
<h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p><strong>如果多个类中存在相同的属性和行为时，将这些内容抽取到单独一个类中，那么这多个类无需再定义这些属性和行为，只要继承那个抽出来的类即可。</strong></p>
<p>此处的多个类称为<code>子类（派生类、subclass）</code>，单独的这个类称为<code>父类（基类、超类、superclass）</code>。可以理解为：”子类 is a 父类”。</p>
<p>类继承语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">SuperClass</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>继承性的作用：</strong></p>
<ul>
<li>继承的出现减少了代码冗余，提高了代码的复用性。</li>
<li>继承的出现，更有利于功能的扩展。</li>
<li>继承的出现，让类与类之间产生了关系，提供了多态的前提。</li>
</ul>
<p><strong>继承性的特点：</strong></p>
<ul>
<li>子类继承了父类，就继承了父类中声明的所有属性和方法。<strong>特别的，父类中声明为 private 的属性和方法，子类继承父类以后，仍然认为子类获取了父类中私有的结构，只是因为封装性的影响，使得子类的实例不能直接调用父类的这些私有的结构而已（事实上，父类的实例，也不能直接调用这些私有的结构）。</strong></li>
<li>在子类中，可以使用父类中定义的方法和属性，也可以声明创建子类特有的属性和方法，以实现功能的扩展。</li>
<li>在 Java 中，继承的关键字用的是<code>extends</code>，即子类不是父类的子集，而是对父类的扩展。</li>
</ul>
<p><strong>继承性的规则：</strong></p>
<ul>
<li>子类不能直接访问父类中私有的（private）的成员变量和方法。</li>
<li>Java 只支持<code>单继承</code>和<code>多层继承</code>，不允许多重继承。<ul>
<li>一个子类只能有一个父类。</li>
<li>一个父类可以派生出多个子类。</li>
<li>此处强调的是 Java 类的单继承性，Java 中，接口是可以多继承的。</li>
</ul>
</li>
<li>子类和父类是一个相对概念。子类直接继承的父类，称为直接父类，间接继承的父类，称为间接父类。</li>
<li>子类继承父类后，就获取了直接父类及所有间接父类中声明的属性和方法。</li>
<li>所有的 Java 类（除 java.lang.Object 类之外），都直接或间接继承 java.lang.Object。即，Java 中所有的类，都是 Object 类的子类。</li>
</ul>
<h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><p><strong><code>多态性，也叫对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）。</code></strong></p>
<ul>
<li><p>一个变量只能有一种确定的数据类型。</p>
</li>
<li><p>一个引用类型变量可能指向（引用）多种不同类型的对象。</p>
</li>
<li><p>子类可看做是特殊的父类，所以父类类型的引用可以指向子类的对象：<code>向上转型（upcasting）</code>。</p>
</li>
<li><p>一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加的属性和方法：</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105046504-523109260.png" alt="image-20210226115046078"></p>
</li>
</ul>
<p>多态的使用：</p>
<ul>
<li><strong>虚拟方法调用。</strong></li>
<li>有了对象的多态性以后，在编译期，只能调用父类中声明的方法，但在运行期，实际执行的是子类中重写的父类的方法。</li>
<li><strong><code>编译，看左边；运行，看右边。</code></strong><ul>
<li>Java 引用变量有两个类型：<code>编译时类型</code>和<code>运行时类型</code>。编译时类型由声明该变量时使用的类型决定，运行时类型由实际赋给该变量的对象决定。</li>
<li><code>若编译时类型和运行时类型不一致，就出现了对象的多态性。</code></li>
<li>多态情况下，看左边：看的是父类的引用（父类中不具备子类特有的方法），看右边：看的是子类的对象（实际运行的是子类重写父类的方法）。</li>
</ul>
</li>
<li><code>对象的多态性，只适用于方法，不适用于属性。</code>对于属性，编译期和运行期，看的都是左边，即都是父类中声明的那个属性。<ul>
<li>成员方法：编译时，要查看引用变量所声明的类中是否有所调用的方法。运行时，调用实际 new 的对象所属的类中的重写方法。</li>
<li>成员变量：不具备多态性，只看引用变量所声明的类。</li>
</ul>
</li>
<li>子类继承父类：<ul>
<li>若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法，系统将不可能把父类里的方法转移到子类中。<ul>
<li>编译，看左边；运行，看右边。</li>
</ul>
</li>
<li>对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量，这个实例变量依然不可能覆盖父类中定义的实例变量。<ul>
<li>编译，运行，都看左边。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="type">int</span> age;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;人吃饭&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;人走路&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 对象的多态性：父类的引用指向子类的对象</span></span><br><span class="line">      <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">      <span class="comment">// 多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写的父类的方法---&gt;虚拟方法调用</span></span><br><span class="line">      <span class="comment">// 编译期，只能调用父类 Person 类中的方法；运行期，执行的是子类 Man 类中的方法</span></span><br><span class="line">      person.eat();</span><br><span class="line">      person.walk();</span><br><span class="line">      <span class="comment">// 不能调用子类特有的属性或方法，因为编译时, person 是 Person 类型，而 Person 类中没有子类的这个特有属性或方法</span></span><br><span class="line">      <span class="comment">// 有了对象的多态性以后，内存中实际上是加载了子类特有的属性或方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法，子类中特有的属性和方法不能调用</span></span><br><span class="line">      <span class="comment">// person.isSmoking = true;</span></span><br><span class="line">      <span class="comment">// person.earnMoney();</span></span><br><span class="line">      </span><br><span class="line">      System.out.println(<span class="string">&quot;*********************************&quot;</span>)</span><br><span class="line">      <span class="comment">// 如何才能使用子类特有的属性和方法？</span></span><br><span class="line">      <span class="comment">// 向下转型：使用强制类型转换符</span></span><br><span class="line">      <span class="type">Man</span> <span class="variable">man</span> <span class="operator">=</span> (Man) person;</span><br><span class="line">      man.isSmoking = <span class="literal">true</span>;</span><br><span class="line">      man.earnMoney();</span><br><span class="line">      <span class="comment">// 使用强转时，可能出现 java.lang.ClassCastException 异常</span></span><br><span class="line">      <span class="type">Woman</span> <span class="variable">woman</span> <span class="operator">=</span> (Woman) person;</span><br><span class="line">      woman.goShopping();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">父类空参构造器</span><br><span class="line">子类空参构造器</span><br><span class="line">男人多吃肉，长肌肉</span><br><span class="line">男人霸气的走路</span><br><span class="line">*********************************</span><br><span class="line">男人负责挣钱养家</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="type">boolean</span> isSmoking;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">earnMoney</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;男人负责挣钱养家&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;男人多吃肉，长肌肉&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;男人霸气的走路&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FieldMethodTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Sub</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">        System.out.println(s.count);<span class="comment">// 20</span></span><br><span class="line">        s.display();<span class="comment">// 20</span></span><br><span class="line">        <span class="type">Base</span> <span class="variable">b</span> <span class="operator">=</span> s;</span><br><span class="line">        <span class="comment">// 对于引用数据，== 比较的是两个引用数据类型变量的地址值</span></span><br><span class="line">        System.out.println(b == s);<span class="comment">// true</span></span><br><span class="line">        System.out.println(b.count);<span class="comment">// 10</span></span><br><span class="line">        b.display();<span class="comment">// 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例三：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterviewTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">        base.add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);<span class="comment">// sub_1</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">Sub</span> <span class="variable">s</span> <span class="operator">=</span> (Sub) base;</span><br><span class="line">        s.add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);<span class="comment">// sub_2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span>... arr)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;base&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub_1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 这个方法没有重写，在 Base 类中不存在这样声明的方法，也就没有多态，所以 base.add(1, 2, 3) 方法输出 sub_1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub_2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多态性的使用前提：</p>
<ul>
<li><strong><code>有类的继承关系。</code></strong></li>
<li><strong><code>有方法的重写。</code></strong></li>
<li>如果没有以上两个前提，就不存在多态。</li>
</ul>
<p>多态性的优点：</p>
<ul>
<li><p>提高了代码的通用性，常称作<code>接口重用</code>。</p>
</li>
<li><p>方法声明的形参类型为父类类型，可以使用子类的对象作为实参调用该方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalTest</span> &#123;</span><br><span class="line">    <span class="comment">// 多态的使用：传入的是 Animal 对象，但实际传入的可以是 Animal 的子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        animal.eat();</span><br><span class="line">        animal.shout();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnimalTest</span> <span class="variable">animalTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnimalTest</span>();</span><br><span class="line"> </span><br><span class="line">        animalTest.func(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">        animalTest.func(<span class="keyword">new</span> <span class="title class_">Cat</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物：进食&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物：叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪！汪！汪！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵！喵！喵！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 举例二</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="comment">// 此方法可以传入任意对象，而不需要每个特定对象都创建一次 method() 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="comment">// 方法体	</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象类、接口的使用：<code>抽象类和接口不能实例化，它们的使用也体现了多态。</code></p>
</li>
</ul>
<p>虚拟方法调用：</p>
<ul>
<li><p>正常的方法调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">e.getInfo();</span><br><span class="line"><span class="type">Student</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">e.getInfo();</span><br></pre></td></tr></table></figure>
</li>
<li><p>虚拟方法调用（多态情况下）：子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为**<code>虚拟方法</code>**，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">e.getInfo();<span class="comment">// 调用 Student 类的 getInfo() 方法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编译时类型和运行时类型：上面代码中，编译时 e 为 Person 类型，而方法的调用是在运行时确定的，所以调用的是 Student 类的 getInfo() 方法 —&gt; **<code>动态绑定</code>**。</p>
</li>
<li><p><strong><code>重写是多态，重载不是。</code></strong></p>
</li>
<li><p>示例：</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105046110-167762069.png" alt="image-20210226131836066"></p>
</li>
</ul>
<p>多态是编译时行为还是运行时行为?</p>
<ul>
<li><p>**<code>多态是运行时行为</code>**，证明方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterviewTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title function_">getInstance</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Sheep</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 因为 key 需要在运行时才能得到值，编译期时无法判断 getInstance() 方法输出什么</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);</span><br><span class="line">        System.out.println(key);</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> getInstance(key);</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal eat food&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat eat fish&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog eat bone&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sheep</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sheep eat grass&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="抽象性"><a href="#抽象性" class="headerlink" title="抽象性"></a>抽象性</h3><h4 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h4><p>随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。类的设计应该保证父类和子类能够共享特征。有时将一个父类设计得非常抽象，以至于它没有具体的实例，这样的类叫做抽象类。</p>
<p>抽象类应用：抽象类是用来模型化那些父类无法确定全部实现，而是由其子类提供具体实现的对象的类。</p>
<p>**<code>abstract</code>**：</p>
<ul>
<li>abstract：抽象的。</li>
<li>abstract 可以用来修饰：类、方法。<ul>
<li>abstract 不能修饰变量、代码块、构造器。</li>
<li>abstract 不能修饰私有方法、静态方法、final 的方法、final 的类。</li>
</ul>
</li>
<li>abstract 修饰类：<code>抽象类</code>。<ul>
<li><code>抽象类不能实例化</code>。</li>
<li>抽象类中一定有构造器，便于子类实例化时调用，但抽象类本身不能使用构造器。</li>
<li>开发中，会提供抽象类的子类，让子类对象实例化，完成相关操作。</li>
</ul>
</li>
<li>abstract 修饰方法：<code>抽象方法</code>。<ul>
<li>抽象方法只有方法声明，没有方法体，以分号结束。比如：public abstract void talk();。</li>
<li>包含抽象方法的类，一定是一个抽象类。反之，<code>抽象类中可以没有抽象方法</code>。</li>
<li>若子类重写了父类（不仅包括直接父类，也包括间接父类）中的<code>所有的</code>抽象方法后，此子类方可实例化；若子类没有重写父类中的所有的抽象方法，则此子类也是一个抽象类，需要使用 abstract 修饰。</li>
</ul>
</li>
</ul>
<h4 id="抽象类的匿名子类对象"><a href="#抽象类的匿名子类对象" class="headerlink" title="抽象类的匿名子类对象"></a>抽象类的匿名子类对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Student student)</span> &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        person.eat();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 匿名对象</span></span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Student</span>());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 1. 创建非匿名类的非匿名的对象</span></span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line">        method1(worker);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 2. 创建非匿名类的匿名的对象</span></span><br><span class="line">        method1(<span class="keyword">new</span> <span class="title class_">Worker</span>());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 3. 创建匿名子类的非匿名的对象：p</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 重写方法体</span></span><br><span class="line">                System.out.println(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        method1(p);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 4. 创建匿名子类的匿名对象</span></span><br><span class="line">        method1(<span class="keyword">new</span> <span class="title class_">Person</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 重写方法体</span></span><br><span class="line">                System.out.println(<span class="string">&quot;,,,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 重写方法体</span></span><br><span class="line">        System.out.println(<span class="string">&quot;、、、&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h4><p>一方面，有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，<code>Java 不支持多重继承</code>。有了接口，就可以得到多重继承的效果。另一方面，有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有 is - a 的关系，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打印机、扫描仪、摄像头、充电器、MP3 机、手机、数码相机、移动硬盘等都支持 USB 连接。</p>
<p>接口就是规范，定义的是一组规则，体现了现实世界中 “如果你是&#x2F;要…则必须能…” 的思想。继承是一个 “是不是” 的关系，而接口实现则是 “能不能” 的关系。</p>
<p>接口的本质是契约，标准，规范，就像我们的法律一样，制定好后大家都要遵守。</p>
<p>接口的定义：</p>
<ul>
<li><p>接口使用<code>interface</code>定义。</p>
</li>
<li><p>接口中<code>不能定义构造器</code>，意味着接口不可以实例化。</p>
</li>
<li><p>如何定义接口中的成员：</p>
<ul>
<li><p>JDK 7 及以前：只能定义全局常量和抽象方法。</p>
<ul>
<li><code>全局常量</code>：接口中的所有成员变量都<code>默认由 public static final 修饰</code>的。书写时，可以省略，但含义不变，常量不能被更改。</li>
<li><code>抽象方法</code>：接口中的所有抽象方法都<code>默认由 public abstract 修饰</code>的。</li>
</ul>
</li>
<li><p>JDK 8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法。</p>
<ul>
<li><p><code>静态方法</code>：使用<code>static</code>关键字修饰，默认为 public 的。</p>
<ul>
<li>只能通过<code>接口直接调用</code>，并执行其方法体。</li>
</ul>
</li>
<li><p><code>默认方法</code>：使用<code>default</code>关键字修饰，默认为 public 的。</p>
<ul>
<li><p>可以通过<code>实现类的对象来调用</code>，如果实现类重写了接口中的默认方法，调用时，执行的是重写后的方法。</p>
</li>
<li><p>如果子类（或实现类）继承的父类和实现的接口中，声明了同名同参数的默认方法，那么子类在没有重写此方法的情况下， 默认调用的是父类中的同名同参数的方法 —&gt; <code>类优先原则</code>。如果重写了，调用子类重写的方法。</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105045792-195910201.png" alt="image-20220505082232062"></p>
</li>
<li><p>如果实现类实现了多个接口，而多个接口中定义了同名同参数的默认方法，那么在实现类没有重写此方法的情况下，编译不通过 —&gt; <code>接口冲突</code>。如果要避免接口冲突，则在实现类中，必须重写此方法。</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105045483-704874856.png" alt="image-20220505082303861"></p>
</li>
<li><p>在子类（或实现类）的方法中，使用<code>super.方法名</code>调用父类的方法，使用<code>接口名.super.方法名</code>调用接口中的方法。</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105045142-1697955679.png" alt="image-20210303132422993"></p>
</li>
</ul>
</li>
<li><p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceA</span> &#123;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接口A：静态方法1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接口A：默认方法2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接口A：默认方法3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接口A：默认方法4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接口A：默认方法5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceB</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接口B：默认方法5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 静态方法</span></span><br><span class="line">        InterfaceA.method1();</span><br><span class="line"> </span><br><span class="line">        <span class="type">SubClass</span> <span class="variable">subClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubClass</span>();</span><br><span class="line">        <span class="comment">// 2. 默认方法</span></span><br><span class="line">        subClass.method2();</span><br><span class="line">        <span class="comment">// 3. 重写的默认方法</span></span><br><span class="line">        subClass.method3();</span><br><span class="line">        <span class="comment">// 4. 调用的是父类中的 method4()</span></span><br><span class="line">        subClass.method4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuperClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类：方法4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">SuperClass</span> <span class="keyword">implements</span> <span class="title class_">InterfaceA</span>, InterfaceB &#123;</span><br><span class="line">    <span class="comment">// 重写接口 InterfaceA 中的 method3()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现类：方法3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 重写了父类 SuperClass 的 method4()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现类：方法4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// InterfaceA 和 InterfaceB 声明了同名同参的 method5()，SubClass 中必须重写此方法，否则接口冲突，编译不通过</span></span><br><span class="line">    <span class="comment">// 如果继承的父类 SuperClass 中也声明了同名同参的 method5()，则不会出现接口冲突</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现类：方法5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        method2();<span class="comment">// InterfaceA 的method2()</span></span><br><span class="line"> </span><br><span class="line">        method3();<span class="comment">// 重写的 InterfaceA 的 method3()</span></span><br><span class="line">        InterfaceA.<span class="built_in">super</span>.method3();<span class="comment">// InterfaceA 的 method3()</span></span><br><span class="line"> </span><br><span class="line">        method4();<span class="comment">// 重写的 SuperClass 的 method4()</span></span><br><span class="line">        <span class="built_in">super</span>.method4();<span class="comment">// 父类 SuperClass 的 method4()</span></span><br><span class="line"> </span><br><span class="line">        InterfaceA.<span class="built_in">super</span>.method5();<span class="comment">// InterfaceA 的 method5()</span></span><br><span class="line">        InterfaceB.<span class="built_in">super</span>.method5();<span class="comment">// InterfaceB 的 method5()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>接口的使用：</p>
<ul>
<li><p>Java 中，接口和类是并列的两个结构，或者可以理解为一种特殊的类。从本质上讲，接口是一种特殊的抽象类。</p>
</li>
<li><p>Java 中，接口都通过让类去实现的方式（<code>implements</code>）来使用（<code>面向接口编程</code>）。</p>
</li>
<li><p>如果实现类覆盖了接口中（包括直接接口和间接接口）的所有抽象方法，则此实现类可以实例化。如果实现类没有覆盖接口（包括直接接口和间接接口）中所有的抽象方法，则此实现类仍为一个抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;MyInterface&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">absM1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SubInterface</span> <span class="keyword">extends</span> <span class="title class_">MyInterface</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">absM2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 实现类 SubAdapter 必须给出接口 SubInterface 以及父接口 MyInterface 中所有方法的实现</span></span><br><span class="line"><span class="comment">// 否则，SubAdapter 仍需声明为 abstract 的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubAdapter</span> <span class="keyword">implements</span> <span class="title class_">SubInterface</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">absM1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;absM1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">absM2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;absM2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Java 类可以实现多个接口</code>，弥补了 Java 类单继承性的局限性。</p>
<ul>
<li>格式：<code>class SubClass extends SuperClass implements InterfaceA, InterfaceB, InterfaceC &#123;&#125;</code></li>
</ul>
</li>
<li><p><code>接口与接口之间可以继承，而且可以多继承，使用关键字 extends</code>，但接口不能多实现接口。</p>
<ul>
<li>格式：<code>interface InterfaceA extends InterfaceB, InterfaceC &#123;&#125;</code></li>
</ul>
</li>
<li><p>与继承关系类似，接口与实现类之间体现了多态性。</p>
</li>
<li><p>接口，实际上可以看作是一种规范。</p>
</li>
<li><p>示例：</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105044785-1550630351.png" alt="image-20210303092504018"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Flyable.MAX_SPEED);</span><br><span class="line">        System.out.println(Flyable.MIN_SPEED);</span><br><span class="line"> </span><br><span class="line">        <span class="type">Plane</span> <span class="variable">plane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Plane</span>();</span><br><span class="line">        plane.fly(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="comment">// 全局常量，可以省略 public static final</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">MAX_SPEED</span> <span class="operator">=</span> <span class="number">7900</span>;<span class="comment">// 第一宇宙速度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">MIN_SPEED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 抽象方法，可以省略 public abstract</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Attackable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 全部实现接口中的方法，可以实例化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Plane</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;飞机起飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;飞机降落&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 未全部实现接口中的方法，仍是一个抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Kite</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;风筝在飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 实现多个接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span>, Attackable &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子弹起飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子弹停止&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子弹具有攻击性&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>面试题：</p>
<ul>
<li><p>抽象类与接口有哪些异同？</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105044419-1286683543.png" alt="image-20210303100025773"></p>
<ul>
<li><strong>接口能继承接口；</strong></li>
<li><strong>抽象类能继承接口（如不完全实现接口方法的类，还是抽象类）；</strong></li>
<li><strong>抽象类能继承非抽象类（如抽象类的父类 Object）。</strong></li>
</ul>
</li>
<li><p>排错：</p>
<ul>
<li><p>因为接口 A 和父类 B 是并列的，所以需要明确变量 x 的所属，如果 A 是 B 的父类，那么在 C 中就近原则，x 会认为是 B 的属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x2</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pX</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(x);<span class="comment">// error: Reference to &#x27;x&#x27; is ambiguous, both &#x27;B.x&#x27; and &#x27;A.x&#x27; match</span></span><br><span class="line">        <span class="comment">// System.out.println(A.x);// 0</span></span><br><span class="line">        <span class="comment">// System.out.println(super.x);// 1</span></span><br><span class="line">        System.out.println(x1);<span class="comment">// 2</span></span><br><span class="line">        System.out.println(x2);<span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">C</span>().pX();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接口中的所有成员变量都默认是 public static final 的，不能在实现类中被重写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Playable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bounceable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Rollable</span> <span class="keyword">extends</span> <span class="title class_">Playable</span>, Bounceable &#123;</span><br><span class="line">    <span class="type">Ball</span> <span class="variable">BALL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ball</span>(<span class="string">&quot;PingPang&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ball</span> <span class="keyword">implements</span> <span class="title class_">Rollable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Ball</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// play() 方法被认为是即重写了接口 Playable，又重写了接口 Bounceable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        BALL = <span class="keyword">new</span> <span class="title class_">Ball</span>(<span class="string">&quot;Football&quot;</span>);<span class="comment">// error: Cannot assign a value to final variable &#x27;BALL&#x27;</span></span><br><span class="line">        System.out.println(BALL.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="接口匿名实现类的对象"><a href="#接口匿名实现类的对象" class="headerlink" title="接口匿名实现类的对象"></a>接口匿名实现类的对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 1. 创建接口的非匿名实现类的非匿名对象</span></span><br><span class="line">        <span class="type">Flash</span> <span class="variable">flash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Flash</span>();</span><br><span class="line">        computer.transferData(flash);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 2. 创建接口的非匿名实现类的匿名对象</span></span><br><span class="line">        computer.transferData(<span class="keyword">new</span> <span class="title class_">Printer</span>());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 3. 创建接口的匿名实现类的非匿名对象</span></span><br><span class="line">        <span class="type">USB</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">USB</span>() &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;手机开始工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;手机停止工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        computer.transferData(phone);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 4. 创建接口的匿名实现类的匿名对象</span></span><br><span class="line">        computer.transferData(<span class="keyword">new</span> <span class="title class_">USB</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;mp3开始工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;mp3停止工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferData</span><span class="params">(USB usb)</span> &#123;</span><br><span class="line">        usb.start();</span><br><span class="line">        transferDetails();</span><br><span class="line">        usb.stop();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">transferDetails</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体传输数据的细节&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">USB</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Flash</span> <span class="keyword">implements</span> <span class="title class_">USB</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;U盘开启工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;U盘停止工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Printer</span> <span class="keyword">implements</span> <span class="title class_">USB</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印机开启工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印机停止工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="子类对象实例化过程"><a href="#子类对象实例化过程" class="headerlink" title="子类对象实例化过程"></a>子类对象实例化过程</h2><p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105044019-557204616.png" alt="image-20210226153054261"></p>
<p>从结果上看：</p>
<ul>
<li><p>子类继承父类之后，就获取了父类中声明的属性和方法。（继承性）</p>
</li>
<li><p>创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105043273-1315298851.png" alt="image-20210225171130690"></p>
</li>
</ul>
<p>从过程上看：</p>
<ul>
<li><p>当通过子类的构造器创建子类对象时，一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，直到调用了 java.lang.Object 类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有父类中的结构，子类对象才能够进行调用。</p>
</li>
<li><p>明确：虽然创建子类对象时，调用了父类的构造器，但是自始至终只创建了一个对象，即为 new 出来的子类对象。</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105042910-1317784558.png" alt="image-20210225171520474"></p>
</li>
</ul>
<p>示例：从输出结果可以看出，在创建 Man 的实例时，先进入了父类的空参构造器，然后执行子类的空参构造器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类空参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        person.eat();</span><br><span class="line">        person.walk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> isSmoking;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Man</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类空参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">earnMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;男人负责挣钱养家&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;男人多吃肉，长肌肉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">walk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;男人霸气的走路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">父类空参构造器</span><br><span class="line">子类空参构造器</span><br><span class="line">男人多吃肉，长肌肉</span><br><span class="line">男人霸气的走路</span><br></pre></td></tr></table></figure>

<h2 id="对象类型转换（casting）"><a href="#对象类型转换（casting）" class="headerlink" title="对象类型转换（casting）"></a>对象类型转换（casting）</h2><p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105042570-1654699269.png" alt="image-20210226212518453"></p>
<p>基本数据类型的 Casting：</p>
<ul>
<li><code>自动类型转换</code>：小的数据类型可以自动转换成大的数据类型。如 long g &#x3D; 20; double d &#x3D; 12.0f;。</li>
<li><code>强制类型转换</code>：可以把大的数据类型强制转换（casting）成小的数据类型。如 float f &#x3D; (float)12.0; int a &#x3D; (int)1200L;。</li>
</ul>
<p>对 Java 对象的强制类型转换，也称为<code>造型</code>：</p>
<ul>
<li>从子类到父类的类型转换可以自动进行。</li>
<li>从父类到子类的类型转换必须通过造型（强制类型转换）实现。</li>
<li>无继承关系的引用类型间的转换是非法的。</li>
<li>在造型前可以使用 instanceof 判断。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConversionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">13.4</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> (<span class="type">long</span>) d;</span><br><span class="line">        System.out.println(l);</span><br><span class="line">        <span class="type">int</span> <span class="variable">in</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// boolean b = (boolean)in;</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">objStr</span> <span class="operator">=</span> (String) obj;</span><br><span class="line">        System.out.println(objStr);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">objPri</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 下面代码运行时引发 ClassCastException 异常</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) objPri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Person e)</span> &#123;</span><br><span class="line">        <span class="comment">// 假设 Person 类中没有 getSchool() 方法</span></span><br><span class="line">        <span class="comment">// System.out.pritnln(e.getSchool());// 非法，编译时错误</span></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Student) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">me</span> <span class="operator">=</span> (Student) e;<span class="comment">// 将 e 强制转换为 Student 类型</span></span><br><span class="line">            System.out.pritnln(me.getSchool());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        t.method(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="包装类（Wrapper）的使用"><a href="#包装类（Wrapper）的使用" class="headerlink" title="包装类（Wrapper）的使用"></a>包装类（Wrapper）的使用</h2><p><code>包装类</code>：也叫封装类，是针对八种基本数据类型定义的相应的引用数据类型，以使得基本数据类型的变量具有类的特征。</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105042216-1175839617.png" alt="image-20210228120809840"></p>
<ul>
<li>JDK 1.5 之后，支持<code>自动装箱</code>，<code>自动拆箱</code>，但类型必须匹配。</li>
</ul>
<p>基本类型、包装类与 String 类之间的转换：</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105041656-1604468251.png" alt="image-20210228125636680"></p>
<ul>
<li>基本数据类型转换成包装类：<ul>
<li>装箱：基本数据类型包装成包装类的实例，通过包装类的构造器实现。例如：int i &#x3D; 500; Integer t &#x3D; new Integer(i);。</li>
<li>自动装箱，例如：int i &#x3D;500; Integer t &#x3D; i;。</li>
</ul>
</li>
<li>包装类转换成基本数据类型：<ul>
<li>拆箱：获得包装类对象中包装的基本类型变量，通过调用包装类的<code>.xxxValue()</code>方法。例如：boolean b &#x3D; bObj.booleanValue();。</li>
<li>自动拆箱，例如：Integer t &#x3D; 500; int i &#x3D; t;。</li>
</ul>
</li>
<li>基本数据类型&#x2F;包装类转换成字符串：<ul>
<li>调用字符串重载的<code>valueOf()</code>方法，例如：String fstr &#x3D; String.valueOf(2.34f);。</li>
<li>更直接的方式，连接运算，例如：String intStr &#x3D; 5 + “”;。</li>
</ul>
</li>
<li>字符串转换成基本数据类型&#x2F;包装类：<ul>
<li>通过包装类的构造器实现，例如：int i &#x3D; new Integer(“12”);。</li>
<li>通过包装类的<code>parseXxx(String s)</code>静态方法，例如：Float f &#x3D; Float.parseFloat(“12.1”);。</li>
</ul>
</li>
</ul>
<p>面试题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 三目运算符比较基本数据类型，在编译阶段自动拆箱为 int 和 double 类型，由于三目运算符要求表达式 2 和表达式 3 类型一致，</span></span><br><span class="line">    <span class="comment">// 所以在编译阶段自动类型提升（即 int 自动类型转换为 double 类型），再自动装箱为 Object，输出时使用多态调用重写的 toString()，</span></span><br><span class="line">    <span class="comment">// 即 Double 包装类的 toString() 方法</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="literal">true</span> ? <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>) : <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.0</span>);</span><br><span class="line">    System.out.println(o1);<span class="comment">// 1.0</span></span><br><span class="line"> </span><br><span class="line">    Object o2;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>)</span><br><span class="line">        o2 = <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        o2 = <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.0</span>);</span><br><span class="line">    System.out.println(o2);<span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">    System.out.println(i == j);<span class="comment">// new了两个对象，false</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    System.out.println(m == n);<span class="comment">// 自动装箱，且在 -128 ~ 127 范围内，true</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">128</span>;<span class="comment">// 相当于 new Integer(128);</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">128</span>;<span class="comment">// 相当于 new Integer(128);</span></span><br><span class="line">    System.out.println(x == y);<span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Integer 类内部定义了 IntegerCache 结构，IntegerCache 中定义了一个 Integer[] 数组，保存了从<code>-128 ~ 127</code>范围的整数。如果使用了自动装箱的方式，给 Integer 赋值在 -128 ~ 127 范围内时，可以直接使用数组中的元素，不用 new。目的：提高效率。如果赋值超过了此范围，会 new 一个新对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用 Vector 代替数组处理：从键盘读入学生成绩（以负数代表输入结束），找出最高分，并输出学生成绩等级</span></span><br><span class="line"><span class="comment"> * 提示：数组一旦创建，长度就固定不变，所以在创建数组前就需要知道它的长度，而向量类 java.util.Vector 可以根据需要动态伸缩</span></span><br><span class="line"><span class="comment"> *  创建Vector对象：Vector v = new Vector();</span></span><br><span class="line"><span class="comment"> *  给向量添加元素：v.addElement(Object obj);// obj必须是对象</span></span><br><span class="line"><span class="comment"> *  取出向量中的元素：Object obj = v.elementAt(0);</span></span><br><span class="line"><span class="comment"> *  注意第一个元素的下标是 0，返回值是 Object 类型的</span></span><br><span class="line"><span class="comment"> *  计算向量的长度：v.size();</span></span><br><span class="line"><span class="comment"> *  若与最高分相差10分内：A等；20分内: B等；30分内: C等；其它: D等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScoreTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        Vector&lt;Object&gt; objects = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxScore</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextScore</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (nextScore &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nextScore &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            objects.add(nextScore);<span class="comment">// 自动装箱</span></span><br><span class="line">            <span class="keyword">if</span> (maxScore &lt; nextScore) &#123;</span><br><span class="line">                maxScore = nextScore;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="type">char</span> level;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; objects.size(); i++) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> objects.elementAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> (Integer) object;<span class="comment">// 自动拆箱</span></span><br><span class="line">            <span class="keyword">if</span> (maxScore - score &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                level = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxScore - score &lt; <span class="number">20</span>) &#123;</span><br><span class="line">                level = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxScore - score &lt; <span class="number">30</span>) &#123;</span><br><span class="line">                level = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                level = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Student-&quot;</span> + i + <span class="string">&quot; score is &quot;</span> + score + <span class="string">&quot;, level is &quot;</span> + level);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Object-类的使用"><a href="#Object-类的使用" class="headerlink" title="Object 类的使用"></a>Object 类的使用</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span> 类是所有 Java 类的根父类。</span><br></pre></td></tr></table></figure>

<p>如果在类的声明中未使用 extends 关键字指明其父类，则默认父类为 java.lang.Object 类。</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105041300-1733157896.png" alt="image-20210227162812948"></p>
<p>验证方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Base</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;父类：&quot;</span> + base.getClass().getSuperclass());<span class="comment">// 父类：class java.lang.Object</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Object 类中的主要结构：</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105040956-1354041367.png" alt="image-20210227163126263"></p>
<h3 id="x3D-x3D-与-equals"><a href="#x3D-x3D-与-equals" class="headerlink" title="&#x3D;&#x3D; 与 equals()"></a>&#x3D;&#x3D; 与 equals()</h3><p>**<code>==</code>**：</p>
<ul>
<li><p>如果<strong>比较的是基本数据类型变量</strong>：比较两个变量保存的数据是否相等，不一定类型要相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    System.out.println(i == j);<span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">double</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">10.0</span>;</span><br><span class="line">    System.out.println(i == k);<span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    System.out.println(i == c);<span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="number">65</span>;</span><br><span class="line">    System.out.println(c1 == c2);<span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果<strong>比较的是引用数据类型变量</strong>：比较两个变量的地址值是否相同，即两个引用是否指向同一个对象实体。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String 类比较特殊，要注意</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;javacdfa&quot;</span>;<span class="comment">// 这样写的 javacdfa，位于常量池中</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;javacdfa&quot;</span>;</span><br><span class="line">    System.out.println(s1 == s2);<span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;iam&quot;</span>);<span class="comment">// 这样 new 的，在堆内存中 </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;iam&quot;</span>);</span><br><span class="line">    System.out.println(s3 == s4);<span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>用 &#x3D;&#x3D; 进行比较时，符号两边的数据类型必须兼容（可自动转换的基本数据类型除外），否则编译出错。</strong></p>
</li>
</ul>
<p>**<code>equals()</code>**：</p>
<ul>
<li><p>是一个方法，而非运算符，只能适用于引用数据类型。</p>
</li>
<li><p>使用格式：<code>obj1.equals(obj2)</code>。</p>
</li>
<li><p>所有类都继承了 Object，也就获得了 equals() 方法，也可以对其重写 。</p>
</li>
<li><p>Object 类中 equals() 方法的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>说明：其作用与 &#x3D;&#x3D; 相同，比较是否指向同一个对象 。</li>
</ul>
</li>
<li><p>像 File、String、Date 及包装类等，都重写了 Object 类中的 equals() 方法，重写以后，比较的不是两个引用对象的地址是否相同，而是比较两个引用对象的 “实体内容” 是否相同。比如 String 类的 equals() 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="comment">// 先判断地址</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 再判断内容</span></span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="type">char</span> v1[] = value;</span><br><span class="line">            <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通常情况下，自定义的类使用 equals() 方法时，也是比较两个引用对象的 “实体内容” 是否相同，那么，就应该重写 equals() 方法。</p>
</li>
<li><p>重写 equals() 方法的原则：</p>
<ul>
<li><code>对称性</code>：如果 x.equals(y) 返回是 true，那么 y.equals(x) 也应该返回是 true。</li>
<li><code>自反性</code>：x.equals(x) 必须返回是 true。</li>
<li><code>传递性</code>：如果 x.equals(y) 返回 true，而且 y.equals(z) 返回 true，那么 z.equals(x) 也应该返回 true。</li>
<li><code>一致性</code>：如果 x.equals(y) 返回是 true，只要 x 和 y 内容一直不变，不管重复 x.equals(y) 多少次，返回都是 true。</li>
<li>任何情况下，<code>x.equals(null)</code>永远返回 false；<code>x.equals(和x不同类型的对象)</code>永远返回 false。</li>
</ul>
</li>
</ul>
<p><strong>&#x3D;&#x3D; 和 equals() 的区别：</strong></p>
<ul>
<li>&#x3D;&#x3D; 既可以比较基本类型也可以比较引用类型。对于基本类型是比较值，对于引用类型是比较内存地址。</li>
<li>equals() 方法属于 java.lang.Object 类里面的方法，如果该方法没有被重写过，默认也是 &#x3D;&#x3D;。</li>
<li>具体到特定自定义的类，要看该类里有没有重写 Object 的 equals() 方法以及重写的逻辑。</li>
<li>通常情况下，重写 equals() 方法，是比较类中的相应属性是否都相等。</li>
</ul>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>当输出一个对象的引用时，实际上就是调用当前对象的<code>toString()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        System.out.println(order);<span class="comment">// cn.zeloud.database.Order@78308db1</span></span><br><span class="line">        System.out.println(order.toString());<span class="comment">// cn.zeloud.database.Order@78308db1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Object 类中 toString() 方法的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>像 File、String、Date 及包装类等，都重写了 Object 类中的 toString() 方法，使得在调用对象的 toString() 方法时，返回相应的 “实体内容”。</p>
<p>自定义类也可以重写 toString() 方法，当调用此方法时，返回相应的 “实体内容”。比如 String 类的 toString() 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>基本类型数据转换为 String 类型时，调用了对应包装类的 toString() 方法。</li>
</ul>
<p>面试题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">char</span>[] arr = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123; <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line">    System.out.println(arr);<span class="comment">// abc</span></span><br><span class="line">    <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">    System.out.println(arr1);<span class="comment">// [I@78308db1</span></span><br><span class="line">    <span class="type">double</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">double</span>[] &#123; <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span> &#125;;</span><br><span class="line">    System.out.println(arr2);<span class="comment">// [D@27c170f0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h3><p>由于 Java 虚拟机需要调用类的<code>main()</code>方法，所以该方法的访问权限必须是 public，又因为 Java 虚拟机在执行 main() 方法时不必创建对象，所以该方法必须是 static 的，该方法接收一个 String 类型的数组参数，该数组中保存执行 Java 命令时传递给所运行的类的参数。</p>
<p>又因为 main() 方法是静态的，我们不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员，这种情况，我们在之前的例子中多次碰到。</p>
<p>main() 方法的使用说明：</p>
<ul>
<li>main() 方法是<code>程序的入口</code>。</li>
<li>main() 方法也是一个普通的静态方法，在执行某个类的 main() 方法之前，需要先加载这个类，这个过程是早于 main() 方法中首行的执行语句的。</li>
<li>main() 方法可以作为程序与控制台交互的方式之一，其他的还可以使用 Scanner 类。</li>
</ul>
<p>命令行参数用法举例：</p>
<p><img src="https://img2023.cnblogs.com/blog/3488201/202410/3488201-20241001105040360-1180513405.png" alt="image-20210301141727952"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>《Java详解》:接口</title>
    <url>/2024/12/24/%E3%80%8AJava%E8%AF%A6%E8%A7%A3%E3%80%8B-%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1、何为接口"><a href="#1-1、何为接口" class="headerlink" title="1.1、何为接口"></a>1.1、何为接口</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">    我们知道继承普通类和继承抽象类的存在，继承本质上就是实现对共性的抽取同时实现代码的复用，通过对现实事物抽象成为一个类，类内包含这一类事物的属性和行为，继承的存在就是将这一类事物的共同属性和行为抽取出来，当我们在定义属于这一类事物的类时可以直接继承使用，而抽象类的出现是因为父类提供的信息不足以描述一个具体的类，因此将父类定义为抽象类，间接加上了一层校验，防止在代码中不小心使用父类创建并使用父类对象。但是继承也有缺点，继承是对共性的抽取，不同的对象虽然同属一个类但各自都会有不同的个性。</span><br><span class="line">   </span><br><span class="line">    比如：动物类，狗属于动物，鸟属于动物，但是狗会跑，鸟不会，鸟会飞，但是狗不会，这就是两者的个性而非共性，因此其父类动物类就不可以含有行为跑和行为飞。可能有人会说：在定义狗类的时候可以定义自己特有的行为跑，在定义鸟类的时候可以定义鸟类自己特有的行为飞，这种方法确实可以，但是在定义一个鸭子类呢？鸭子可以飞可以跑，难道也要在定义鸭子类的时候再单独定义行为跑行为飞？不免有些繁琐了吧，当定义的类多了，每个类都有单独的自己的行为，但是不同的类之间又有共性，那继承的本质何在？</span><br><span class="line">    </span><br><span class="line">    因此在这个时候接口就被定义出来了，接口可以理解为是对外提供的一组公共的行为规范标准，只要是当前类实例化的对象符合行为规范标准，那么我们就可以让当前类实现这个接口，举个例子：我们可以定义一个接口，是行为跑的标准，狗这个对象会跑，因此狗这个类就可以实现该接口，再定义一个接口，是行为飞的标准，鸟这个对象会飞，鸭子这个对象也会飞，因此鸟和鸭子这两个类都可以实现该接口。</span><br></pre></td></tr></table></figure>

<p>   <span id="more"></span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动物类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口游</span></span><br><span class="line"><span class="keyword">package</span> duixiang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iswim</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口跑</span></span><br><span class="line"><span class="keyword">package</span> duixiang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRun</span> &#123;</span><br><span class="line">     <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鸭子类实现接口跑和游</span></span><br><span class="line"><span class="keyword">package</span> duixiang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Duck</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Iswim</span>, IRun &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Duck</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.printf(name + <span class="string">&quot;在游&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.printf(name + <span class="string">&quot;在跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> duixiang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">IRun</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的构造方法</span></span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.printf(name + <span class="string">&quot;在跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p> 当鸭子类实现了接口跑和接口游之后，鸭子类就包含有了行为跑和行为游，狗类实现了接口跑后，狗类就包含有了行为跑。因此接口技术用于描述类具有什么功能，但是接口中并不给出具体的实现，当某个类需要使用当前接口时再去实现接口中的方法，类需要遵从接口中描述的统一标准进行定义，所以接口就是统一的行为规范标准，接口在实现的时候，只需要符合行为规范标准就可以通用。在Java中，接口可以看作是多个类的公共规范，是一种引用类型。</p>
<h3 id="1-2、接口的定义"><a href="#1-2、接口的定义" class="headerlink" title="1.2、接口的定义"></a>1.2、接口的定义</h3><p>接口的定义和类的定义相似，类的定义需要所以class关键字，而接口的定义需要使用interface关键字，而接口的定义方式就是将类的定义关键字class换成interface关键字即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">访问修饰符  class  类名</span><br><span class="line"></span><br><span class="line">访问修饰符  interface  接口名</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接口的创建和类的创建一样，都是通过右键单击src生成的</p>
<h2 id="二、特点"><a href="#二、特点" class="headerlink" title="二、特点"></a>二、特点</h2><h3 id="2-1、接口的成员变量"><a href="#2-1、接口的成员变量" class="headerlink" title="2.1、接口的成员变量"></a>2.1、接口的成员变量</h3><p>接口的成员属性默认是被 <code>public</code> <code>static</code> <code>final</code>修饰的，主要就是意味着在接口中定义的成员属性默认是静态常量。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、当接口的变量被privateprotected访问修饰符修饰时编译器直接爆红</span><br><span class="line">    <span class="number">2</span>、当变量没有任何修饰符修饰的时候，在实现类当中不可以对其进行修改</span><br><span class="line">    <span class="number">3</span>、当变量只被pulic修饰的时候，在实现类当中也不可以对其进行修改</span><br><span class="line">    <span class="number">4</span>、当变量被<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span></span><br><span class="line">	修饰时，三个关键字都是灰色的，说明变量是默认被这三个关键字修饰的，因此这三个关键字可以不用编写，编译器			会自动加上的</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-2、接口的成员方法"><a href="#2-2、接口的成员方法" class="headerlink" title="2.2、接口的成员方法"></a>2.2、接口的成员方法</h3><p>接口的成员方法默认是被public<br>abstract修饰的，也就是说不可以有具体的实现内容，这也就意味着接口中的成员方法默认是抽象 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上，方法func（）有{}，代表有具体的实现，但是不符合抽象方法的语法，编译器直接爆红；方法func1（）编写完参数列表后直接引号结尾，符合抽象方法的语法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func2</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">func3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>    我们可以发现被public<br>abstract修饰的方法和什么的不修饰的方法都是一样的，并且func（）方法的关键字public abstract<br>是灰色的，说明方法默认是被这两个关键字修饰的，即便程序员没有编写，编译器也会自动添加的。</p>
<p>    也就是说在接口当中不可以有普通方法的实现，一旦实现编译器直接爆红，但是一定要实现普通方法也不是不可以，只需要将普通方法修饰成为静态方法即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func2</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">func3</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func4</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;func4&quot;</span>);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">func5</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;func5&quot;</span>;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者是让当前方法被default修饰：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func4</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;func4&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">func6</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;func6&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3、接口中不可以含有构造器和代码块"><a href="#2-3、接口中不可以含有构造器和代码块" class="headerlink" title="2.3、接口中不可以含有构造器和代码块"></a>2.3、接口中不可以含有构造器和代码块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITest2</span> &#123;</span><br><span class="line">  <span class="comment">// 	构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">interface</span> <span class="params">()</span>&#123;</span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">// 代码块</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 静态代码</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>因此在接口中定义的属性都只能够通过就地初始化进行初始化，无法通过构造器进行初始化</p>
<h3 id="2-4、接口不可以实例化对象"><a href="#2-4、接口不可以实例化对象" class="headerlink" title="2.4、接口不可以实例化对象"></a>2.4、接口不可以实例化对象</h3><p> 接口和抽象类一样，都是引用型数据类型，但都不可以通过关键字new进行实例化对象的，本质上两者提供的信息都不足以描述一个具体的对象，就没有必要实例化对象，如果误把抽象类或者接口进行实例化对象并使用了，那么编译器会直接爆红提示错误，因此接口也含有和抽象类一样的校验功能。</p>
<h3 id="2-5、接口和类之间使用implements关键字进行连接"><a href="#2-5、接口和类之间使用implements关键字进行连接" class="headerlink" title="2.5、接口和类之间使用implements关键字进行连接"></a>2.5、接口和类之间使用implements关键字进行连接</h3><p>类和类之间是继承关系，类和接口之间是实现关系。子类继承父类，类实现接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Itest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">func3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">teat</span> <span class="keyword">implements</span> <span class="title class_">Itest</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，接口和抽象类一样里面都包含有抽象方法，这也就意味着当类实现了接口后，需要重写接口里面全部的抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jiekou;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func2</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">func3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">implements</span> <span class="title class_">ITest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Main</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        m.func1();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;func1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;func2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;func3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-6、当类在重写接口中的方法时，不可以使用默认的访问权限"><a href="#2-6、当类在重写接口中的方法时，不可以使用默认的访问权限" class="headerlink" title="2.6、当类在重写接口中的方法时，不可以使用默认的访问权限"></a>2.6、当类在重写接口中的方法时，不可以使用默认的访问权限</h3><p>重写的规则为： 1、方法名，返回类型，参数列表要一致 2、重写必须要在继承机制下 3、重写方法的访问权限必须要大于等于被重写方法的访问权限
    </p>
<p>在接口中的方法默认是被public abstract修饰的，那么类当中重写方法的访问权限就必须要大于等于public。</p>
<h3 id="2-7、接口虽然不是类，但是接口通过编译了之后也会生成class文件"><a href="#2-7、接口虽然不是类，但是接口通过编译了之后也会生成class文件" class="headerlink" title="2.7、接口虽然不是类，但是接口通过编译了之后也会生成class文件"></a>2.7、接口虽然不是类，但是接口通过编译了之后也会生成class文件</h3><h3 id="2-8、如果类没有实现接口当中的全部抽象方法，那么该类必须要设置为抽象类"><a href="#2-8、如果类没有实现接口当中的全部抽象方法，那么该类必须要设置为抽象类" class="headerlink" title="2.8、如果类没有实现接口当中的全部抽象方法，那么该类必须要设置为抽象类"></a>2.8、如果类没有实现接口当中的全部抽象方法，那么该类必须要设置为抽象类</h3><p>如果类当中没有实现接口中的全部抽象方法时，编译器会爆红，直到全部实现之后才不会爆红，因此和抽象类一样，继承抽象类和实现接口的类只有两种选择：要么老老实实全部实现，要么就将当前类设置为抽象类。不过该来的还是回来，抽象类存在的意义就是为了被继承，也就是说即便设、置为抽象类了，该抽象类后面也是会被继承的，那么还是逃不过实现抽象方法的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Itest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">func3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">teat</span> <span class="keyword">implements</span> <span class="title class_">Itest</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">extends</span> <span class="title class_">teat</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func3</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-9、类支持实现多个接口"><a href="#2-9、类支持实现多个接口" class="headerlink" title="2.9、类支持实现多个接口"></a>2.9、类支持实现多个接口</h3><p>在Java中类不支持多继承，类与类之间是单继承，一个类只能有一个父类，但是在Java中，一个类可以实现多个接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Duck</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Iswim</span> , IRun&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Duck</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wim</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在游&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 如代码，Duck类继承了Animal类并实现了接口Iswin和接口IRun两个接口</p>
<h3 id="2-10、接口之间支持多继承"><a href="#2-10、接口之间支持多继承" class="headerlink" title="2.10、接口之间支持多继承"></a>2.10、接口之间支持多继承</h3><p>类与类之间支持继承，类与接口之间支持实现，接口与接口之间也支持继承，并且支持多继承，也就是使用接口可以达到多继承的效果。接口可以继承接口，从而达到复用的效果，使用extends关键字。</p>
<p>通过接口继承创建一个新的接口IAmphibious表示“两栖的”，此时如果实现该借口，那么当前类就必须要重写IRun接口和Iswin接口的全部抽象方法。如此一来间接的实现了多继承的效果，也达到了IRun接口和Iswin接口中的方法代码复用，减少了程序员编写重复代码的时间。</p>
<h2 id="三、应用"><a href="#三、应用" class="headerlink" title="三、应用"></a>三、应用</h2><h3 id="3-1、实现多个接口"><a href="#3-1、实现多个接口" class="headerlink" title="3.1、实现多个接口"></a>3.1、实现多个接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jiekoutest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口飞</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Ifly</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jiekoutest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口跑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRun</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jiekoutest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口两栖</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Isecdwe</span> <span class="keyword">extends</span> <span class="title class_">IRun</span>, ISwim&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jiekoutest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ISwim</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jiekoutest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口三栖</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITiHabitat</span> <span class="keyword">extends</span> <span class="title class_">ISwim</span>, IRun, Ifly&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jiekoutest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jiekoutest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鸟类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Ifly</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bird</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在吃虫子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jiekoutest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 狗类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Isecdwe</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在吃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在游泳&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jiekoutest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Duck</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">ITiHabitat</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Duck</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name,age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在吃小鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在走&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在游泳&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jiekoutest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">funcrun</span><span class="params">(IRun irun)</span>&#123;</span><br><span class="line">        irun.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">funcswim</span><span class="params">(ISwim iswim)</span>&#123;</span><br><span class="line">        iswim.swim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">funcfly</span><span class="params">(Ifly ifly)</span>&#123;</span><br><span class="line">        ifly.fly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">funcer</span><span class="params">(Isecdwe isecdwe)</span>&#123;</span><br><span class="line">        isecdwe.run();</span><br><span class="line">        isecdwe.swim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">functih</span><span class="params">(ITiHabitat itiHabitat)</span>&#123;</span><br><span class="line">        itiHabitat.run();</span><br><span class="line">        itiHabitat.swim();</span><br><span class="line">        itiHabitat.fly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        dog.run();</span><br><span class="line">        funcrun(dog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p> 在func方法内部，方法不关心传递过来的对象是什么对象，方法内部只关心该对象是否有实现当前接口，然后当前对象实现了接口，那么成功编译，如果没有实现当前接口，那么编译报错。</p>
<p>父类：对子类共性的抽取<br>接口：对象的行为标准规范，也可以说是某种功能特性<br>    <br>    不是所有的动物都会飞会游，这些行为不是动物的共性，因此无法将这些行为定义到父类当中，最优解就是将这些非共有行为设置为接口，只要是符合接口定义的行为规范准则的动物都可以实现接口，此时就解决了非共性问题。可以简单理解为：父类是共有特性，接口是独有特性</p>
<p> Java面向对象编程中最常见的用法：一个类继承一个父类，同时实现多个接口。这样设计有什么好处呢？可以让程序员忘记类型，有了接口之后，类的使用者就不需要再关心具体类型，只需要关心当前类是否有实现某个接口，具备某种能力。<br>    <br>    在func方法中，参数列表设置为接口类型，则该方法就不需要关注传递过来的对象是否是动物，只要该对象的类型实现了该接口，就可以使用该方法，也就是说重新定义一个机器人类，只要机器人类实现了该接口，则机器人类就可以调用该方法。</p>
</blockquote>
<h3 id="3-2、给对象排序"><a href="#3-2、给对象排序" class="headerlink" title="3.2、给对象排序"></a>3.2、给对象排序</h3><p>当我们实例化了大量的学生对象，此时需要对学生对象进行排序，我们可以定义一个学生类型的数组，并将顺序存储进入数组中。我们知道Java有定义一个冒泡排序的方法sort（），我们能否直接通过该方法进行对学生对象的排序呢？</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Django REST Framework 中使用 JWT 身份验证</title>
    <url>/2023/05/28/%E5%A6%82%E4%BD%95%E5%9C%A8-Django-REST-Framework-%E4%B8%AD%E4%BD%BF%E7%94%A8-JWT-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<p>JWT 代表<strong>JSON Web Token</strong>，它是客户端&#x2F;服务器应用程序使用的一种身份验证策略，其中客户端是使用 JavaScript 和一些前端框架（如 Angular、React 或 VueJS）的 Web 应用程序。</p>
<span id="more"></span>

<h4 id="JWT-是如何工作的？"><a href="#JWT-是如何工作的？" class="headerlink" title="JWT 是如何工作的？"></a>JWT 是如何工作的？</h4><p>JWT 只是一个授权令牌，应该包含在所有请求中：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/hello/</span> -H <span class="string">&#x27;Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQzODI4NDMxLCJqdGkiOiI3ZjU5OTdiNzE1MGQ0NjU3OWRjMmI0OTE2NzA5N2U3YiIsInVzZXJfaWQiOjF9.Ju70kdcaHKn1Qaz8H42zrOYk0Jx9kIckTn9Xx7vhikY&#x27;</span></span><br></pre></td></tr></table></figure>

<p>JWT 是通过将用户名+密码交换为<strong>访问令牌</strong>和<strong>刷新令牌</strong>来获取的。</p>
<p>访问<strong>令牌</strong>通常是短暂的（5 分钟左右过期，但可以自定义）。</p>
<p>刷新<strong>令牌的</strong>寿命稍长一些（24 小时后过期，也可自定义）。它类似于身份验证会话。过期后，您需要再次使用用户名+密码进行完整登录。</p>
<p>这是为什么？</p>
<p>这是一项安全功能，也是因为 JWT 拥有更多信息。如果你仔细看我上面给出的例子，你会看到令牌由三部分组成：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">xxxxx<span class="selector-class">.yyyyy</span>.zzzzz</span><br></pre></td></tr></table></figure>

<p>这些是构成 JWT 的三个独特部分：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">header</span><span class="selector-class">.payload</span>.signature</span><br></pre></td></tr></table></figure>

<p>所以我们在这里：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">header</span> <span class="operator">=</span> eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br><span class="line"><span class="attribute">payload</span> <span class="operator">=</span> eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQzODI4NDMxLCJqdGkiOiI3ZjU5OTdiNzE1MGQ0NjU3OWRjMmI0OTE2NzA5N2U3YiIsInVzZXJfaWQiOjF9</span><br><span class="line"><span class="attribute">signature</span> <span class="operator">=</span> Ju70kdcaHKn1Qaz8H42zrOYk0Jx9kIckTn9Xx7vhikY</span><br></pre></td></tr></table></figure>

<p>此信息使用 Base64 编码。如果我们解码，我们会看到这样的东西：</p>
<p><strong>标头</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>有效负载</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;access&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1543828431</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jti&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7f5997b7150d46579dc2b49167097e7b&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>签名</strong></p>
<p>签名由 JWT 后端发出，使用 header base64 + payload base64 + <code>SECRET_KEY</code>。根据每个请求验证此签名。如果客户端更改了标头或有效负载中的任何信息，它将使签名无效。检查和验证签名的唯一方法是使用应用程序的 <code>SECRET_KEY</code>. 除此之外，这就是为什么您应该始终保守<code>SECRET_KEY</code> <strong>秘密</strong>！</p>
<hr>
<h4 id="安装与设置"><a href="#安装与设置" class="headerlink" title="安装与设置"></a>安装与设置</h4><p>对于本教程，我们将使用<a href="https://github.com/davesque/django-rest-framework-simplejwt"><code>djangorestframework_simplejwt</code></a> DRF 开发人员推荐的库。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> djangorestframework_simplejwt</span><br></pre></td></tr></table></figure>

<p><strong>设置.py</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">REST_FRAMEWORK</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework_simplejwt.authentication.JWTAuthentication&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>网址.py</strong></p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">from django.urls <span class="keyword">import</span> <span class="built_in">path</span></span><br><span class="line">from rest_framework_simplejwt <span class="keyword">import</span> views <span class="keyword">as</span> jwt_views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # Your URLs...</span><br><span class="line">    <span class="built_in">path</span>(<span class="string">&#x27;api/token/&#x27;</span>, jwt_views.TokenObtainPairView.as_view(), <span class="keyword">name</span>=<span class="string">&#x27;token_obtain_pair&#x27;</span>),</span><br><span class="line">    <span class="built_in">path</span>(<span class="string">&#x27;api/token/refresh/&#x27;</span>, jwt_views.TokenRefreshView.as_view(), <span class="keyword">name</span>=<span class="string">&#x27;token_refresh&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p>对于本教程，我将使用以下路由和 API 视图：</p>
<p><strong>视图.py</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">HelloView</span>(<span class="symbol">APIView</span>):</span><br><span class="line">    <span class="symbol">permission_classes</span> = (<span class="symbol">IsAuthenticated,</span>)</span><br><span class="line"></span><br><span class="line">    <span class="symbol">def</span> <span class="symbol">get</span>(<span class="symbol">self, <span class="symbol">request</span></span>):</span><br><span class="line">        <span class="symbol">content</span> = &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Hello, World!&#x27;</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> Response(content)</span><br></pre></td></tr></table></figure>

<p><strong>网址.py</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> <span class="type">path</span></span><br><span class="line"><span class="keyword">from</span> myapi.core <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;hello/&#x27;</span>, views.HelloView.as_view(), <span class="type">name</span>=<span class="string">&#x27;hello&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>我将使用<a href="https://httpie.org/">HTTPie</a>通过终端使用 API 端点。但您也可以使用 <a href="https://curl.haxx.se/">cURL</a>（在许多操作系统中都很容易使用）在本地进行尝试。</p>
<p>或者，通过访问端点 URL 来使用 DRF Web 界面，如下所示：</p>
<p><img src="https://simpleisbetterthancomplex.com/media/2018/12/drf-web.png" alt="DRF JWT 获取token"></p>
<h5 id="获取令牌"><a href="#获取令牌" class="headerlink" title="获取令牌"></a>获取令牌</h5><p>第一步是<strong>验证并获取令牌</strong>。端点是<code>/api/token/</code>，它只接受<strong>POST</strong>请求。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http post http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/api/</span>token/ username=vitor password=<span class="number">123</span></span><br></pre></td></tr></table></figure>

<p><img src="https://simpleisbetterthancomplex.com/media/2018/12/jwt-obtain-token.png" alt="HTTPie JWT 获取令牌"></p>
<p>所以基本上你的响应主体是两个标记：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;access&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQ1MjI0MjU5LCJqdGkiOiIyYmQ1NjI3MmIzYjI0YjNmOGI1MjJlNThjMzdjMTdlMSIsInVzZXJfaWQiOjF9.D92tTuVi_YcNkJtiLGHtcn6tBcxLCBxz9FKD3qzhUg8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;refresh&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTU0NTMxMDM1OSwianRpIjoiMjk2ZDc1ZDA3Nzc2NDE0ZjkxYjhiOTY4MzI4NGRmOTUiLCJ1c2VyX2lkIjoxfQ.rA-mnGRg71NEW_ga0sJoaMODS5ABjE5HnxJDb0F8xAo&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>之后，您将在客户端存储<strong>访问令牌</strong>和<strong>刷新令牌，通常在</strong><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage">localStorage</a>中。</p>
<p>为了访问后端受保护的视图（即需要身份验证的 API 端点），您应该在所有请求的标头中包含访问令牌<strong>，</strong>如下所示：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/hello/</span> <span class="string">&quot;Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQ1MjI0MjAwLCJqdGkiOiJlMGQxZDY2MjE5ODc0ZTY3OWY0NjM0ZWU2NTQ2YTIwMCIsInVzZXJfaWQiOjF9.9eHat3CvRQYnb5EdcgYFzUyMobXzxlAVh_IAgqyvzCE&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://simpleisbetterthancomplex.com/media/2018/12/jwt-bearer.png" alt="HTTPie JWT 你好，世界！"></p>
<p>您可以在接下来的五分钟内使用此<strong>访问令牌。</strong></p>
<p>五分钟后，令牌将过期，如果您再次尝试访问该视图，您将收到以下错误：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/hello/</span> <span class="string">&quot;Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQ1MjI0MjAwLCJqdGkiOiJlMGQxZDY2MjE5ODc0ZTY3OWY0NjM0ZWU2NTQ2YTIwMCIsInVzZXJfaWQiOjF9.9eHat3CvRQYnb5EdcgYFzUyMobXzxlAVh_IAgqyvzCE&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://simpleisbetterthancomplex.com/media/2018/12/jwt-expired.png" alt="HTTPie JWT 已过期"></p>
<h5 id="刷新令牌"><a href="#刷新令牌" class="headerlink" title="刷新令牌"></a>刷新令牌</h5><p>要获取新的<strong>访问令牌</strong><code>/api/token/refresh/</code>，您应该使用发布 刷新令牌的<strong>刷新令牌</strong>端点：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http post http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span><span class="regexp">/api/</span>token<span class="regexp">/refresh/</span> refresh=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTU0NTMwODIyMiwianRpIjoiNzAyOGFlNjc0ZTdjNDZlMDlmMzUwYjg3MjU1NGUxODQiLCJ1c2VyX2lkIjoxfQ.Md8AO3dDrQBvWYWeZsd_A1J39z6b6HEwWIUZ7ilOiPE</span><br></pre></td></tr></table></figure>

<p><img src="https://simpleisbetterthancomplex.com/media/2018/12/jwt-refresh-token.png" alt="HTTPie JWT 刷新令牌"></p>
<p>返回的是一个新的<strong>访问令牌</strong>，您应该在后续请求中使用它。</p>
<p>刷新<strong>令牌</strong>在接下来的 24 小时内有效。当它最终也过期时，用户将需要使用他们的用户名和密码再次执行完全身份验证以获得一组新的<strong>访问令牌</strong>+<strong>刷新令牌</strong>。</p>
<hr>
<h4 id="刷新令牌有什么意义？"><a href="#刷新令牌有什么意义？" class="headerlink" title="刷新令牌有什么意义？"></a>刷新令牌有什么意义？</h4><p>乍一看，<strong>刷新令牌</strong>可能看起来毫无意义，但实际上有必要确保用户仍然拥有正确的权限。如果您的<strong>访问令牌的</strong>过期时间很长，则更新与令牌关联的信息可能需要更长的时间。这是因为身份验证检查是通过密码学手段完成的，而不是查询数据库和验证数据。所以一些信息有点缓存。</p>
<p>还有一个安全方面，从某种意义上说，<strong>刷新令牌</strong>仅在 POST 数据中传输。并且 <strong>访问令牌</strong>是通过 HTTP 标头发送的，该标头可能会在传输过程中被记录下来。<strong>因此，如果您的访问令牌</strong>被泄露，这也会提供一个较短的窗口。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>rest_framework</tag>
      </tags>
  </entry>
  <entry>
    <title>如何进行技术面试（面试官视角）</title>
    <url>/2023/02/28/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%EF%BC%88%E9%9D%A2%E8%AF%95%E5%AE%98%E8%A7%86%E8%A7%92%EF%BC%89/</url>
    <content><![CDATA[<p>说起来在我第一次做面试官之前，并没有人教过我应该怎么做，我则一直将面试视作通过一小时左右的沟通，对候选人形成一个整体的印象，<br>最后给出一个主观的评价的过程。在这么多次的面试中，我也总结出了一些经验可以和大家分享。</p>
<span id="more"></span>

<h4 id="验证简历真实性"><a href="#验证简历真实性" class="headerlink" title="验证简历真实性"></a>验证简历真实性</h4><p>首先花一些时间聊一聊简历上提到的项目，请对方进一步介绍这个项目的业务、自己在其中承担的职责和遇到的问题。然后针对其中自己了解<br>的部分提几个问题，如「据我所知这类项目的难点是某某方面，请问你是否有遇到、是如何解决的」，确认对方的项目经验是否真实、是否比<br>较深度地参与了项目。</p>
<h4 id="围绕简历提问"><a href="#围绕简历提问" class="headerlink" title="围绕简历提问"></a>围绕简历提问</h4><p>尽量提问对方了解和擅长的话题，让对方有足够的表达机会，发挥出正常水平，考察候选人擅长的部分要比不擅长的部分更有价值。</p>
<h4 id="开放性问题"><a href="#开放性问题" class="headerlink" title="开放性问题"></a>开放性问题</h4><p>避免问有标准答案的问题，而是可以问「遇到某种情况时可能是什么原因、你会怎么做」或「请解释一下某个事物是如何工作的」这样开放性<br>的问题，给对方足够的发挥空间、主动提到一些自己的知识和经验。</p>
<p>也许有些候选人不喜欢这样的问题，认为缺少安全感、不知道该说什么，但我觉得开放性问题才有足够的区分度，才能在短时间内对候选人形<br>成立体的印象。我们可以在候选人实在不知道从何说起时，对问题再做进一步的解释和提示。</p>
<h4 id="围绕话题由浅入深"><a href="#围绕话题由浅入深" class="headerlink" title="围绕话题由浅入深"></a>围绕话题由浅入深</h4><p>应该针对同一话题准备多个难度逐步增加的问题，让对方回答时思路能够相对流畅，更容易考察对方在这一话题上的深度；反过来应该避免大<br>量零散、无联系、无难度区分的小问题。</p>
<h4 id="没必要执着于答案"><a href="#没必要执着于答案" class="headerlink" title="没必要执着于答案"></a>没必要执着于答案</h4><p>有时在反复提示下对方的答案仍差那么一点，在面试时间大多比较紧张的情况下，我们没必要花更多的时间去让对方答出答案。在候选人表示<br>无法准确回答问题时，也可以引导他做出一些合理的猜测（这时的重点在于猜测是否合理而不是是否正确）。只要候选人在这一问题上说足够<br>多的话，我们就可以考察到其水平了，不一定要等他说出最后的答案。</p>
<p>自己不懂也没关系</p>
<p>在一开始，我会担心问出的问题我自己也不了解，对方回答之后会把自己问倒或者无法考察对方水平。但后来发现完全没有必要，因为面试官<br>没有义务即时地对候选人的回答做出评价（告诉对方对还是错），即使对于不了解的话题，自己也可以从对方的自信程度、逻辑层面，对回答<br>有一个大体的判断的。</p>
<h4 id="现场编码可以很简单"><a href="#现场编码可以很简单" class="headerlink" title="现场编码可以很简单"></a>现场编码可以很简单</h4><p>候选人在现场会非常紧张，面试时间也有限，在现场编码环节没必要出太难的题，重点在于考察候选人是否有最基本编程思维和编码能力。例<br>如我觉得一些难度不高，但适合用递归解决的题目会比较合适，可以考虑在候选人编码的过程中一直保持沟通，注重过程而不是结果。</p>
<p>同时我反对为候选人在面试前或面试后布置编码的作业，这会让候选人付出不对等的时间去准备面试，也很容易从「考察候选人的能力」变成<br>「考察候选人的诚意」。</p>
<h4 id="重复使用一套题库没什么问题"><a href="#重复使用一套题库没什么问题" class="headerlink" title="重复使用一套题库没什么问题"></a>重复使用一套题库没什么问题</h4><p>可以自己建立自己的面试题库，在一次次面试中对其进行反复地打磨，让问题更准确、考察更全面。有些话题可能是永远都不过时的，例如对于<br>后端工程师可能是并发模型及与之相关的线程、内存等话题。</p>
<h4 id="给对方提问的机会"><a href="#给对方提问的机会" class="headerlink" title="给对方提问的机会"></a>给对方提问的机会</h4><p>一般面试的最后一个步骤是让候选人提问，不要把这个过程敷衍掉，可以引导对方提问，告诉对方都可以问哪些问题。如可以补充一下没有提及<br>的技术话题、可以问我司的技术架构或选型、可以问所面试的职位和如果入职之后所参与的项目、可以问日常工作环境和时间等。这样可以让对<br>方有一个主动打开话题的机会，互相判断需求是否匹配，即使没有通过面试也让对方对公司有一个比较好的印象。</p>
<h4 id="有任何顾虑都可以-pass-掉"><a href="#有任何顾虑都可以-pass-掉" class="headerlink" title="有任何顾虑都可以 pass 掉"></a>有任何顾虑都可以 pass 掉</h4><p>我们前面做了这么多都是为了让候选人有更好的面试体验、发挥出自己最好的水平。这种情况下如果仍对候选人某一方面的表现有顾虑的话，应该<br>果断地拒绝掉，招进来一个不合适的人损失远比错过一个合适的人大。</p>
<h4 id="沟通是否顺畅很重要"><a href="#沟通是否顺畅很重要" class="headerlink" title="沟通是否顺畅很重要"></a>沟通是否顺畅很重要</h4><p>沟通是后续开展一切工作的基础，如果觉得与候选人的沟通不顺畅，对方总是不能理解自己的意思，那么即使候选人的技术水平满足要求，也应该<br>慎重考虑。</p>
<h4 id="留下面试的记录"><a href="#留下面试的记录" class="headerlink" title="留下面试的记录"></a>留下面试的记录</h4><p>我每次面试结束后都会尽快开始写对候选人的评价，大多在一两百字，先列出面试聊到的内容、觉得好和不好的地方、了解到的对方的技术栈，然<br>后总结一下对候选人技术水平和沟通情况的评价。这样可以帮助自己整理思路，在候选人比较多的时候也不会记混，最后给出通过与否的评价，同<br>时还能给下一轮的面试官提供参考。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>探索性测试</title>
    <url>/2024/12/20/%E6%8E%A2%E7%B4%A2%E6%80%A7%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h3 id="一、什么是探索性测试"><a href="#一、什么是探索性测试" class="headerlink" title="一、什么是探索性测试"></a>一、什么是探索性测试</h3><p>探索性测试（Exploratory Testing）是一种软件测试方法，它强调测试人员在测试过程中同时设计测试、执行测试并学习系统的行为，与传统的脚本化测试不同，探索性测试不依赖于预先编写的详细测试用例，而是让测试人员根据他们对系统的理解和直觉来灵活地探索和测试软件的各个方面</p>
<span id="more"></span>

<p>探索性测试将戴明环方法使用到了极致，它强调将测试相关学习、测试设计、测试执行和测试结果解读作为相互支持的活动，并行执行。其思维模型CPIE包括4个阶段：</p>
<p> Collation（整理）：首先是测试相关学习，需要我们收集和整理被测产品的信息，并了解和理解它们。通常在这个阶段，我会翻开需求文档、方案文档看看，或者搜索之前的bug清单寻找思路</p>
<p>※ Prioritization（排序）：进行测试设计，确定所有测试任务的优先级</p>
<p>※ Investigation（调查）：对即将执行的测试任务进行仔细的分析并确定测试输入和预期输出，也属于测试设计的一部分</p>
<p>※ Experimentation（实验）：重点在测试执行和对测试结果的验证，验证我们的预期是否正确，检查我们在整理阶段获取到的信息是否正确。根据实验结果，测试人员将收集更多的信息，并调整测试任务的优先级。以此不断达到收集反馈、调整测试、优化价值的效果。</p>
<h3 id="二、探索性测试的典型方法"><a href="#二、探索性测试的典型方法" class="headerlink" title="二、探索性测试的典型方法"></a>二、探索性测试的典型方法</h3><p>根据不同产品的特性，可以将产品<a href="https://edu.csdn.net/cloud/sd_summit?utm_source=glcblog&spm=1001.2101.3001.7020">功能测试</a>分成三个层次：单一功能特性测试、交互特性测试和系统交互测试。针对每个层次，探索性测试的方法可以简单的概括为：局部探索性测试方法、全局探索性测试法和混合探索性测试法。</p>
<p>在软件测试领域，针对产品的不同方面和层次，测试的种类和重点也有所不同。以下是对单一功能特性测试、交互特性测试和系统交互测试的详细解释：</p>
<h4 id="1-单一功能特性测试"><a href="#1-单一功能特性测试" class="headerlink" title="1. 单一功能特性测试"></a>1. 单一功能特性测试</h4><p>单一功能特性测试主要关注软件系统中某个具体功能的性能和正确性。这种测试的目的是验证单个功能是否按照设计需求正确实现，并且能够在预期的环境中稳定运行。测试人员会依据功能需求和设计文档，设计测试用例来检验功能的各个方面，包括输入、处理和输出是否符合预期。</p>
<p>例如，在一个电子邮件系统中，单一功能测试可能包括验证“发送邮件”功能是否能正确地将邮件发送至指定的收件人，邮件内容是否准确无误，以及附件是否能正常添加和发送等。</p>
<h4 id="2-交互特性测试"><a href="#2-交互特性测试" class="headerlink" title="2. 交互特性测试"></a>2. 交互特性测试</h4><p>交互特性测试侧重于评估软件界面的可用性、易用性和用户满意度。这种测试关注的是用户与软件界面交互时的体验，包括菜单、按钮、输入框等用户交互元素的布局、响应速度和准确性。测试人员会模拟用户操作，检查界面元素是否直观易用，交互流程是否顺畅，以及是否有任何可能导致用户困惑或操作失误的设计。</p>
<p>以智能手机为例，交互特性测试可能包括触控响应速度、滑动流畅度、手势识别准确度等方面的测试，以确保用户能够方便、快速地完成操作。</p>
<h4 id="3-系统交互测试"><a href="#3-系统交互测试" class="headerlink" title="3. 系统交互测试"></a>3. 系统交互测试</h4><p>系统交互测试旨在验证软件系统与其他系统或组件之间的交互是否正确无误。这种测试关注的是系统在不同环境下的兼容性、稳定性和性能表现。测试人员会检查系统在与外部实体（如其他软件系统、硬件设备或网络服务）交互时是否会出现问题，如数据丢失、性能下降或安全漏洞等。</p>
<p>例如，在一个企业资源规划（ERP）系统中，系统交互测试可能包括验证该系统是否能与财务系统、库存管理系统等其他企业应用无缝集成，以及在数据交换过程中是否会出现错误或延迟等问题。</p>
<p>综上所述，单一功能特性测试、交互特性测试和系统交互测试是软件测试中不可或缺的组成部分，它们分别从不同的角度和层次确保软件系统的质量、可用性和稳定性。</p>
<h4 id="1、局部探索性测试方法"><a href="#1、局部探索性测试方法" class="headerlink" title="1、局部探索性测试方法"></a>1、局部探索性测试方法</h4><p>我们首先会对软件的单一功能进行比较细致的探索式测试。“探索”的过程主要是基于功能需求以及非功能性需求进行扩展和延伸。</p>
<p>比如以软件系统的用户登录功能为例，作为探索式测试人员，首先应该站在最终用户的角度去理解和使用登录功能。为此，探索式测试人员需要分析出用户登录功能的所有原子输入项。假定原子输入项只有用户名、密码和登录按钮。接着组合这些原子输入项构成最基本典型的测试场景。</p>
<p>再比如，用真实合法的用户名以及密码完成登录就是一个非常基本典型的场景，如果该场景能够成功登录，就可以切换到下一个；如果该场景不能够成功登录，就需要去“探索”为什么没能登录成功，比如你可能会怀疑是否是因为用户名或者密码是区分大小写的，又或者是不是因为你多次错误的尝试而导致的。</p>
<p>基于你的怀疑，进一步去设计新的测试用例来验证你的猜测。总之，通过以上这样的“探索”过程，你将测试学习、测试设计、测试执行和测试结果评估串联成了一个快速迭代的过程，并在你脑海中快速建立了登录功能的详细模型。</p>
<h4 id="2、全局探索性测试"><a href="#2、全局探索性测试" class="headerlink" title="2、全局探索性测试"></a>2、全局探索性测试</h4><p>以用户登录功能为例，在系统交互的探索式测试中，就不仅要考虑单一的登录功能了，而是要考虑用户登录与系统其他功能相结合的场景。</p>
<p>比如，你可以尝试不登录直接访问登录后的路径去观察系统的行为；再比如，你可以尝试不登录就去查看订单状态的操作等等。这些组合场景的设计主要取决于你想要验证，或者说想要“探索”的系统功能。很多时候这些灵感来自于你之前对系统的探索而取得的系统认识，同时你的技术直觉也在此扮演了重要角色。</p>
<h4 id="3、混合探索性测试"><a href="#3、混合探索性测试" class="headerlink" title="3、混合探索性测试"></a>3、混合探索性测试</h4><p>混合探索性测试就是将探索性测试与传统的基于场景的测试方法相结合，通过引入变化达到系统交互测试的目的。</p>
<p>![image-20241219151136172](&#x2F;Users&#x2F;zhangbijiang&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241219151136172.png)</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>工作方法</tag>
        <tag>效率</tag>
      </tags>
  </entry>
  <entry>
    <title>数据迁移测试</title>
    <url>/2024/11/22/%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p><strong>数据迁移主要是在新老系统切换的时候，主要是以下新、两种</strong></p>
<ol>
<li>将老系统中的数据全部迁移到新系统，业务上只使用新系统，不再使用老系统</li>
<li>老系统的某些功能暂时无法实现，但是要在业务中使用新系统，这时候新老系统都需要使用，老系统产生的数据需要增量同步到新系统的数据库中</li>
</ol>
<span id="more"></span>



<h4 id="一、数据迁移的风险"><a href="#一、数据迁移的风险" class="headerlink" title="一、数据迁移的风险"></a>一、数据迁移的风险</h4><p>1、需要确认数据规模，这次迁移的数据量，线上数据库那么如果按照顺序迁移，则可能花费几个月甚至几年的时间。</p>
<p>2、迁移过程中服务是否需要停止， 因为不能在迁移过程中中断或者停止所有或部分服务，那么在这个迁移过程中必须要保证服务100%处于可用状态。</p>
<p>3、保证数据的，正确性，一致性，可用性，在数据迁移过程中，必须确保每项服务获取到的数据都是正确无误</p>
<h4 id="二、数据迁移前的准备工作"><a href="#二、数据迁移前的准备工作" class="headerlink" title="二、数据迁移前的准备工作"></a>二、数据迁移前的准备工作</h4><p>在进行数据迁移前需要和开发、产品、运维等确认好数据的迁移范围</p>
<p>在进行测试之前，需要对核心的测试点做重点的梳理，其中主要包括本次迁移涉及到的后端接口、对应的数据库表以及数据迁移的接口</p>
<p>涉及到了4个库7张表，关系复杂，需要验证的数据内容较多，针对性的列出了对应场景和表表直接关系，以及一些细节关注点</p>
<h4 id="三、迁移数据的方法"><a href="#三、迁移数据的方法" class="headerlink" title="三、迁移数据的方法"></a>三、迁移数据的方法</h4><p>1、直接复制表</p>
<p>  将原有系统数据库中的表直接复制到新系统的数据库中；</p>
<p>2、拆表&amp;合表</p>
<p>  拆表：将原有系统数据库中的表数据拆分到新系统数据库中的几张表中；</p>
<p>  合表：将原有系统数据库中的表字段合并到新系统数据库中的一张表中；</p>
<p>PS：需要确认清楚，哪些表分拆迁移，哪些表合并迁移，迁移的数据字段、条数等！</p>
<p>1.3：数据迁移接口及数据校验接口</p>
<h4 id="四、数据迁移测试"><a href="#四、数据迁移测试" class="headerlink" title="四、数据迁移测试"></a>四、数据迁移测试</h4><p>1、数据量一致性测试</p>
<p>  要做到新老系统无缝切换，就必须保证数据的正确性和一致性，首要条件就是迁移的数据量是保持一致的，否则无法进行其他测试。</p>
<p>方法：①、可以通过文本统计工具或者数据库连接工具将迁移前的数据库表名、字段、数量等进行统计，然后将迁移后的新数据库表名、字段、数量等进行统计，然后进行比较。</p>
<p>   ②、通过MD5生成工具，对新老数据文本进行MD5值比对测试，如果一致则表示数据量一致，如果不一致，则表明迁移后的数据有部分存在问题。</p>
<p>2、数据库表结构变化测试</p>
<p>  这种测试分2种情况：一种是新老数据库表结构完全不存在关系，新数据库表的字段都是给定的默认值；还有一种是新数据库表字段是由原有系统数据库表字段转换而来。</p>
<p>方法：针对第一种情况，因为新增的字段都是给定的默认值，所以只需要根据开发提供的填写规则，检查该字段的所有值是否满足填写规则。</p>
<p>   针对第二种情况，可以通过编写自动化测试脚本或者人工抽样或者切片方式进行，具体的抽样选择根据数据量等具体情况选择合适的比例即可。</p>
<h4 id="五、业务逻辑测试"><a href="#五、业务逻辑测试" class="headerlink" title="五、业务逻辑测试"></a>五、业务逻辑测试</h4><p>完成上面的数据迁移测试后，需要在新的系统中进行回归测试，以确保迁移过来的数据是100%可用的。</p>
<p>回归测试前需要和业务、开发确认哪些业务模块涉及了哪些表，然后根据具体情况，尽可能的提高测试用例覆盖率，做一次全系统的功能回归测试（可以考虑自动化测试来替代一部分手工测试）。</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>数据迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试中的杀虫剂效应</title>
    <url>/2025/01/09/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E6%9D%80%E8%99%AB%E5%89%82%E6%95%88%E5%BA%94/</url>
    <content><![CDATA[<p><strong>杀虫剂效应</strong>（The Pesticide Paradox）是软件测试领域中的一个概念，来源于比喻。它最早由<strong>Boris Beizer</strong>在其著作《Software Testing Techniques》中提出。这个效应描述了测试过程中一个常见的现象：当你在同样的测试用例和测试策略下进行多次测试时，可能会发现原本的缺陷不再出现，但并不意味着系统没有缺陷，可能只是那些“已知”的缺陷被“杀死”了，而新的缺陷可能未被暴露出来。</p>
<span id="more"></span>

<h3 id="概念解释："><a href="#概念解释：" class="headerlink" title="概念解释："></a>概念解释：</h3><ul>
<li><strong>杀虫剂效应</strong>这个比喻借用了杀虫剂的工作原理。假设你每次都使用相同的杀虫剂去对付昆虫。最初，昆虫会被消灭，但如果你总是使用相同的杀虫剂，昆虫可能会对其产生抵抗力，导致效果逐渐减弱，最终无法再有效地消灭它们。</li>
<li>在软件测试中，类似地，如果你重复执行相同的测试用例和测试策略，你可能会发现原来已知的缺陷不再出现。但这并不意味着没有新的缺陷，而是测试策略和测试用例可能已经“失效”或未能触及到新的缺陷类型。</li>
</ul>
<h3 id="为什么会发生杀虫剂效应？"><a href="#为什么会发生杀虫剂效应？" class="headerlink" title="为什么会发生杀虫剂效应？"></a>为什么会发生杀虫剂效应？</h3><ol>
<li><strong>测试用例的重复性</strong>：重复运行相同的测试用例，特别是如果测试用例没有被更新或没有包含新的边界条件和测试场景，那么只会发现系统中已有的缺陷，而无法暴露新的缺陷。</li>
<li><strong>缺乏创新和多样性</strong>：如果没有创新的测试方法或不同的测试视角，测试活动可能会变得单一和僵化，导致未能发现新的问题。</li>
<li><strong>环境变化和新功能</strong>：随着软件的不断变化（例如版本更新、需求变更等），老的测试用例可能无法覆盖新加入的功能或修改的代码，导致新缺陷不容易被发现。</li>
<li><strong>测试人员的思维定势</strong>：测试人员可能会陷入固有的测试思维和框架中，导致他们忽略了其他潜在的缺陷或未曾考虑过的测试路径。</li>
</ol>
<h3 id="如何避免杀虫剂效应？"><a href="#如何避免杀虫剂效应？" class="headerlink" title="如何避免杀虫剂效应？"></a>如何避免杀虫剂效应？</h3><ol>
<li><strong>不断更新测试用例</strong>：根据软件的变化、需求的变化，及时更新和添加新的测试用例，确保覆盖新的代码和场景。</li>
<li><strong>多样化测试方法</strong>：<ul>
<li><strong>黑盒测试与白盒测试结合</strong>：除了功能测试，还可以考虑执行结构测试、代码覆盖率测试等。</li>
<li><strong>探索性测试</strong>：探索性测试可以帮助发现常规测试用例无法覆盖的缺陷。</li>
<li><strong>压力测试、性能测试、边界条件测试等</strong>：这些测试方法有助于发现不同类型的缺陷。</li>
</ul>
</li>
<li><strong>引入自动化测试</strong>：自动化测试可以提高测试效率，并确保定期对关键功能进行回归测试，尤其是在大规模系统中，自动化可以帮助更全面地覆盖功能。</li>
<li><strong>交叉验证和多种测试技术</strong>：使用不同的工具和技术来进行测试，避免重复的测试模式导致“失效”。例如，结合静态分析工具、动态分析工具、灰盒测试等。</li>
<li><strong>持续的审查和反思</strong>：定期回顾测试用例，评估它们的覆盖率和有效性，识别可能的盲点。</li>
</ol>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>杀虫剂效应是一个警示：测试用例和策略不能永远停留在原地。随着软件的发展和变化，测试活动也需要不断创新和调整。单一的测试方法和测试用例可能会导致新缺陷的漏测，进而影响软件质量。因此，软件测试人员需要不断更新测试策略，增加测试的多样性和覆盖面，以更全面地发现潜在的缺陷。</p>
<p>永远不要停止测试，永远不要停止思考，永远不要相信某一种方法或者工具可以帮助你解决所有问题！在这岗位上就不要停止学习新的技术和方法！</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>功能测试</tag>
      </tags>
  </entry>
  <entry>
    <title>番茄工作法图解</title>
    <url>/2024/12/01/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E5%9B%BE%E8%A7%A3/</url>
    <content><![CDATA[<p>番茄工作法是<strong>弗朗西斯科·西里洛</strong>在1992年创立的时间管理方法。</p>
<p>当时弗朗西斯科还是一名在校学生，他曾一度苦于学习效率低下的问题。后来他开始逼迫自己每次只坚持学习10分钟，甚至还用厨房定时器掐着时间进行。</p>
<p>这么一折腾，弗朗西斯科很快就发现自己的学习效率获得了大幅度提升，而当时他用的计时器，因外形酷似“番茄”，于是就把这种工作方法叫做“番茄工作法”。</p>
<p>而这本书的作者史蒂夫·诺特伯格，和发明人弗朗西斯科不同，他是这个番茄工作法的忠实实践者。</p>
<span id="more"></span>

<h4 id="1、什么是番茄工作法"><a href="#1、什么是番茄工作法" class="headerlink" title="1、什么是番茄工作法"></a><strong>1、什么是番茄工作法</strong></h4><p>说了这么多，可能有朋友会问，那到底什么是番茄工作法呢？</p>
<p>用一句话表达，<strong>番茄工作法就是在25分钟番茄时间内只专注做一件事。</strong></p>
<p>换而言之，就是在每天工作开始前，列出当天所有工作任务，并将这些工作任务分解成一个个25分钟的小任务，然后一项一项完成去它们。</p>
<p><strong>我们把这个25分钟作为一个专注工作的基本时间单位，所以把这25分钟被称为一个“番茄钟”</strong>，这是番茄工作法最重要的核心要素之一。</p>
<p>所以番茄工作法的核心内容至少要有以下五点：</p>
<p><strong>（1）采用“专注25分钟工作+放松休息5分钟”的时间节律开展工作；</strong></p>
<p><strong>（2）一次只做一件事；</strong></p>
<p><strong>（3）番茄钟的执行过程中不可以中途停止，否则该番茄钟必须作废；</strong></p>
<p><strong>（4）当你连续工作4个番茄钟时，可以得到一个20分钟的长休息；</strong></p>
<p><strong>（5）通过“短时间的专注工作+频繁的休息奖励”，不断激励自己投入下一个工作任务，并逐渐喜欢上这种工作模式。</strong></p>
<h4 id="2、怎么使用番茄工作法"><a href="#2、怎么使用番茄工作法" class="headerlink" title="2、怎么使用番茄工作法"></a><strong>2、怎么使用番茄工作法</strong></h4><h5 id="（1）前期计划"><a href="#（1）前期计划" class="headerlink" title="（1）前期计划"></a>（1）前期计划</h5><p>这里的前期计划，其实就是我们平时说的工作计划。</p>
<p>也就是说，我们通常所说的工作计划，只要列出一个工作清单就可以。但是番茄工作法，却要求至少要准备三张表格。</p>
<p><strong>这三张表分别是：工作清单表、今日待办表和番茄跟踪记录表。</strong></p>
<p>第一张表是<strong>工作清单表</strong>，说的就是我们平时的工作清单，你可以随时把近期的工作添加到这张表中，也可以把它从表中移出。</p>
<p>它就相当于一个大池塘，你要做的工作、领导安排的任务、同事需要协调的工作，都可以放进去，也可以移出去。也就是说，这个池塘里的“任务”的去留，你说了算。</p>
<p>第二张表是<strong>今日待办表</strong>，就是当天我们需要完成的工作。这些任务是从工作清单里面挑选出来的，而且挑选的原则是当前最重要的一项工作。</p>
<p>在这一天的工作中，每当你每完成一件工作，就划掉一项，直到把所有的任务划完为止。</p>
<p>第三张表，我们把它叫做<strong>番茄跟踪记录表</strong>。</p>
<p>为什么要用这张表呢？</p>
<p>其实稍微动一下脑子就能立刻明白，这张表其实就是一个激励反馈信息表，无论是一项任务的预估番茄钟个数，还是实际的番茄钟个数都会在这张表上体现。</p>
<p>它不仅能够帮助我们及时、客观地反映番茄钟使用过程中存在的问题，及时发现自己时间管理上的问题，还能不断提升自己对时间的掌控力。</p>
<p>这是前期计划这个环节的三张表。</p>
<h5 id="2）中期执行"><a href="#2）中期执行" class="headerlink" title="(2）中期执行"></a>(2）中期执行</h5><h6 id=""><a href="#" class="headerlink" title=""></a></h6><p>第二个环节是中期执行。其实中期执行也很简单，只有三步：</p>
<p><strong>第一，按照今日待办的所有工作任务，选择一项最重要的工作，作为当前马上要开展的工作；</strong></p>
<p><strong>第二，设定一个25分钟的计时器，作为你的专注工作的时间；</strong></p>
<p><strong>第三，专注工作25分钟之后，计时器响起，立刻放下手上的工作，休息5分钟。</strong></p>
<p>这5分钟必须完全放下工作，你可以上厕所，接一杯水，或者做一个简单的运动项目，比如100次开合跳、50个原地高抬腿跑等等，总之，这5分钟你需要让大脑去真正休息一下，离开工位至少3米以外。</p>
<p>当然每完成一个番茄钟，要及时在番茄跟踪记录表中做记录，比如番茄钟进行中有多少次打断，一天当中有多少次非计划外的任务被添加进来，还有每项任务的预估番茄钟个数和实际番茄钟的个数存在的偏差等等。</p>
<p>然后就是不断重复循环。</p>
<p>当然你也可能会问，“25+5”这种模式会不会来回切换太频繁了，这样会不会更加降低工作效率呢？</p>
<p>其实，这种方式是根据人类大脑自有的节律进行设置的。很多人一开始不适应是因为你的身体习惯了一件事做很久再休息的方式，而使用番茄工作法，改变了这个身体节律，所以产生了身体上的不适感，这并不是大脑不适应。</p>
<p>我们使用番茄工作法的目的是要提高我们大脑的工作效率，所以让身体的节律和大脑保持一致，才是持续高效工作的原始密码。</p>
<p><strong>（3）后期评估</strong></p>
<p>最后一个环节是后期评估。</p>
<p>一天的工作结束了，这时候我们需要花上5分钟时间，复盘一下自己一天的番茄跟踪记录情况。</p>
<p><strong>首先，要把自己早上预估番茄钟的个数，和实际一天真实的番茄钟个数进行对比。</strong></p>
<p>通过这样的方法，来看看自己对时间把控情况，哪些工作预估比较准确，哪些工作的预估还是存在比较大的偏差？不断找原因，找差距，寻找更好的方法来解决这些问题，不断地提升自己对时间的管控感。</p>
<p>然后，还要看看自己一天的番茄标记有多少？如有多少次的打断？有多少项计划外工作？通过分析“番茄跟踪记录”，判断自己有哪些提升？还存在哪些问题？</p>
<h4 id="3、工作被中断怎么办"><a href="#3、工作被中断怎么办" class="headerlink" title="3、工作被中断怎么办"></a>3、工作被中断怎么办</h4><p><strong>（1）内部中断</strong></p>
<p>我们先看第一种中断——内部中断。</p>
<p>作者提出了一个明确的策略，<strong>那就是首先接受它，然后把它可视化，也就是把它记录下来，然后立即继续你手头的工作，避免真的被中断。</strong></p>
<p>这个时候，我们再回过头想一想，在前期计划里的三张表：工作清单表、今日待办表和番茄跟踪记录表，是不是立刻明白了这三张表的重要性？</p>
<p>没错，这个时候突然萌发的工作，如果不是很重要或者很紧急，那就先把它罗列在你的工作清单表中，这样你手上的工作就不会被中断，而且这项工作也不会被遗忘掉。</p>
<p><strong>（2）外部中断</strong></p>
<p>还有一种中断叫外部中断，也就是被他人打断自己的工作。</p>
<p>作者在书里也明确提出了一种处理策略，具体分四步：</p>
<p><strong>第一步：告知</strong></p>
<p>你需要先告知对方，“我手头有事，正忙。” 先保护好自己现有的番茄钟。</p>
<p>这种情况下，中断你工作的人，有一部分就会转向他人。当然还有一些人会继续选择向你求助，那么你就可以启动第二步。</p>
<p><strong>第二步：协商</strong></p>
<p>这一步你需要告诉对方一个准确的时间，比如“周五我再帮你做，你看行吗？”</p>
<p>如果对方不能接受，他就需要另想其他办法了。 </p>
<p>如果对方接受，那你就需要继续启动第三步，并且现在立刻把这项工作列入你的工作清单表中。</p>
<p><strong>第三步：列计划</strong></p>
<p>第三步就是，把这项计划外的工作列入你的工作清单当中，并为它预估一个番茄钟个数。</p>
<p><strong>第四步：答复</strong></p>
<p>最后一步就是，在你完成这项工作后，需要及时给对方一个回复，用于增加他对你的信任程度，不然的话，在以后的工作中，你就很难再得到信任了。</p>
<p>以上就是这本书的全部精华内容。最后，我们总结一下：</p>
<p><strong>1、番茄工作法的核心内容就是在25分钟番茄时间内只专注做一件事。</strong></p>
<p>一旦25分钟的专注工作时间到了，就需要休息5分钟，中途也不可以停止。当你连续完成4个番茄钟的时候，可以获得一个更长时间的休息，也就是20分钟的长休息时间。</p>
<p>通过这种“短时间的专注工作+频繁的休息奖励”的方式，不断激励自己投入下一个工作任务当中，并逐渐喜欢上这种工作方式。</p>
<p><strong>2、番茄工作法具体使用有三个环节：前期计划、中期执行和后期评估。</strong></p>
<p>前期计划需要准备三张表格，它们分别是工作清单表、今日待办表以及番茄跟踪记录表。</p>
<p>中期执行也是分三步。第一步，按照今日待办的所有工作任务，选择一项最重要的工作，作为当前马上要开展的工作；第二步，设定一个25分钟的计时器，作为你的专注工作的时间；第三步，专注工作25分钟之后，计时器响起，立刻放下手上的工作，休息5分钟。</p>
<p>后期评估环节也有两个步骤：首先，要把预估番茄钟和实际番茄钟的个数进行对比，找到自己的不足和差距。同时还要结合自己的番茄记录，了解自己一天有多少次的中断？有多少项计划外工作？找到自己的问题以及短板，为自己的能力提升找到一个明确的方向。</p>
<p><strong>3、在具体工作中如果被中断也有两个策略。</strong></p>
<p>面对内部中断，首先是接受它，然后把它可视化，也就是把它记录下来，然后立即继续你手头的工作。</p>
<p>面对外部打断，可以分四步走：</p>
<p>第一步：告知对方，自己正在忙；</p>
<p>第二步：与对方协商一个新的工作时间；</p>
<p>第三步：把这项计划外的工作列入你的工作清单中。</p>
<p>第四步：在完成这项计划外工作的时候，需要按照承诺给对方一个明确的回复。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>工作方法</tag>
        <tag>效率</tag>
      </tags>
  </entry>
  <entry>
    <title>那些有趣的注释，有没有你曾用过的</title>
    <url>/2023/02/27/%E9%82%A3%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E6%B3%A8%E9%87%8A%EF%BC%8C%E6%9C%89%E6%B2%A1%E6%9C%89%E4%BD%A0%E6%9B%BE%E7%94%A8%E8%BF%87%E7%9A%84/</url>
    <content><![CDATA[<p>闲来无事收集了一些有趣的注释，各式各样的都有，程序员真是一群有趣的人，喜欢哪一款拿走不谢</p>
<span id="more"></span>

<p>第一款：佛祖保佑，永无BUG</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span>                            _ooOoo_    </span><br><span class="line"><span class="string">//</span>                           o8888888o    </span><br><span class="line"><span class="string">//</span>                           88<span class="string">&quot; . &quot;</span>88    </span><br><span class="line"><span class="string">//</span>                           <span class="params">(| -_- |)</span>    </span><br><span class="line"><span class="string">//</span>                            O\ = <span class="string">/O</span>    </span><br><span class="line"><span class="string">//</span>                        ____/`<span class="params">---</span>&#x27;\____    </span><br><span class="line"><span class="string">//</span>                      .   &#x27; \\| |<span class="string">//</span> `.    </span><br><span class="line"><span class="string">//</span>                       / \\||| : |||<span class="string">//</span> \    </span><br><span class="line"><span class="string">//</span>                     / _||||| -<span class="function">:-</span> |||||- \    </span><br><span class="line"><span class="string">//</span>                       | | \\\ - <span class="string">///</span> | |    </span><br><span class="line"><span class="string">//</span>                     | \_| &#x27;&#x27;\<span class="params">---/</span>&#x27;&#x27; | |    </span><br><span class="line"><span class="string">//</span>                      \ <span class="string">.-</span>\__ `-` ___/-. /    </span><br><span class="line"><span class="string">//</span>                   ___`. .&#x27; <span class="string">/--.--</span>\ `. . __    </span><br><span class="line"><span class="string">//</span>                .<span class="string">&quot;&quot;</span> &#x27;&lt; `<span class="string">.___</span>\_&lt;|&gt;_/___.&#x27; &gt;&#x27;<span class="string">&quot;&quot;</span>.    </span><br><span class="line"><span class="string">//</span>               | | : `- \`.;`\ _ /`;.`/ - ` : | |    </span><br><span class="line"><span class="string">//</span>                 \ \ `-. \_ __\ <span class="string">/__</span> _/ <span class="string">.-</span>` / /    </span><br><span class="line"><span class="string">//</span>         ======`-<span class="string">.____</span>`-<span class="string">.___</span>\_____/___.-`____.-&#x27;======    </span><br><span class="line"><span class="string">//</span>                            `=<span class="params">---=</span>&#x27;    </span><br><span class="line"><span class="string">//</span>    </span><br><span class="line"><span class="string">//</span>         <span class="string">.............................................</span>    </span><br><span class="line"><span class="string">//</span>                  佛祖保佑             永无BUG</span><br></pre></td></tr></table></figure>

<p>第二款：神兽护体，永无BUG</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> ┏┓　　　┏┓</span><br><span class="line"><span class="regexp">//</span> ┏┛┻━━━┛┻┓</span><br><span class="line"><span class="regexp">//</span> ┃　　　　　　　┃ 　</span><br><span class="line"><span class="regexp">//</span> ┃　　　━　　　┃</span><br><span class="line"><span class="regexp">//</span> ┃　┳┛　┗┳　┃</span><br><span class="line"><span class="regexp">//</span> ┃　　　　　　　┃</span><br><span class="line"><span class="regexp">//</span> ┃　　　┻　　　┃</span><br><span class="line"><span class="regexp">//</span> ┃　　　　　　　┃</span><br><span class="line"><span class="regexp">//</span> ┗━┓　　　┏━┛</span><br><span class="line"><span class="regexp">//</span> ┃　　　┃ Code is far away from bug with the animal protecting　　　　　　　　</span><br><span class="line"><span class="regexp">//</span> ┃　　　┃ 神兽保护，永无BUG！</span><br><span class="line"><span class="regexp">//</span> ┃　　　┗━━━┓</span><br><span class="line"><span class="regexp">//</span> ┃　　　　　　　┣┓</span><br><span class="line"><span class="regexp">//</span> ┃　　　　　　　┏┛</span><br><span class="line"><span class="regexp">//</span> ┗┓┓┏━┳┓┏┛</span><br><span class="line"><span class="regexp">//</span> ┃┫┫　┃┫┫</span><br><span class="line"><span class="regexp">//</span> ┗┻┛　┗┻┛</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *　　　　　　　　┏┓　　　┏┓+ +</span><br><span class="line"> *　　　　　　　┏┛┻━━━┛┻┓ + +</span><br><span class="line"> *　　　　　　　┃　　　　　　　┃ 　</span><br><span class="line"> *　　　　　　　┃　　　━　　　┃ ++ + + +</span><br><span class="line"> *　　　　　　 ████━████ ┃+</span><br><span class="line"> *　　　　　　　┃　　　　　　　┃ +</span><br><span class="line"> *　　　　　　　┃　　　┻　　　┃</span><br><span class="line"> *　　　　　　　┃　　　　　　　┃ + +</span><br><span class="line"> *　　　　　　　┗━┓　　　┏━┛</span><br><span class="line"> *　　　　　　　　　┃　　　┃　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　┃　　　┃ + + + +</span><br><span class="line"> *　　　　　　　　　┃　　　┃　Code is far away from bug with the animal protecting　　　　　　　</span><br><span class="line"> *　　　　　　　　　┃　　　┃ + 神兽保佑,永无bug　　</span><br><span class="line"> *　　　　　　　　　┃　　　┃</span><br><span class="line"> *　　　　　　　　　┃　　　┃　　+　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　┃　 　　┗━━━┓ + +</span><br><span class="line"> *　　　　　　　　　┃ 　　　　　　　┣┓</span><br><span class="line"> *　　　　　　　　　┃ 　　　　　　　┏┛</span><br><span class="line"> *　　　　　　　　　┗┓┓┏━┳┓┏┛ + + + +</span><br><span class="line"> *　　　　　　　　　　┃┫┫　┃┫┫</span><br><span class="line"> *　　　　　　　　　　┗┻┛　┗┻┛+ + + +</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>第三款：来首程序员打油诗，笑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *                      江城子 . 程序员之歌</span><br><span class="line"> *</span><br><span class="line"> *                  十年生死两茫茫，写程序，到天亮。</span><br><span class="line"> *                      千行代码，Bug何处藏。</span><br><span class="line"> *                  纵使上线又怎样，朝令改，夕断肠。</span><br><span class="line"> *</span><br><span class="line"> *                  领导每天新想法，天天改，日日忙。</span><br><span class="line"> *                      相顾无言，惟有泪千行。</span><br><span class="line"> *                  每晚灯火阑珊处，夜难寐，加班狂。</span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *          写字楼里写字间，写字间里程序员；</span><br><span class="line"> *          程序人员写程序，又拿程序换酒钱。</span><br><span class="line"> *          酒醒只在网上坐，酒醉还来网下眠；</span><br><span class="line"> *          酒醉酒醒日复日，网上网下年复年。</span><br><span class="line"> *          但愿老死电脑间，不愿鞠躬老板前；</span><br><span class="line"> *          奔驰宝马贵者趣，公交自行程序员。</span><br><span class="line"> *          别人笑我忒疯癫，我笑自己命太贱；</span><br><span class="line"> *          不见满街漂亮妹，哪个归得程序员？</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>第四款：单身狗专用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">                       ::</span><br><span class="line">                      :;J7, :,                        ::;7:</span><br><span class="line">                      ,ivYi, ,                       ;LLLFS:</span><br><span class="line">                      :iv7Yi                       :7ri;j5PL</span><br><span class="line">                     ,:ivYLvr                    ,ivrrirrY2X,</span><br><span class="line">                     :;r@Wwz.7r:                :ivu@kexianli.</span><br><span class="line">                    :iL7::,:::iiirii:ii;::::,,irvF7rvvLujL7ur</span><br><span class="line">                   ri::,:,::i:iiiiiii:i:irrv177JX7rYXqZEkvv17</span><br><span class="line">                ;i:, , ::::iirrririi:i:::iiir2XXvii;L8OGJr71i</span><br><span class="line">              :,, ,,:   ,::ir@mingyi.irii:i:::j1jri7ZBOS7ivv,</span><br><span class="line">                 ,::,    ::rv77iiiriii:iii:i::,rvLq@huhao.Li</span><br><span class="line">             ,,      ,, ,:ir7ir::,:::i;ir:::i:i::rSGGYri712:</span><br><span class="line">           :::  ,v7r:: ::rrv77:, ,, ,:i7rrii:::::, ir7ri7Lri</span><br><span class="line">          ,     2OBBOi,iiir;r::        ,irriiii::,, ,iv7Luur:</span><br><span class="line">        ,,     i78MBBi,:,:::,:,  :7FSL: ,iriii:::i::,,:rLqXv::</span><br><span class="line">        :      iuMMP: :,:::,:ii;2GY7OBB0viiii:i:iii:i:::iJqL;::</span><br><span class="line">       ,     ::::i   ,,,,, ::LuBBu BBBBBErii:i:i:i:i:i:i:r77ii</span><br><span class="line">      ,       :       , ,,:::rruBZ1MBBqi, :,,,:::,::::::iiriri:</span><br><span class="line">     ,               ,,,,::::i:  @arqiao.       ,:,, ,:::ii;i7:</span><br><span class="line">    :,       rjujLYLi   ,,:::::,:::::::::,,   ,:i,:,,,,,::i:iii</span><br><span class="line">    ::      BBBBBBBBB0,    ,,::: , ,:::::: ,      ,,,, ,,:::::::</span><br><span class="line">    i,  ,  ,8BMMBBBBBBi     ,,:,,     ,,, , ,   , , , :,::ii::i::</span><br><span class="line">    :      iZMOMOMBBM2::::::::::,,,,     ,,,,,,:,,,::::i:irr:i:::,</span><br><span class="line">    i   ,,:;u0MBMOG1L:::i::::::  ,,,::,   ,,, ::::::i:i:iirii:i:i:</span><br><span class="line">    :    ,iuUuuXUkFu7i:iii:i:::, :,:,: ::::::::i:i:::::iirr7iiri::</span><br><span class="line">    :     :rk@Yizero.i:::::, ,:ii:::::::i:::::i::,::::iirrriiiri::,</span><br><span class="line">     :      5BMBBBBBBSr:,::rv2kuii:::iii::,:i:,, , ,,:,:i@petermu.,</span><br><span class="line">          , :r50EZ8MBBBBGOBBBZP7::::i::,:::::,: :,:,::i;rrririiii::</span><br><span class="line">              :jujYY7LS0ujJL7r::,::i::,::::::::::::::iirirrrrrrr:ii:</span><br><span class="line">           ,:  :@kevensun.:,:,,,::::i:i:::::,,::::::iir;ii;7v77;ii;i,</span><br><span class="line">           ,,,     ,,:,::::::i:iiiii:i::::,, ::::iiiir@xingjief.r;7:i,</span><br><span class="line">        , , ,,,:,,::::::::iiiiiiiiii:,:,:::::::::iiir;ri7vL77rrirri::</span><br><span class="line">         :,, , ::::::::i:::i:::i:i::,,,,,:,::i:i:::iir;@Secbone.ii:::</span><br><span class="line"></span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<p>第五款：骷髅头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> **************************************************************</span><br><span class="line"> *                                                            *</span><br><span class="line"> *   .=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-.       *</span><br><span class="line"> *    |                     ______                     |      *</span><br><span class="line"> *    |                  .-&quot;      &quot;-.                  |      *</span><br><span class="line"> *    |                 /            \                 |      *</span><br><span class="line"> *    |     _          |              |          _     |      *</span><br><span class="line"> *    |    ( \         |,  .-.  .-.  ,|         / )    |      *</span><br><span class="line"> *    |     &gt; &quot;=._     | )(__/  \__)( |     _.=&quot; &lt;     |      *</span><br><span class="line"> *    |    (_/&quot;=._&quot;=._ |/     /\     \| _.=&quot;_.=&quot;\_)    |      *</span><br><span class="line"> *    |           &quot;=._&quot;(_     ^^     _)&quot;_.=&quot;           |      *</span><br><span class="line"> *    |               &quot;=\__|IIIIII|__/=&quot;               |      *</span><br><span class="line"> *    |              _.=&quot;| \IIIIII/ |&quot;=._              |      *</span><br><span class="line"> *    |    _     _.=&quot;_.=&quot;\          /&quot;=._&quot;=._     _    |      *</span><br><span class="line"> *    |   ( \_.=&quot;_.=&quot;     `--------`     &quot;=._&quot;=._/ )   |      *</span><br><span class="line"> *    |    &gt; _.=&quot;                            &quot;=._ &lt;    |      *</span><br><span class="line"> *    |   (_/                                    \_)   |      *</span><br><span class="line"> *    |                                                |      *</span><br><span class="line"> *    &#x27;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=&#x27;      *</span><br><span class="line"> *                                                            *</span><br><span class="line"> *           LASCIATE OGNI SPERANZA, VOI CH&#x27;ENTRATE           *</span><br><span class="line"> **************************************************************</span><br><span class="line"> */</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第六款：标准键盘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐</span><br><span class="line"> * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐</span><br><span class="line"> * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘</span><br><span class="line"> * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐</span><br><span class="line"> * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │</span><br><span class="line"> * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤</span><br><span class="line"> * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │</span><br><span class="line"> * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │</span><br><span class="line"> * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &#x27;│ Enter  │               │ 4 │ 5 │ 6 │   │</span><br><span class="line"> * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤</span><br><span class="line"> * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │</span><br><span class="line"> * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││</span><br><span class="line"> * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│</span><br><span class="line"> * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>第七款：顶</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 頂頂頂頂頂頂頂頂頂　頂頂頂頂頂頂頂頂頂</span><br><span class="line"> * 頂頂頂頂頂頂頂　　　　　頂頂　　　　　</span><br><span class="line"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　　　　　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　　　　　頂頂頂　</span><br><span class="line"> * 　　　頂頂　　　　　　頂頂　頂頂　頂頂</span><br><span class="line"> * 　頂頂頂頂　　　頂頂頂頂頂　頂頂頂頂頂</span><br><span class="line"> * 　頂頂頂頂　　　頂頂頂頂　　　頂頂頂頂</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>还有一些其他有趣搞怪的注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * _ooOoo_</span><br><span class="line"> * o8888888o</span><br><span class="line"> * 88&quot; . &quot;88</span><br><span class="line"> * (| -_- |)</span><br><span class="line"> *  O\ = /O</span><br><span class="line"> * ___/`---&#x27;\____</span><br><span class="line"> * .   &#x27; \\| |// `.</span><br><span class="line"> * / \\||| : |||// \</span><br><span class="line"> * / _||||| -:- |||||- \</span><br><span class="line"> * | | \\\ - /// | |</span><br><span class="line"> * | \_| &#x27;&#x27;\---/&#x27;&#x27; | |</span><br><span class="line"> * \ .-\__ `-` ___/-. /</span><br><span class="line"> * ___`. .&#x27; /--.--\ `. . __</span><br><span class="line"> * .&quot;&quot; &#x27;&lt; `.___\_&lt;|&gt;_/___.&#x27; &gt;&#x27;&quot;&quot;.</span><br><span class="line"> * | | : `- \`.;`\ _ /`;.`/ - ` : | |</span><br><span class="line"> * \ \ `-. \_ __\ /__ _/ .-` / /</span><br><span class="line"> * ======`-.____`-.___\_____/___.-`____.-&#x27;======</span><br><span class="line"> * `=---=&#x27;</span><br><span class="line"> * .............................................</span><br><span class="line"> * 佛曰：bug泛滥，我已瘫痪！</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *                                         ,s555SB@@&amp;                          </span><br><span class="line"> *                                      :9H####@@@@@Xi                        </span><br><span class="line"> *                                     1@@@@@@@@@@@@@@8                       </span><br><span class="line"> *                                   ,8@@@@@@@@@B@@@@@@8                      </span><br><span class="line"> *                                  :B@@@@X3hi8Bs;B@@@@@Ah,                   </span><br><span class="line"> *             ,8i                  r@@@B:     1S ,M@@@@@@#8;                 </span><br><span class="line"> *            1AB35.i:               X@@8 .   SGhr ,A@@@@@@@@S                </span><br><span class="line"> *            1@h31MX8                18Hhh3i .i3r ,A@@@@@@@@@5               </span><br><span class="line"> *            ;@&amp;i,58r5                 rGSS:     :B@@@@@@@@@@A               </span><br><span class="line"> *             1#i  . 9i                 hX.  .: .5@@@@@@@@@@@1               </span><br><span class="line"> *              sG1,  ,G53s.              9#Xi;hS5 3B@@@@@@@B1                </span><br><span class="line"> *               .h8h.,A@@@MXSs,           #@H1:    3ssSSX@1                  </span><br><span class="line"> *               s ,@@@@@@@@@@@@Xhi,       r#@@X1s9M8    .GA981               </span><br><span class="line"> *               ,. rS8H#@@@@@@@@@@#HG51;.  .h31i;9@r    .8@@@@BS;i;          </span><br><span class="line"> *                .19AXXXAB@@@@@@@@@@@@@@#MHXG893hrX#XGGXM@@@@@@@@@@MS        </span><br><span class="line"> *                s@@MM@@@hsX#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;,      </span><br><span class="line"> *              :GB@#3G@@Brs ,1GM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B,     </span><br><span class="line"> *            .hM@@@#@@#MX 51  r;iSGAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8     </span><br><span class="line"> *          :3B@@@@@@@@@@@&amp;9@h :Gs   .;sSXH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:    </span><br><span class="line"> *      s&amp;HA#@@@@@@@@@@@@@@M89A;.8S.       ,r3@@@@@@@@@@@@@@@@@@@@@@@@@@@r    </span><br><span class="line"> *   ,13B@@@@@@@@@@@@@@@@@@@5 5B3 ;.         ;@@@@@@@@@@@@@@@@@@@@@@@@@@@i    </span><br><span class="line"> *  5#@@#&amp;@@@@@@@@@@@@@@@@@@9  .39:          ;@@@@@@@@@@@@@@@@@@@@@@@@@@@;    </span><br><span class="line"> *  9@@@X:MM@@@@@@@@@@@@@@@#;    ;31.         H@@@@@@@@@@@@@@@@@@@@@@@@@@:    </span><br><span class="line"> *   SH#@B9.rM@@@@@@@@@@@@@B       :.         3@@@@@@@@@@@@@@@@@@@@@@@@@@5    </span><br><span class="line"> *     ,:.   9@@@@@@@@@@@#HB5                 .M@@@@@@@@@@@@@@@@@@@@@@@@@B    </span><br><span class="line"> *           ,ssirhSM@&amp;1;i19911i,.             s@@@@@@@@@@@@@@@@@@@@@@@@@@S   </span><br><span class="line"> *              ,,,rHAri1h1rh&amp;@#353Sh:          8@@@@@@@@@@@@@@@@@@@@@@@@@#:  </span><br><span class="line"> *            .A3hH@#5S553&amp;@@#h   i:i9S          #@@@@@@@@@@@@@@@@@@@@@@@@@A. </span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *   </span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p>上面这些都不能满足你，想要找更多的ascii图在这里<a href="http://www.asciiworld.com/">http://www.asciiworld.com/</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>程序员</tag>
      </tags>
  </entry>
</search>
